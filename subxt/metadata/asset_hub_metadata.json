[
  1635018093,
  {
    "V15": {
      "types": {
        "types": [
          {
            "id": 0,
            "type": {
              "path": [
                "sp_core",
                "crypto",
                "AccountId32"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 1,
                      "typeName": "[u8; 32]"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 1,
            "type": {
              "def": {
                "array": {
                  "len": 32,
                  "type": 2
                }
              }
            }
          },
          {
            "id": 2,
            "type": {
              "def": {
                "primitive": "u8"
              }
            }
          },
          {
            "id": 3,
            "type": {
              "path": [
                "frame_system",
                "AccountInfo"
              ],
              "params": [
                {
                  "name": "Nonce",
                  "type": 4
                },
                {
                  "name": "AccountData",
                  "type": 5
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "nonce",
                      "type": 4,
                      "typeName": "Nonce"
                    },
                    {
                      "name": "consumers",
                      "type": 4,
                      "typeName": "RefCount"
                    },
                    {
                      "name": "providers",
                      "type": 4,
                      "typeName": "RefCount"
                    },
                    {
                      "name": "sufficients",
                      "type": 4,
                      "typeName": "RefCount"
                    },
                    {
                      "name": "data",
                      "type": 5,
                      "typeName": "AccountData"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 4,
            "type": {
              "def": {
                "primitive": "u32"
              }
            }
          },
          {
            "id": 5,
            "type": {
              "path": [
                "pallet_balances",
                "types",
                "AccountData"
              ],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "free",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "reserved",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "frozen",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "flags",
                      "type": 7,
                      "typeName": "ExtraFlags"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 6,
            "type": {
              "def": {
                "primitive": "u128"
              }
            }
          },
          {
            "id": 7,
            "type": {
              "path": [
                "pallet_balances",
                "types",
                "ExtraFlags"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 6,
                      "typeName": "u128"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 8,
            "type": {
              "def": {
                "primitive": "bool"
              }
            }
          },
          {
            "id": 9,
            "type": {
              "path": [
                "frame_support",
                "dispatch",
                "PerDispatchClass"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 10
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "normal",
                      "type": 10,
                      "typeName": "T"
                    },
                    {
                      "name": "operational",
                      "type": 10,
                      "typeName": "T"
                    },
                    {
                      "name": "mandatory",
                      "type": 10,
                      "typeName": "T"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 10,
            "type": {
              "path": [
                "sp_weights",
                "weight_v2",
                "Weight"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "ref_time",
                      "type": 11,
                      "typeName": "u64"
                    },
                    {
                      "name": "proof_size",
                      "type": 11,
                      "typeName": "u64"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 11,
            "type": {
              "def": {
                "compact": {
                  "type": 12
                }
              }
            }
          },
          {
            "id": 12,
            "type": {
              "def": {
                "primitive": "u64"
              }
            }
          },
          {
            "id": 13,
            "type": {
              "path": [
                "primitive_types",
                "H256"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 1,
                      "typeName": "[u8; 32]"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 14,
            "type": {
              "def": {
                "sequence": {
                  "type": 2
                }
              }
            }
          },
          {
            "id": 15,
            "type": {
              "path": [
                "sp_runtime",
                "generic",
                "digest",
                "Digest"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "logs",
                      "type": 16,
                      "typeName": "Vec<DigestItem>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 16,
            "type": {
              "def": {
                "sequence": {
                  "type": 17
                }
              }
            }
          },
          {
            "id": 17,
            "type": {
              "path": [
                "sp_runtime",
                "generic",
                "digest",
                "DigestItem"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "PreRuntime",
                      "fields": [
                        {
                          "type": 18,
                          "typeName": "ConsensusEngineId"
                        },
                        {
                          "type": 14,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 6
                    },
                    {
                      "name": "Consensus",
                      "fields": [
                        {
                          "type": 18,
                          "typeName": "ConsensusEngineId"
                        },
                        {
                          "type": 14,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 4
                    },
                    {
                      "name": "Seal",
                      "fields": [
                        {
                          "type": 18,
                          "typeName": "ConsensusEngineId"
                        },
                        {
                          "type": 14,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 5
                    },
                    {
                      "name": "Other",
                      "fields": [
                        {
                          "type": 14,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "RuntimeEnvironmentUpdated",
                      "index": 8
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 18,
            "type": {
              "def": {
                "array": {
                  "len": 4,
                  "type": 2
                }
              }
            }
          },
          {
            "id": 19,
            "type": {
              "def": {
                "sequence": {
                  "type": 20
                }
              }
            }
          },
          {
            "id": 20,
            "type": {
              "path": [
                "frame_system",
                "EventRecord"
              ],
              "params": [
                {
                  "name": "E",
                  "type": 21
                },
                {
                  "name": "T",
                  "type": 13
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "phase",
                      "type": 159,
                      "typeName": "Phase"
                    },
                    {
                      "name": "event",
                      "type": 21,
                      "typeName": "E"
                    },
                    {
                      "name": "topics",
                      "type": 160,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 21,
            "type": {
              "path": [
                "asset_hub_westend_runtime",
                "RuntimeEvent"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "System",
                      "fields": [
                        {
                          "type": 22,
                          "typeName": "frame_system::Event<Runtime>"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "ParachainSystem",
                      "fields": [
                        {
                          "type": 31,
                          "typeName": "cumulus_pallet_parachain_system::Event<Runtime>"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "Balances",
                      "fields": [
                        {
                          "type": 33,
                          "typeName": "pallet_balances::Event<Runtime>"
                        }
                      ],
                      "index": 10
                    },
                    {
                      "name": "TransactionPayment",
                      "fields": [
                        {
                          "type": 35,
                          "typeName": "pallet_transaction_payment::Event<Runtime>"
                        }
                      ],
                      "index": 11
                    },
                    {
                      "name": "AssetTxPayment",
                      "fields": [
                        {
                          "type": 36,
                          "typeName": "pallet_asset_conversion_tx_payment::Event<Runtime>"
                        }
                      ],
                      "index": 13
                    },
                    {
                      "name": "CollatorSelection",
                      "fields": [
                        {
                          "type": 47,
                          "typeName": "pallet_collator_selection::Event<Runtime>"
                        }
                      ],
                      "index": 21
                    },
                    {
                      "name": "Session",
                      "fields": [
                        {
                          "type": 49,
                          "typeName": "pallet_session::Event"
                        }
                      ],
                      "index": 22
                    },
                    {
                      "name": "XcmpQueue",
                      "fields": [
                        {
                          "type": 50,
                          "typeName": "cumulus_pallet_xcmp_queue::Event<Runtime>"
                        }
                      ],
                      "index": 30
                    },
                    {
                      "name": "PolkadotXcm",
                      "fields": [
                        {
                          "type": 51,
                          "typeName": "pallet_xcm::Event<Runtime>"
                        }
                      ],
                      "index": 31
                    },
                    {
                      "name": "CumulusXcm",
                      "fields": [
                        {
                          "type": 116,
                          "typeName": "cumulus_pallet_xcm::Event<Runtime>"
                        }
                      ],
                      "index": 32
                    },
                    {
                      "name": "MessageQueue",
                      "fields": [
                        {
                          "type": 117,
                          "typeName": "pallet_message_queue::Event<Runtime>"
                        }
                      ],
                      "index": 35
                    },
                    {
                      "name": "Utility",
                      "fields": [
                        {
                          "type": 121,
                          "typeName": "pallet_utility::Event"
                        }
                      ],
                      "index": 40
                    },
                    {
                      "name": "Multisig",
                      "fields": [
                        {
                          "type": 124,
                          "typeName": "pallet_multisig::Event<Runtime>"
                        }
                      ],
                      "index": 41
                    },
                    {
                      "name": "Proxy",
                      "fields": [
                        {
                          "type": 126,
                          "typeName": "pallet_proxy::Event<Runtime>"
                        }
                      ],
                      "index": 42
                    },
                    {
                      "name": "Assets",
                      "fields": [
                        {
                          "type": 129,
                          "typeName": "pallet_assets::Event<Runtime, pallet_assets::Instance1>"
                        }
                      ],
                      "index": 50
                    },
                    {
                      "name": "Uniques",
                      "fields": [
                        {
                          "type": 130,
                          "typeName": "pallet_uniques::Event<Runtime>"
                        }
                      ],
                      "index": 51
                    },
                    {
                      "name": "Nfts",
                      "fields": [
                        {
                          "type": 137,
                          "typeName": "pallet_nfts::Event<Runtime>"
                        }
                      ],
                      "index": 52
                    },
                    {
                      "name": "ForeignAssets",
                      "fields": [
                        {
                          "type": 144,
                          "typeName": "pallet_assets::Event<Runtime, pallet_assets::Instance2>"
                        }
                      ],
                      "index": 53
                    },
                    {
                      "name": "NftFractionalization",
                      "fields": [
                        {
                          "type": 145,
                          "typeName": "pallet_nft_fractionalization::Event<Runtime>"
                        }
                      ],
                      "index": 54
                    },
                    {
                      "name": "PoolAssets",
                      "fields": [
                        {
                          "type": 146,
                          "typeName": "pallet_assets::Event<Runtime, pallet_assets::Instance3>"
                        }
                      ],
                      "index": 55
                    },
                    {
                      "name": "AssetConversion",
                      "fields": [
                        {
                          "type": 147,
                          "typeName": "pallet_asset_conversion::Event<Runtime>"
                        }
                      ],
                      "index": 56
                    },
                    {
                      "name": "AssetsFreezer",
                      "fields": [
                        {
                          "type": 152,
                          "typeName": "pallet_assets_freezer::Event<Runtime, pallet_assets_freezer::Instance1>"
                        }
                      ],
                      "index": 57
                    },
                    {
                      "name": "ForeignAssetsFreezer",
                      "fields": [
                        {
                          "type": 153,
                          "typeName": "pallet_assets_freezer::Event<Runtime, pallet_assets_freezer::Instance2>"
                        }
                      ],
                      "index": 58
                    },
                    {
                      "name": "PoolAssetsFreezer",
                      "fields": [
                        {
                          "type": 154,
                          "typeName": "pallet_assets_freezer::Event<Runtime, pallet_assets_freezer::Instance3>"
                        }
                      ],
                      "index": 59
                    },
                    {
                      "name": "StateTrieMigration",
                      "fields": [
                        {
                          "type": 155,
                          "typeName": "pallet_state_trie_migration::Event<Runtime>"
                        }
                      ],
                      "index": 70
                    },
                    {
                      "name": "AssetConversionMigration",
                      "fields": [
                        {
                          "type": 158,
                          "typeName": "pallet_asset_conversion_ops::Event<Runtime>"
                        }
                      ],
                      "index": 200
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 22,
            "type": {
              "path": [
                "frame_system",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "ExtrinsicSuccess",
                      "fields": [
                        {
                          "name": "dispatch_info",
                          "type": 23,
                          "typeName": "DispatchInfo"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "An extrinsic completed successfully."
                      ]
                    },
                    {
                      "name": "ExtrinsicFailed",
                      "fields": [
                        {
                          "name": "dispatch_error",
                          "type": 26,
                          "typeName": "DispatchError"
                        },
                        {
                          "name": "dispatch_info",
                          "type": 23,
                          "typeName": "DispatchInfo"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "An extrinsic failed."
                      ]
                    },
                    {
                      "name": "CodeUpdated",
                      "index": 2,
                      "docs": [
                        "`:code` was updated."
                      ]
                    },
                    {
                      "name": "NewAccount",
                      "fields": [
                        {
                          "name": "account",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "A new account was created."
                      ]
                    },
                    {
                      "name": "KilledAccount",
                      "fields": [
                        {
                          "name": "account",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "An account was reaped."
                      ]
                    },
                    {
                      "name": "Remarked",
                      "fields": [
                        {
                          "name": "sender",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "hash",
                          "type": 13,
                          "typeName": "T::Hash"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "On on-chain remark happened."
                      ]
                    },
                    {
                      "name": "UpgradeAuthorized",
                      "fields": [
                        {
                          "name": "code_hash",
                          "type": 13,
                          "typeName": "T::Hash"
                        },
                        {
                          "name": "check_version",
                          "type": 8,
                          "typeName": "bool"
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "An upgrade was authorized."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Event for the System pallet."
              ]
            }
          },
          {
            "id": 23,
            "type": {
              "path": [
                "frame_support",
                "dispatch",
                "DispatchInfo"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "weight",
                      "type": 10,
                      "typeName": "Weight"
                    },
                    {
                      "name": "class",
                      "type": 24,
                      "typeName": "DispatchClass"
                    },
                    {
                      "name": "pays_fee",
                      "type": 25,
                      "typeName": "Pays"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 24,
            "type": {
              "path": [
                "frame_support",
                "dispatch",
                "DispatchClass"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Normal",
                      "index": 0
                    },
                    {
                      "name": "Operational",
                      "index": 1
                    },
                    {
                      "name": "Mandatory",
                      "index": 2
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 25,
            "type": {
              "path": [
                "frame_support",
                "dispatch",
                "Pays"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Yes",
                      "index": 0
                    },
                    {
                      "name": "No",
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 26,
            "type": {
              "path": [
                "sp_runtime",
                "DispatchError"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Other",
                      "index": 0
                    },
                    {
                      "name": "CannotLookup",
                      "index": 1
                    },
                    {
                      "name": "BadOrigin",
                      "index": 2
                    },
                    {
                      "name": "Module",
                      "fields": [
                        {
                          "type": 27,
                          "typeName": "ModuleError"
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "ConsumerRemaining",
                      "index": 4
                    },
                    {
                      "name": "NoProviders",
                      "index": 5
                    },
                    {
                      "name": "TooManyConsumers",
                      "index": 6
                    },
                    {
                      "name": "Token",
                      "fields": [
                        {
                          "type": 28,
                          "typeName": "TokenError"
                        }
                      ],
                      "index": 7
                    },
                    {
                      "name": "Arithmetic",
                      "fields": [
                        {
                          "type": 29,
                          "typeName": "ArithmeticError"
                        }
                      ],
                      "index": 8
                    },
                    {
                      "name": "Transactional",
                      "fields": [
                        {
                          "type": 30,
                          "typeName": "TransactionalError"
                        }
                      ],
                      "index": 9
                    },
                    {
                      "name": "Exhausted",
                      "index": 10
                    },
                    {
                      "name": "Corruption",
                      "index": 11
                    },
                    {
                      "name": "Unavailable",
                      "index": 12
                    },
                    {
                      "name": "RootNotAllowed",
                      "index": 13
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 27,
            "type": {
              "path": [
                "sp_runtime",
                "ModuleError"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "index",
                      "type": 2,
                      "typeName": "u8"
                    },
                    {
                      "name": "error",
                      "type": 18,
                      "typeName": "[u8; MAX_MODULE_ERROR_ENCODED_SIZE]"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 28,
            "type": {
              "path": [
                "sp_runtime",
                "TokenError"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "FundsUnavailable",
                      "index": 0
                    },
                    {
                      "name": "OnlyProvider",
                      "index": 1
                    },
                    {
                      "name": "BelowMinimum",
                      "index": 2
                    },
                    {
                      "name": "CannotCreate",
                      "index": 3
                    },
                    {
                      "name": "UnknownAsset",
                      "index": 4
                    },
                    {
                      "name": "Frozen",
                      "index": 5
                    },
                    {
                      "name": "Unsupported",
                      "index": 6
                    },
                    {
                      "name": "CannotCreateHold",
                      "index": 7
                    },
                    {
                      "name": "NotExpendable",
                      "index": 8
                    },
                    {
                      "name": "Blocked",
                      "index": 9
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 29,
            "type": {
              "path": [
                "sp_arithmetic",
                "ArithmeticError"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Underflow",
                      "index": 0
                    },
                    {
                      "name": "Overflow",
                      "index": 1
                    },
                    {
                      "name": "DivisionByZero",
                      "index": 2
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 30,
            "type": {
              "path": [
                "sp_runtime",
                "TransactionalError"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "LimitReached",
                      "index": 0
                    },
                    {
                      "name": "NoLayer",
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 31,
            "type": {
              "path": [
                "cumulus_pallet_parachain_system",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "ValidationFunctionStored",
                      "index": 0,
                      "docs": [
                        "The validation function has been scheduled to apply."
                      ]
                    },
                    {
                      "name": "ValidationFunctionApplied",
                      "fields": [
                        {
                          "name": "relay_chain_block_num",
                          "type": 4,
                          "typeName": "RelayChainBlockNumber"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "The validation function was applied as of the contained relay chain block number."
                      ]
                    },
                    {
                      "name": "ValidationFunctionDiscarded",
                      "index": 2,
                      "docs": [
                        "The relay-chain aborted the upgrade process."
                      ]
                    },
                    {
                      "name": "DownwardMessagesReceived",
                      "fields": [
                        {
                          "name": "count",
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Some downward messages have been received and will be processed."
                      ]
                    },
                    {
                      "name": "DownwardMessagesProcessed",
                      "fields": [
                        {
                          "name": "weight_used",
                          "type": 10,
                          "typeName": "Weight"
                        },
                        {
                          "name": "dmq_head",
                          "type": 13,
                          "typeName": "relay_chain::Hash"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Downward messages were processed using the given weight."
                      ]
                    },
                    {
                      "name": "UpwardMessageSent",
                      "fields": [
                        {
                          "name": "message_hash",
                          "type": 32,
                          "typeName": "Option<XcmHash>"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "An upward message was sent to the relay chain."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "The `Event` enum of this pallet"
              ]
            }
          },
          {
            "id": 32,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 1
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 1
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 33,
            "type": {
              "path": [
                "pallet_balances",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Endowed",
                      "fields": [
                        {
                          "name": "account",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "free_balance",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "An account was created with some free balance."
                      ]
                    },
                    {
                      "name": "DustLost",
                      "fields": [
                        {
                          "name": "account",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "An account was removed whose balance was non-zero but below ExistentialDeposit,",
                        "resulting in an outright loss."
                      ]
                    },
                    {
                      "name": "Transfer",
                      "fields": [
                        {
                          "name": "from",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "to",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Transfer succeeded."
                      ]
                    },
                    {
                      "name": "BalanceSet",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "free",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "A balance was set by root."
                      ]
                    },
                    {
                      "name": "Reserved",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Some balance was reserved (moved from free to reserved)."
                      ]
                    },
                    {
                      "name": "Unreserved",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Some balance was unreserved (moved from reserved to free)."
                      ]
                    },
                    {
                      "name": "ReserveRepatriated",
                      "fields": [
                        {
                          "name": "from",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "to",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        },
                        {
                          "name": "destination_status",
                          "type": 34,
                          "typeName": "Status"
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "Some balance was moved from the reserve of the first account to the second account.",
                        "Final argument indicates the destination balance type."
                      ]
                    },
                    {
                      "name": "Deposit",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "Some amount was deposited (e.g. for transaction fees)."
                      ]
                    },
                    {
                      "name": "Withdraw",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 8,
                      "docs": [
                        "Some amount was withdrawn from the account (e.g. for transaction fees)."
                      ]
                    },
                    {
                      "name": "Slashed",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 9,
                      "docs": [
                        "Some amount was removed from the account (e.g. for misbehavior)."
                      ]
                    },
                    {
                      "name": "Minted",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 10,
                      "docs": [
                        "Some amount was minted into an account."
                      ]
                    },
                    {
                      "name": "Burned",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 11,
                      "docs": [
                        "Some amount was burned from an account."
                      ]
                    },
                    {
                      "name": "Suspended",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 12,
                      "docs": [
                        "Some amount was suspended from an account (it can be restored later)."
                      ]
                    },
                    {
                      "name": "Restored",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 13,
                      "docs": [
                        "Some amount was restored into an account."
                      ]
                    },
                    {
                      "name": "Upgraded",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 14,
                      "docs": [
                        "An account was upgraded."
                      ]
                    },
                    {
                      "name": "Issued",
                      "fields": [
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 15,
                      "docs": [
                        "Total issuance was increased by `amount`, creating a credit to be balanced."
                      ]
                    },
                    {
                      "name": "Rescinded",
                      "fields": [
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 16,
                      "docs": [
                        "Total issuance was decreased by `amount`, creating a debt to be balanced."
                      ]
                    },
                    {
                      "name": "Locked",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 17,
                      "docs": [
                        "Some balance was locked."
                      ]
                    },
                    {
                      "name": "Unlocked",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 18,
                      "docs": [
                        "Some balance was unlocked."
                      ]
                    },
                    {
                      "name": "Frozen",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 19,
                      "docs": [
                        "Some balance was frozen."
                      ]
                    },
                    {
                      "name": "Thawed",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 20,
                      "docs": [
                        "Some balance was thawed."
                      ]
                    },
                    {
                      "name": "TotalIssuanceForced",
                      "fields": [
                        {
                          "name": "old",
                          "type": 6,
                          "typeName": "T::Balance"
                        },
                        {
                          "name": "new",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 21,
                      "docs": [
                        "The `TotalIssuance` was forcefully changed."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "The `Event` enum of this pallet"
              ]
            }
          },
          {
            "id": 34,
            "type": {
              "path": [
                "frame_support",
                "traits",
                "tokens",
                "misc",
                "BalanceStatus"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Free",
                      "index": 0
                    },
                    {
                      "name": "Reserved",
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 35,
            "type": {
              "path": [
                "pallet_transaction_payment",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "TransactionFeePaid",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "actual_fee",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        },
                        {
                          "name": "tip",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "A transaction fee `actual_fee`, of which `tip` was added to the minimum inclusion fee,",
                        "has been paid by `who`."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "The `Event` enum of this pallet"
              ]
            }
          },
          {
            "id": 36,
            "type": {
              "path": [
                "pallet_asset_conversion_tx_payment",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "AssetTxFeePaid",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "actual_fee",
                          "type": 6,
                          "typeName": "AssetBalanceOf<T>"
                        },
                        {
                          "name": "tip",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        },
                        {
                          "name": "asset_id",
                          "type": 37,
                          "typeName": "ChargeAssetIdOf<T>"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "A transaction fee `actual_fee`, of which `tip` was added to the minimum inclusion fee,",
                        "has been paid by `who` in an asset `asset_id`."
                      ]
                    },
                    {
                      "name": "AssetRefundFailed",
                      "fields": [
                        {
                          "name": "native_amount_kept",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "A swap of the refund in native currency back to asset failed."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "The `Event` enum of this pallet"
              ]
            }
          },
          {
            "id": 37,
            "type": {
              "path": [
                "staging_xcm",
                "v3",
                "multilocation",
                "MultiLocation"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "parents",
                      "type": 2,
                      "typeName": "u8"
                    },
                    {
                      "name": "interior",
                      "type": 38,
                      "typeName": "Junctions"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 38,
            "type": {
              "path": [
                "xcm",
                "v3",
                "junctions",
                "Junctions"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Here",
                      "index": 0
                    },
                    {
                      "name": "X1",
                      "fields": [
                        {
                          "type": 39,
                          "typeName": "Junction"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "X2",
                      "fields": [
                        {
                          "type": 39,
                          "typeName": "Junction"
                        },
                        {
                          "type": 39,
                          "typeName": "Junction"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "X3",
                      "fields": [
                        {
                          "type": 39,
                          "typeName": "Junction"
                        },
                        {
                          "type": 39,
                          "typeName": "Junction"
                        },
                        {
                          "type": 39,
                          "typeName": "Junction"
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "X4",
                      "fields": [
                        {
                          "type": 39,
                          "typeName": "Junction"
                        },
                        {
                          "type": 39,
                          "typeName": "Junction"
                        },
                        {
                          "type": 39,
                          "typeName": "Junction"
                        },
                        {
                          "type": 39,
                          "typeName": "Junction"
                        }
                      ],
                      "index": 4
                    },
                    {
                      "name": "X5",
                      "fields": [
                        {
                          "type": 39,
                          "typeName": "Junction"
                        },
                        {
                          "type": 39,
                          "typeName": "Junction"
                        },
                        {
                          "type": 39,
                          "typeName": "Junction"
                        },
                        {
                          "type": 39,
                          "typeName": "Junction"
                        },
                        {
                          "type": 39,
                          "typeName": "Junction"
                        }
                      ],
                      "index": 5
                    },
                    {
                      "name": "X6",
                      "fields": [
                        {
                          "type": 39,
                          "typeName": "Junction"
                        },
                        {
                          "type": 39,
                          "typeName": "Junction"
                        },
                        {
                          "type": 39,
                          "typeName": "Junction"
                        },
                        {
                          "type": 39,
                          "typeName": "Junction"
                        },
                        {
                          "type": 39,
                          "typeName": "Junction"
                        },
                        {
                          "type": 39,
                          "typeName": "Junction"
                        }
                      ],
                      "index": 6
                    },
                    {
                      "name": "X7",
                      "fields": [
                        {
                          "type": 39,
                          "typeName": "Junction"
                        },
                        {
                          "type": 39,
                          "typeName": "Junction"
                        },
                        {
                          "type": 39,
                          "typeName": "Junction"
                        },
                        {
                          "type": 39,
                          "typeName": "Junction"
                        },
                        {
                          "type": 39,
                          "typeName": "Junction"
                        },
                        {
                          "type": 39,
                          "typeName": "Junction"
                        },
                        {
                          "type": 39,
                          "typeName": "Junction"
                        }
                      ],
                      "index": 7
                    },
                    {
                      "name": "X8",
                      "fields": [
                        {
                          "type": 39,
                          "typeName": "Junction"
                        },
                        {
                          "type": 39,
                          "typeName": "Junction"
                        },
                        {
                          "type": 39,
                          "typeName": "Junction"
                        },
                        {
                          "type": 39,
                          "typeName": "Junction"
                        },
                        {
                          "type": 39,
                          "typeName": "Junction"
                        },
                        {
                          "type": 39,
                          "typeName": "Junction"
                        },
                        {
                          "type": 39,
                          "typeName": "Junction"
                        },
                        {
                          "type": 39,
                          "typeName": "Junction"
                        }
                      ],
                      "index": 8
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 39,
            "type": {
              "path": [
                "xcm",
                "v3",
                "junction",
                "Junction"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Parachain",
                      "fields": [
                        {
                          "type": 40,
                          "typeName": "u32"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "AccountId32",
                      "fields": [
                        {
                          "name": "network",
                          "type": 41,
                          "typeName": "Option<NetworkId>"
                        },
                        {
                          "name": "id",
                          "type": 1,
                          "typeName": "[u8; 32]"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "AccountIndex64",
                      "fields": [
                        {
                          "name": "network",
                          "type": 41,
                          "typeName": "Option<NetworkId>"
                        },
                        {
                          "name": "index",
                          "type": 11,
                          "typeName": "u64"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "AccountKey20",
                      "fields": [
                        {
                          "name": "network",
                          "type": 41,
                          "typeName": "Option<NetworkId>"
                        },
                        {
                          "name": "key",
                          "type": 43,
                          "typeName": "[u8; 20]"
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "PalletInstance",
                      "fields": [
                        {
                          "type": 2,
                          "typeName": "u8"
                        }
                      ],
                      "index": 4
                    },
                    {
                      "name": "GeneralIndex",
                      "fields": [
                        {
                          "type": 44,
                          "typeName": "u128"
                        }
                      ],
                      "index": 5
                    },
                    {
                      "name": "GeneralKey",
                      "fields": [
                        {
                          "name": "length",
                          "type": 2,
                          "typeName": "u8"
                        },
                        {
                          "name": "data",
                          "type": 1,
                          "typeName": "[u8; 32]"
                        }
                      ],
                      "index": 6
                    },
                    {
                      "name": "OnlyChild",
                      "index": 7
                    },
                    {
                      "name": "Plurality",
                      "fields": [
                        {
                          "name": "id",
                          "type": 45,
                          "typeName": "BodyId"
                        },
                        {
                          "name": "part",
                          "type": 46,
                          "typeName": "BodyPart"
                        }
                      ],
                      "index": 8
                    },
                    {
                      "name": "GlobalConsensus",
                      "fields": [
                        {
                          "type": 42,
                          "typeName": "NetworkId"
                        }
                      ],
                      "index": 9
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 40,
            "type": {
              "def": {
                "compact": {
                  "type": 4
                }
              }
            }
          },
          {
            "id": 41,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 42
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 42
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 42,
            "type": {
              "path": [
                "xcm",
                "v3",
                "junction",
                "NetworkId"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "ByGenesis",
                      "fields": [
                        {
                          "type": 1,
                          "typeName": "[u8; 32]"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "ByFork",
                      "fields": [
                        {
                          "name": "block_number",
                          "type": 12,
                          "typeName": "u64"
                        },
                        {
                          "name": "block_hash",
                          "type": 1,
                          "typeName": "[u8; 32]"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "Polkadot",
                      "index": 2
                    },
                    {
                      "name": "Kusama",
                      "index": 3
                    },
                    {
                      "name": "Westend",
                      "index": 4
                    },
                    {
                      "name": "Rococo",
                      "index": 5
                    },
                    {
                      "name": "Wococo",
                      "index": 6
                    },
                    {
                      "name": "Ethereum",
                      "fields": [
                        {
                          "name": "chain_id",
                          "type": 11,
                          "typeName": "u64"
                        }
                      ],
                      "index": 7
                    },
                    {
                      "name": "BitcoinCore",
                      "index": 8
                    },
                    {
                      "name": "BitcoinCash",
                      "index": 9
                    },
                    {
                      "name": "PolkadotBulletin",
                      "index": 10
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 43,
            "type": {
              "def": {
                "array": {
                  "len": 20,
                  "type": 2
                }
              }
            }
          },
          {
            "id": 44,
            "type": {
              "def": {
                "compact": {
                  "type": 6
                }
              }
            }
          },
          {
            "id": 45,
            "type": {
              "path": [
                "xcm",
                "v3",
                "junction",
                "BodyId"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Unit",
                      "index": 0
                    },
                    {
                      "name": "Moniker",
                      "fields": [
                        {
                          "type": 18,
                          "typeName": "[u8; 4]"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "Index",
                      "fields": [
                        {
                          "type": 40,
                          "typeName": "u32"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "Executive",
                      "index": 3
                    },
                    {
                      "name": "Technical",
                      "index": 4
                    },
                    {
                      "name": "Legislative",
                      "index": 5
                    },
                    {
                      "name": "Judicial",
                      "index": 6
                    },
                    {
                      "name": "Defense",
                      "index": 7
                    },
                    {
                      "name": "Administration",
                      "index": 8
                    },
                    {
                      "name": "Treasury",
                      "index": 9
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 46,
            "type": {
              "path": [
                "xcm",
                "v3",
                "junction",
                "BodyPart"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Voice",
                      "index": 0
                    },
                    {
                      "name": "Members",
                      "fields": [
                        {
                          "name": "count",
                          "type": 40,
                          "typeName": "u32"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "Fraction",
                      "fields": [
                        {
                          "name": "nom",
                          "type": 40,
                          "typeName": "u32"
                        },
                        {
                          "name": "denom",
                          "type": 40,
                          "typeName": "u32"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "AtLeastProportion",
                      "fields": [
                        {
                          "name": "nom",
                          "type": 40,
                          "typeName": "u32"
                        },
                        {
                          "name": "denom",
                          "type": 40,
                          "typeName": "u32"
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "MoreThanProportion",
                      "fields": [
                        {
                          "name": "nom",
                          "type": 40,
                          "typeName": "u32"
                        },
                        {
                          "name": "denom",
                          "type": 40,
                          "typeName": "u32"
                        }
                      ],
                      "index": 4
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 47,
            "type": {
              "path": [
                "pallet_collator_selection",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "NewInvulnerables",
                      "fields": [
                        {
                          "name": "invulnerables",
                          "type": 48,
                          "typeName": "Vec<T::AccountId>"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "New Invulnerables were set."
                      ]
                    },
                    {
                      "name": "InvulnerableAdded",
                      "fields": [
                        {
                          "name": "account_id",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "A new Invulnerable was added."
                      ]
                    },
                    {
                      "name": "InvulnerableRemoved",
                      "fields": [
                        {
                          "name": "account_id",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "An Invulnerable was removed."
                      ]
                    },
                    {
                      "name": "NewDesiredCandidates",
                      "fields": [
                        {
                          "name": "desired_candidates",
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "The number of desired candidates was set."
                      ]
                    },
                    {
                      "name": "NewCandidacyBond",
                      "fields": [
                        {
                          "name": "bond_amount",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "The candidacy bond was set."
                      ]
                    },
                    {
                      "name": "CandidateAdded",
                      "fields": [
                        {
                          "name": "account_id",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "deposit",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "A new candidate joined."
                      ]
                    },
                    {
                      "name": "CandidateBondUpdated",
                      "fields": [
                        {
                          "name": "account_id",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "deposit",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "Bond of a candidate updated."
                      ]
                    },
                    {
                      "name": "CandidateRemoved",
                      "fields": [
                        {
                          "name": "account_id",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "A candidate was removed."
                      ]
                    },
                    {
                      "name": "CandidateReplaced",
                      "fields": [
                        {
                          "name": "old",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "new",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "deposit",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 8,
                      "docs": [
                        "An account was replaced in the candidate list by another one."
                      ]
                    },
                    {
                      "name": "InvalidInvulnerableSkipped",
                      "fields": [
                        {
                          "name": "account_id",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 9,
                      "docs": [
                        "An account was unable to be added to the Invulnerables because they did not have keys",
                        "registered. Other Invulnerables may have been set."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "The `Event` enum of this pallet"
              ]
            }
          },
          {
            "id": 48,
            "type": {
              "def": {
                "sequence": {
                  "type": 0
                }
              }
            }
          },
          {
            "id": 49,
            "type": {
              "path": [
                "pallet_session",
                "pallet",
                "Event"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "NewSession",
                      "fields": [
                        {
                          "name": "session_index",
                          "type": 4,
                          "typeName": "SessionIndex"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "New session has happened. Note that the argument is the session index, not the",
                        "block number as the type might suggest."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "The `Event` enum of this pallet"
              ]
            }
          },
          {
            "id": 50,
            "type": {
              "path": [
                "cumulus_pallet_xcmp_queue",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "XcmpMessageSent",
                      "fields": [
                        {
                          "name": "message_hash",
                          "type": 1,
                          "typeName": "XcmHash"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "An HRMP message was sent to a sibling parachain."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "The `Event` enum of this pallet"
              ]
            }
          },
          {
            "id": 51,
            "type": {
              "path": [
                "pallet_xcm",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Attempted",
                      "fields": [
                        {
                          "name": "outcome",
                          "type": 52,
                          "typeName": "xcm::latest::Outcome"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Execution of an XCM message was attempted."
                      ]
                    },
                    {
                      "name": "Sent",
                      "fields": [
                        {
                          "name": "origin",
                          "type": 54,
                          "typeName": "Location"
                        },
                        {
                          "name": "destination",
                          "type": 54,
                          "typeName": "Location"
                        },
                        {
                          "name": "message",
                          "type": 67,
                          "typeName": "Xcm<()>"
                        },
                        {
                          "name": "message_id",
                          "type": 1,
                          "typeName": "XcmHash"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "A XCM message was sent."
                      ]
                    },
                    {
                      "name": "UnexpectedResponse",
                      "fields": [
                        {
                          "name": "origin",
                          "type": 54,
                          "typeName": "Location"
                        },
                        {
                          "name": "query_id",
                          "type": 12,
                          "typeName": "QueryId"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Query response received which does not match a registered query. This may be because a",
                        "matching query was never registered, it may be because it is a duplicate response, or",
                        "because the query timed out."
                      ]
                    },
                    {
                      "name": "ResponseReady",
                      "fields": [
                        {
                          "name": "query_id",
                          "type": 12,
                          "typeName": "QueryId"
                        },
                        {
                          "name": "response",
                          "type": 78,
                          "typeName": "Response"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Query response has been received and is ready for taking with `take_response`. There is",
                        "no registered notification call."
                      ]
                    },
                    {
                      "name": "Notified",
                      "fields": [
                        {
                          "name": "query_id",
                          "type": 12,
                          "typeName": "QueryId"
                        },
                        {
                          "name": "pallet_index",
                          "type": 2,
                          "typeName": "u8"
                        },
                        {
                          "name": "call_index",
                          "type": 2,
                          "typeName": "u8"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Query response has been received and query is removed. The registered notification has",
                        "been dispatched and executed successfully."
                      ]
                    },
                    {
                      "name": "NotifyOverweight",
                      "fields": [
                        {
                          "name": "query_id",
                          "type": 12,
                          "typeName": "QueryId"
                        },
                        {
                          "name": "pallet_index",
                          "type": 2,
                          "typeName": "u8"
                        },
                        {
                          "name": "call_index",
                          "type": 2,
                          "typeName": "u8"
                        },
                        {
                          "name": "actual_weight",
                          "type": 10,
                          "typeName": "Weight"
                        },
                        {
                          "name": "max_budgeted_weight",
                          "type": 10,
                          "typeName": "Weight"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Query response has been received and query is removed. The registered notification",
                        "could not be dispatched because the dispatch weight is greater than the maximum weight",
                        "originally budgeted by this runtime for the query result."
                      ]
                    },
                    {
                      "name": "NotifyDispatchError",
                      "fields": [
                        {
                          "name": "query_id",
                          "type": 12,
                          "typeName": "QueryId"
                        },
                        {
                          "name": "pallet_index",
                          "type": 2,
                          "typeName": "u8"
                        },
                        {
                          "name": "call_index",
                          "type": 2,
                          "typeName": "u8"
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "Query response has been received and query is removed. There was a general error with",
                        "dispatching the notification call."
                      ]
                    },
                    {
                      "name": "NotifyDecodeFailed",
                      "fields": [
                        {
                          "name": "query_id",
                          "type": 12,
                          "typeName": "QueryId"
                        },
                        {
                          "name": "pallet_index",
                          "type": 2,
                          "typeName": "u8"
                        },
                        {
                          "name": "call_index",
                          "type": 2,
                          "typeName": "u8"
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "Query response has been received and query is removed. The dispatch was unable to be",
                        "decoded into a `Call`; this might be due to dispatch function having a signature which",
                        "is not `(origin, QueryId, Response)`."
                      ]
                    },
                    {
                      "name": "InvalidResponder",
                      "fields": [
                        {
                          "name": "origin",
                          "type": 54,
                          "typeName": "Location"
                        },
                        {
                          "name": "query_id",
                          "type": 12,
                          "typeName": "QueryId"
                        },
                        {
                          "name": "expected_location",
                          "type": 87,
                          "typeName": "Option<Location>"
                        }
                      ],
                      "index": 8,
                      "docs": [
                        "Expected query response has been received but the origin location of the response does",
                        "not match that expected. The query remains registered for a later, valid, response to",
                        "be received and acted upon."
                      ]
                    },
                    {
                      "name": "InvalidResponderVersion",
                      "fields": [
                        {
                          "name": "origin",
                          "type": 54,
                          "typeName": "Location"
                        },
                        {
                          "name": "query_id",
                          "type": 12,
                          "typeName": "QueryId"
                        }
                      ],
                      "index": 9,
                      "docs": [
                        "Expected query response has been received but the expected origin location placed in",
                        "storage by this runtime previously cannot be decoded. The query remains registered.",
                        "",
                        "This is unexpected (since a location placed in storage in a previously executing",
                        "runtime should be readable prior to query timeout) and dangerous since the possibly",
                        "valid response will be dropped. Manual governance intervention is probably going to be",
                        "needed."
                      ]
                    },
                    {
                      "name": "ResponseTaken",
                      "fields": [
                        {
                          "name": "query_id",
                          "type": 12,
                          "typeName": "QueryId"
                        }
                      ],
                      "index": 10,
                      "docs": [
                        "Received query response has been read and removed."
                      ]
                    },
                    {
                      "name": "AssetsTrapped",
                      "fields": [
                        {
                          "name": "hash",
                          "type": 13,
                          "typeName": "H256"
                        },
                        {
                          "name": "origin",
                          "type": 54,
                          "typeName": "Location"
                        },
                        {
                          "name": "assets",
                          "type": 95,
                          "typeName": "VersionedAssets"
                        }
                      ],
                      "index": 11,
                      "docs": [
                        "Some assets have been placed in an asset trap."
                      ]
                    },
                    {
                      "name": "VersionChangeNotified",
                      "fields": [
                        {
                          "name": "destination",
                          "type": 54,
                          "typeName": "Location"
                        },
                        {
                          "name": "result",
                          "type": 4,
                          "typeName": "XcmVersion"
                        },
                        {
                          "name": "cost",
                          "type": 70,
                          "typeName": "Assets"
                        },
                        {
                          "name": "message_id",
                          "type": 1,
                          "typeName": "XcmHash"
                        }
                      ],
                      "index": 12,
                      "docs": [
                        "An XCM version change notification message has been attempted to be sent.",
                        "",
                        "The cost of sending it (borne by the chain) is included."
                      ]
                    },
                    {
                      "name": "SupportedVersionChanged",
                      "fields": [
                        {
                          "name": "location",
                          "type": 54,
                          "typeName": "Location"
                        },
                        {
                          "name": "version",
                          "type": 4,
                          "typeName": "XcmVersion"
                        }
                      ],
                      "index": 13,
                      "docs": [
                        "The supported version of a location has been changed. This might be through an",
                        "automatic notification or a manual intervention."
                      ]
                    },
                    {
                      "name": "NotifyTargetSendFail",
                      "fields": [
                        {
                          "name": "location",
                          "type": 54,
                          "typeName": "Location"
                        },
                        {
                          "name": "query_id",
                          "type": 12,
                          "typeName": "QueryId"
                        },
                        {
                          "name": "error",
                          "type": 53,
                          "typeName": "XcmError"
                        }
                      ],
                      "index": 14,
                      "docs": [
                        "A given location which had a version change subscription was dropped owing to an error",
                        "sending the notification to it."
                      ]
                    },
                    {
                      "name": "NotifyTargetMigrationFail",
                      "fields": [
                        {
                          "name": "location",
                          "type": 115,
                          "typeName": "VersionedLocation"
                        },
                        {
                          "name": "query_id",
                          "type": 12,
                          "typeName": "QueryId"
                        }
                      ],
                      "index": 15,
                      "docs": [
                        "A given location which had a version change subscription was dropped owing to an error",
                        "migrating the location to our new XCM format."
                      ]
                    },
                    {
                      "name": "InvalidQuerierVersion",
                      "fields": [
                        {
                          "name": "origin",
                          "type": 54,
                          "typeName": "Location"
                        },
                        {
                          "name": "query_id",
                          "type": 12,
                          "typeName": "QueryId"
                        }
                      ],
                      "index": 16,
                      "docs": [
                        "Expected query response has been received but the expected querier location placed in",
                        "storage by this runtime previously cannot be decoded. The query remains registered.",
                        "",
                        "This is unexpected (since a location placed in storage in a previously executing",
                        "runtime should be readable prior to query timeout) and dangerous since the possibly",
                        "valid response will be dropped. Manual governance intervention is probably going to be",
                        "needed."
                      ]
                    },
                    {
                      "name": "InvalidQuerier",
                      "fields": [
                        {
                          "name": "origin",
                          "type": 54,
                          "typeName": "Location"
                        },
                        {
                          "name": "query_id",
                          "type": 12,
                          "typeName": "QueryId"
                        },
                        {
                          "name": "expected_querier",
                          "type": 54,
                          "typeName": "Location"
                        },
                        {
                          "name": "maybe_actual_querier",
                          "type": 87,
                          "typeName": "Option<Location>"
                        }
                      ],
                      "index": 17,
                      "docs": [
                        "Expected query response has been received but the querier location of the response does",
                        "not match the expected. The query remains registered for a later, valid, response to",
                        "be received and acted upon."
                      ]
                    },
                    {
                      "name": "VersionNotifyStarted",
                      "fields": [
                        {
                          "name": "destination",
                          "type": 54,
                          "typeName": "Location"
                        },
                        {
                          "name": "cost",
                          "type": 70,
                          "typeName": "Assets"
                        },
                        {
                          "name": "message_id",
                          "type": 1,
                          "typeName": "XcmHash"
                        }
                      ],
                      "index": 18,
                      "docs": [
                        "A remote has requested XCM version change notification from us and we have honored it.",
                        "A version information message is sent to them and its cost is included."
                      ]
                    },
                    {
                      "name": "VersionNotifyRequested",
                      "fields": [
                        {
                          "name": "destination",
                          "type": 54,
                          "typeName": "Location"
                        },
                        {
                          "name": "cost",
                          "type": 70,
                          "typeName": "Assets"
                        },
                        {
                          "name": "message_id",
                          "type": 1,
                          "typeName": "XcmHash"
                        }
                      ],
                      "index": 19,
                      "docs": [
                        "We have requested that a remote chain send us XCM version change notifications."
                      ]
                    },
                    {
                      "name": "VersionNotifyUnrequested",
                      "fields": [
                        {
                          "name": "destination",
                          "type": 54,
                          "typeName": "Location"
                        },
                        {
                          "name": "cost",
                          "type": 70,
                          "typeName": "Assets"
                        },
                        {
                          "name": "message_id",
                          "type": 1,
                          "typeName": "XcmHash"
                        }
                      ],
                      "index": 20,
                      "docs": [
                        "We have requested that a remote chain stops sending us XCM version change",
                        "notifications."
                      ]
                    },
                    {
                      "name": "FeesPaid",
                      "fields": [
                        {
                          "name": "paying",
                          "type": 54,
                          "typeName": "Location"
                        },
                        {
                          "name": "fees",
                          "type": 70,
                          "typeName": "Assets"
                        }
                      ],
                      "index": 21,
                      "docs": [
                        "Fees were paid from a location for an operation (often for using `SendXcm`)."
                      ]
                    },
                    {
                      "name": "AssetsClaimed",
                      "fields": [
                        {
                          "name": "hash",
                          "type": 13,
                          "typeName": "H256"
                        },
                        {
                          "name": "origin",
                          "type": 54,
                          "typeName": "Location"
                        },
                        {
                          "name": "assets",
                          "type": 95,
                          "typeName": "VersionedAssets"
                        }
                      ],
                      "index": 22,
                      "docs": [
                        "Some assets have been claimed from an asset trap"
                      ]
                    },
                    {
                      "name": "VersionMigrationFinished",
                      "fields": [
                        {
                          "name": "version",
                          "type": 4,
                          "typeName": "XcmVersion"
                        }
                      ],
                      "index": 23,
                      "docs": [
                        "A XCM version migration finished."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "The `Event` enum of this pallet"
              ]
            }
          },
          {
            "id": 52,
            "type": {
              "path": [
                "staging_xcm",
                "v4",
                "traits",
                "Outcome"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Complete",
                      "fields": [
                        {
                          "name": "used",
                          "type": 10,
                          "typeName": "Weight"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Incomplete",
                      "fields": [
                        {
                          "name": "used",
                          "type": 10,
                          "typeName": "Weight"
                        },
                        {
                          "name": "error",
                          "type": 53,
                          "typeName": "Error"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "Error",
                      "fields": [
                        {
                          "name": "error",
                          "type": 53,
                          "typeName": "Error"
                        }
                      ],
                      "index": 2
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 53,
            "type": {
              "path": [
                "xcm",
                "v3",
                "traits",
                "Error"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Overflow",
                      "index": 0
                    },
                    {
                      "name": "Unimplemented",
                      "index": 1
                    },
                    {
                      "name": "UntrustedReserveLocation",
                      "index": 2
                    },
                    {
                      "name": "UntrustedTeleportLocation",
                      "index": 3
                    },
                    {
                      "name": "LocationFull",
                      "index": 4
                    },
                    {
                      "name": "LocationNotInvertible",
                      "index": 5
                    },
                    {
                      "name": "BadOrigin",
                      "index": 6
                    },
                    {
                      "name": "InvalidLocation",
                      "index": 7
                    },
                    {
                      "name": "AssetNotFound",
                      "index": 8
                    },
                    {
                      "name": "FailedToTransactAsset",
                      "index": 9
                    },
                    {
                      "name": "NotWithdrawable",
                      "index": 10
                    },
                    {
                      "name": "LocationCannotHold",
                      "index": 11
                    },
                    {
                      "name": "ExceedsMaxMessageSize",
                      "index": 12
                    },
                    {
                      "name": "DestinationUnsupported",
                      "index": 13
                    },
                    {
                      "name": "Transport",
                      "index": 14
                    },
                    {
                      "name": "Unroutable",
                      "index": 15
                    },
                    {
                      "name": "UnknownClaim",
                      "index": 16
                    },
                    {
                      "name": "FailedToDecode",
                      "index": 17
                    },
                    {
                      "name": "MaxWeightInvalid",
                      "index": 18
                    },
                    {
                      "name": "NotHoldingFees",
                      "index": 19
                    },
                    {
                      "name": "TooExpensive",
                      "index": 20
                    },
                    {
                      "name": "Trap",
                      "fields": [
                        {
                          "type": 12,
                          "typeName": "u64"
                        }
                      ],
                      "index": 21
                    },
                    {
                      "name": "ExpectationFalse",
                      "index": 22
                    },
                    {
                      "name": "PalletNotFound",
                      "index": 23
                    },
                    {
                      "name": "NameMismatch",
                      "index": 24
                    },
                    {
                      "name": "VersionIncompatible",
                      "index": 25
                    },
                    {
                      "name": "HoldingWouldOverflow",
                      "index": 26
                    },
                    {
                      "name": "ExportError",
                      "index": 27
                    },
                    {
                      "name": "ReanchorFailed",
                      "index": 28
                    },
                    {
                      "name": "NoDeal",
                      "index": 29
                    },
                    {
                      "name": "FeesNotMet",
                      "index": 30
                    },
                    {
                      "name": "LockError",
                      "index": 31
                    },
                    {
                      "name": "NoPermission",
                      "index": 32
                    },
                    {
                      "name": "Unanchored",
                      "index": 33
                    },
                    {
                      "name": "NotDepositable",
                      "index": 34
                    },
                    {
                      "name": "UnhandledXcmVersion",
                      "index": 35
                    },
                    {
                      "name": "WeightLimitReached",
                      "fields": [
                        {
                          "type": 10,
                          "typeName": "Weight"
                        }
                      ],
                      "index": 36
                    },
                    {
                      "name": "Barrier",
                      "index": 37
                    },
                    {
                      "name": "WeightNotComputable",
                      "index": 38
                    },
                    {
                      "name": "ExceedsStackLimit",
                      "index": 39
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 54,
            "type": {
              "path": [
                "staging_xcm",
                "v4",
                "location",
                "Location"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "parents",
                      "type": 2,
                      "typeName": "u8"
                    },
                    {
                      "name": "interior",
                      "type": 55,
                      "typeName": "Junctions"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 55,
            "type": {
              "path": [
                "staging_xcm",
                "v4",
                "junctions",
                "Junctions"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Here",
                      "index": 0
                    },
                    {
                      "name": "X1",
                      "fields": [
                        {
                          "type": 56,
                          "typeName": "Arc<[Junction; 1]>"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "X2",
                      "fields": [
                        {
                          "type": 60,
                          "typeName": "Arc<[Junction; 2]>"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "X3",
                      "fields": [
                        {
                          "type": 61,
                          "typeName": "Arc<[Junction; 3]>"
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "X4",
                      "fields": [
                        {
                          "type": 62,
                          "typeName": "Arc<[Junction; 4]>"
                        }
                      ],
                      "index": 4
                    },
                    {
                      "name": "X5",
                      "fields": [
                        {
                          "type": 63,
                          "typeName": "Arc<[Junction; 5]>"
                        }
                      ],
                      "index": 5
                    },
                    {
                      "name": "X6",
                      "fields": [
                        {
                          "type": 64,
                          "typeName": "Arc<[Junction; 6]>"
                        }
                      ],
                      "index": 6
                    },
                    {
                      "name": "X7",
                      "fields": [
                        {
                          "type": 65,
                          "typeName": "Arc<[Junction; 7]>"
                        }
                      ],
                      "index": 7
                    },
                    {
                      "name": "X8",
                      "fields": [
                        {
                          "type": 66,
                          "typeName": "Arc<[Junction; 8]>"
                        }
                      ],
                      "index": 8
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 56,
            "type": {
              "def": {
                "array": {
                  "len": 1,
                  "type": 57
                }
              }
            }
          },
          {
            "id": 57,
            "type": {
              "path": [
                "staging_xcm",
                "v4",
                "junction",
                "Junction"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Parachain",
                      "fields": [
                        {
                          "type": 40,
                          "typeName": "u32"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "AccountId32",
                      "fields": [
                        {
                          "name": "network",
                          "type": 58,
                          "typeName": "Option<NetworkId>"
                        },
                        {
                          "name": "id",
                          "type": 1,
                          "typeName": "[u8; 32]"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "AccountIndex64",
                      "fields": [
                        {
                          "name": "network",
                          "type": 58,
                          "typeName": "Option<NetworkId>"
                        },
                        {
                          "name": "index",
                          "type": 11,
                          "typeName": "u64"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "AccountKey20",
                      "fields": [
                        {
                          "name": "network",
                          "type": 58,
                          "typeName": "Option<NetworkId>"
                        },
                        {
                          "name": "key",
                          "type": 43,
                          "typeName": "[u8; 20]"
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "PalletInstance",
                      "fields": [
                        {
                          "type": 2,
                          "typeName": "u8"
                        }
                      ],
                      "index": 4
                    },
                    {
                      "name": "GeneralIndex",
                      "fields": [
                        {
                          "type": 44,
                          "typeName": "u128"
                        }
                      ],
                      "index": 5
                    },
                    {
                      "name": "GeneralKey",
                      "fields": [
                        {
                          "name": "length",
                          "type": 2,
                          "typeName": "u8"
                        },
                        {
                          "name": "data",
                          "type": 1,
                          "typeName": "[u8; 32]"
                        }
                      ],
                      "index": 6
                    },
                    {
                      "name": "OnlyChild",
                      "index": 7
                    },
                    {
                      "name": "Plurality",
                      "fields": [
                        {
                          "name": "id",
                          "type": 45,
                          "typeName": "BodyId"
                        },
                        {
                          "name": "part",
                          "type": 46,
                          "typeName": "BodyPart"
                        }
                      ],
                      "index": 8
                    },
                    {
                      "name": "GlobalConsensus",
                      "fields": [
                        {
                          "type": 59,
                          "typeName": "NetworkId"
                        }
                      ],
                      "index": 9
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 58,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 59
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 59
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 59,
            "type": {
              "path": [
                "staging_xcm",
                "v4",
                "junction",
                "NetworkId"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "ByGenesis",
                      "fields": [
                        {
                          "type": 1,
                          "typeName": "[u8; 32]"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "ByFork",
                      "fields": [
                        {
                          "name": "block_number",
                          "type": 12,
                          "typeName": "u64"
                        },
                        {
                          "name": "block_hash",
                          "type": 1,
                          "typeName": "[u8; 32]"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "Polkadot",
                      "index": 2
                    },
                    {
                      "name": "Kusama",
                      "index": 3
                    },
                    {
                      "name": "Westend",
                      "index": 4
                    },
                    {
                      "name": "Rococo",
                      "index": 5
                    },
                    {
                      "name": "Wococo",
                      "index": 6
                    },
                    {
                      "name": "Ethereum",
                      "fields": [
                        {
                          "name": "chain_id",
                          "type": 11,
                          "typeName": "u64"
                        }
                      ],
                      "index": 7
                    },
                    {
                      "name": "BitcoinCore",
                      "index": 8
                    },
                    {
                      "name": "BitcoinCash",
                      "index": 9
                    },
                    {
                      "name": "PolkadotBulletin",
                      "index": 10
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 60,
            "type": {
              "def": {
                "array": {
                  "len": 2,
                  "type": 57
                }
              }
            }
          },
          {
            "id": 61,
            "type": {
              "def": {
                "array": {
                  "len": 3,
                  "type": 57
                }
              }
            }
          },
          {
            "id": 62,
            "type": {
              "def": {
                "array": {
                  "len": 4,
                  "type": 57
                }
              }
            }
          },
          {
            "id": 63,
            "type": {
              "def": {
                "array": {
                  "len": 5,
                  "type": 57
                }
              }
            }
          },
          {
            "id": 64,
            "type": {
              "def": {
                "array": {
                  "len": 6,
                  "type": 57
                }
              }
            }
          },
          {
            "id": 65,
            "type": {
              "def": {
                "array": {
                  "len": 7,
                  "type": 57
                }
              }
            }
          },
          {
            "id": 66,
            "type": {
              "def": {
                "array": {
                  "len": 8,
                  "type": 57
                }
              }
            }
          },
          {
            "id": 67,
            "type": {
              "path": [
                "staging_xcm",
                "v4",
                "Xcm"
              ],
              "params": [
                {
                  "name": "Call",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 68,
                      "typeName": "Vec<Instruction<Call>>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 68,
            "type": {
              "def": {
                "sequence": {
                  "type": 69
                }
              }
            }
          },
          {
            "id": 69,
            "type": {
              "path": [
                "staging_xcm",
                "v4",
                "Instruction"
              ],
              "params": [
                {
                  "name": "Call",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "WithdrawAsset",
                      "fields": [
                        {
                          "type": 70,
                          "typeName": "Assets"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "ReserveAssetDeposited",
                      "fields": [
                        {
                          "type": 70,
                          "typeName": "Assets"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "ReceiveTeleportedAsset",
                      "fields": [
                        {
                          "type": 70,
                          "typeName": "Assets"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "QueryResponse",
                      "fields": [
                        {
                          "name": "query_id",
                          "type": 11,
                          "typeName": "QueryId"
                        },
                        {
                          "name": "response",
                          "type": 78,
                          "typeName": "Response"
                        },
                        {
                          "name": "max_weight",
                          "type": 10,
                          "typeName": "Weight"
                        },
                        {
                          "name": "querier",
                          "type": 87,
                          "typeName": "Option<Location>"
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "TransferAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 70,
                          "typeName": "Assets"
                        },
                        {
                          "name": "beneficiary",
                          "type": 54,
                          "typeName": "Location"
                        }
                      ],
                      "index": 4
                    },
                    {
                      "name": "TransferReserveAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 70,
                          "typeName": "Assets"
                        },
                        {
                          "name": "dest",
                          "type": 54,
                          "typeName": "Location"
                        },
                        {
                          "name": "xcm",
                          "type": 67,
                          "typeName": "Xcm<()>"
                        }
                      ],
                      "index": 5
                    },
                    {
                      "name": "Transact",
                      "fields": [
                        {
                          "name": "origin_kind",
                          "type": 88,
                          "typeName": "OriginKind"
                        },
                        {
                          "name": "require_weight_at_most",
                          "type": 10,
                          "typeName": "Weight"
                        },
                        {
                          "name": "call",
                          "type": 89,
                          "typeName": "DoubleEncoded<Call>"
                        }
                      ],
                      "index": 6
                    },
                    {
                      "name": "HrmpNewChannelOpenRequest",
                      "fields": [
                        {
                          "name": "sender",
                          "type": 40,
                          "typeName": "u32"
                        },
                        {
                          "name": "max_message_size",
                          "type": 40,
                          "typeName": "u32"
                        },
                        {
                          "name": "max_capacity",
                          "type": 40,
                          "typeName": "u32"
                        }
                      ],
                      "index": 7
                    },
                    {
                      "name": "HrmpChannelAccepted",
                      "fields": [
                        {
                          "name": "recipient",
                          "type": 40,
                          "typeName": "u32"
                        }
                      ],
                      "index": 8
                    },
                    {
                      "name": "HrmpChannelClosing",
                      "fields": [
                        {
                          "name": "initiator",
                          "type": 40,
                          "typeName": "u32"
                        },
                        {
                          "name": "sender",
                          "type": 40,
                          "typeName": "u32"
                        },
                        {
                          "name": "recipient",
                          "type": 40,
                          "typeName": "u32"
                        }
                      ],
                      "index": 9
                    },
                    {
                      "name": "ClearOrigin",
                      "index": 10
                    },
                    {
                      "name": "DescendOrigin",
                      "fields": [
                        {
                          "type": 55,
                          "typeName": "InteriorLocation"
                        }
                      ],
                      "index": 11
                    },
                    {
                      "name": "ReportError",
                      "fields": [
                        {
                          "type": 90,
                          "typeName": "QueryResponseInfo"
                        }
                      ],
                      "index": 12
                    },
                    {
                      "name": "DepositAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 91,
                          "typeName": "AssetFilter"
                        },
                        {
                          "name": "beneficiary",
                          "type": 54,
                          "typeName": "Location"
                        }
                      ],
                      "index": 13
                    },
                    {
                      "name": "DepositReserveAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 91,
                          "typeName": "AssetFilter"
                        },
                        {
                          "name": "dest",
                          "type": 54,
                          "typeName": "Location"
                        },
                        {
                          "name": "xcm",
                          "type": 67,
                          "typeName": "Xcm<()>"
                        }
                      ],
                      "index": 14
                    },
                    {
                      "name": "ExchangeAsset",
                      "fields": [
                        {
                          "name": "give",
                          "type": 91,
                          "typeName": "AssetFilter"
                        },
                        {
                          "name": "want",
                          "type": 70,
                          "typeName": "Assets"
                        },
                        {
                          "name": "maximal",
                          "type": 8,
                          "typeName": "bool"
                        }
                      ],
                      "index": 15
                    },
                    {
                      "name": "InitiateReserveWithdraw",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 91,
                          "typeName": "AssetFilter"
                        },
                        {
                          "name": "reserve",
                          "type": 54,
                          "typeName": "Location"
                        },
                        {
                          "name": "xcm",
                          "type": 67,
                          "typeName": "Xcm<()>"
                        }
                      ],
                      "index": 16
                    },
                    {
                      "name": "InitiateTeleport",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 91,
                          "typeName": "AssetFilter"
                        },
                        {
                          "name": "dest",
                          "type": 54,
                          "typeName": "Location"
                        },
                        {
                          "name": "xcm",
                          "type": 67,
                          "typeName": "Xcm<()>"
                        }
                      ],
                      "index": 17
                    },
                    {
                      "name": "ReportHolding",
                      "fields": [
                        {
                          "name": "response_info",
                          "type": 90,
                          "typeName": "QueryResponseInfo"
                        },
                        {
                          "name": "assets",
                          "type": 91,
                          "typeName": "AssetFilter"
                        }
                      ],
                      "index": 18
                    },
                    {
                      "name": "BuyExecution",
                      "fields": [
                        {
                          "name": "fees",
                          "type": 72,
                          "typeName": "Asset"
                        },
                        {
                          "name": "weight_limit",
                          "type": 94,
                          "typeName": "WeightLimit"
                        }
                      ],
                      "index": 19
                    },
                    {
                      "name": "RefundSurplus",
                      "index": 20
                    },
                    {
                      "name": "SetErrorHandler",
                      "fields": [
                        {
                          "type": 67,
                          "typeName": "Xcm<Call>"
                        }
                      ],
                      "index": 21
                    },
                    {
                      "name": "SetAppendix",
                      "fields": [
                        {
                          "type": 67,
                          "typeName": "Xcm<Call>"
                        }
                      ],
                      "index": 22
                    },
                    {
                      "name": "ClearError",
                      "index": 23
                    },
                    {
                      "name": "ClaimAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 70,
                          "typeName": "Assets"
                        },
                        {
                          "name": "ticket",
                          "type": 54,
                          "typeName": "Location"
                        }
                      ],
                      "index": 24
                    },
                    {
                      "name": "Trap",
                      "fields": [
                        {
                          "type": 11,
                          "typeName": "u64"
                        }
                      ],
                      "index": 25
                    },
                    {
                      "name": "SubscribeVersion",
                      "fields": [
                        {
                          "name": "query_id",
                          "type": 11,
                          "typeName": "QueryId"
                        },
                        {
                          "name": "max_response_weight",
                          "type": 10,
                          "typeName": "Weight"
                        }
                      ],
                      "index": 26
                    },
                    {
                      "name": "UnsubscribeVersion",
                      "index": 27
                    },
                    {
                      "name": "BurnAsset",
                      "fields": [
                        {
                          "type": 70,
                          "typeName": "Assets"
                        }
                      ],
                      "index": 28
                    },
                    {
                      "name": "ExpectAsset",
                      "fields": [
                        {
                          "type": 70,
                          "typeName": "Assets"
                        }
                      ],
                      "index": 29
                    },
                    {
                      "name": "ExpectOrigin",
                      "fields": [
                        {
                          "type": 87,
                          "typeName": "Option<Location>"
                        }
                      ],
                      "index": 30
                    },
                    {
                      "name": "ExpectError",
                      "fields": [
                        {
                          "type": 79,
                          "typeName": "Option<(u32, Error)>"
                        }
                      ],
                      "index": 31
                    },
                    {
                      "name": "ExpectTransactStatus",
                      "fields": [
                        {
                          "type": 85,
                          "typeName": "MaybeErrorCode"
                        }
                      ],
                      "index": 32
                    },
                    {
                      "name": "QueryPallet",
                      "fields": [
                        {
                          "name": "module_name",
                          "type": 14,
                          "typeName": "Vec<u8>"
                        },
                        {
                          "name": "response_info",
                          "type": 90,
                          "typeName": "QueryResponseInfo"
                        }
                      ],
                      "index": 33
                    },
                    {
                      "name": "ExpectPallet",
                      "fields": [
                        {
                          "name": "index",
                          "type": 40,
                          "typeName": "u32"
                        },
                        {
                          "name": "name",
                          "type": 14,
                          "typeName": "Vec<u8>"
                        },
                        {
                          "name": "module_name",
                          "type": 14,
                          "typeName": "Vec<u8>"
                        },
                        {
                          "name": "crate_major",
                          "type": 40,
                          "typeName": "u32"
                        },
                        {
                          "name": "min_crate_minor",
                          "type": 40,
                          "typeName": "u32"
                        }
                      ],
                      "index": 34
                    },
                    {
                      "name": "ReportTransactStatus",
                      "fields": [
                        {
                          "type": 90,
                          "typeName": "QueryResponseInfo"
                        }
                      ],
                      "index": 35
                    },
                    {
                      "name": "ClearTransactStatus",
                      "index": 36
                    },
                    {
                      "name": "UniversalOrigin",
                      "fields": [
                        {
                          "type": 57,
                          "typeName": "Junction"
                        }
                      ],
                      "index": 37
                    },
                    {
                      "name": "ExportMessage",
                      "fields": [
                        {
                          "name": "network",
                          "type": 59,
                          "typeName": "NetworkId"
                        },
                        {
                          "name": "destination",
                          "type": 55,
                          "typeName": "InteriorLocation"
                        },
                        {
                          "name": "xcm",
                          "type": 67,
                          "typeName": "Xcm<()>"
                        }
                      ],
                      "index": 38
                    },
                    {
                      "name": "LockAsset",
                      "fields": [
                        {
                          "name": "asset",
                          "type": 72,
                          "typeName": "Asset"
                        },
                        {
                          "name": "unlocker",
                          "type": 54,
                          "typeName": "Location"
                        }
                      ],
                      "index": 39
                    },
                    {
                      "name": "UnlockAsset",
                      "fields": [
                        {
                          "name": "asset",
                          "type": 72,
                          "typeName": "Asset"
                        },
                        {
                          "name": "target",
                          "type": 54,
                          "typeName": "Location"
                        }
                      ],
                      "index": 40
                    },
                    {
                      "name": "NoteUnlockable",
                      "fields": [
                        {
                          "name": "asset",
                          "type": 72,
                          "typeName": "Asset"
                        },
                        {
                          "name": "owner",
                          "type": 54,
                          "typeName": "Location"
                        }
                      ],
                      "index": 41
                    },
                    {
                      "name": "RequestUnlock",
                      "fields": [
                        {
                          "name": "asset",
                          "type": 72,
                          "typeName": "Asset"
                        },
                        {
                          "name": "locker",
                          "type": 54,
                          "typeName": "Location"
                        }
                      ],
                      "index": 42
                    },
                    {
                      "name": "SetFeesMode",
                      "fields": [
                        {
                          "name": "jit_withdraw",
                          "type": 8,
                          "typeName": "bool"
                        }
                      ],
                      "index": 43
                    },
                    {
                      "name": "SetTopic",
                      "fields": [
                        {
                          "type": 1,
                          "typeName": "[u8; 32]"
                        }
                      ],
                      "index": 44
                    },
                    {
                      "name": "ClearTopic",
                      "index": 45
                    },
                    {
                      "name": "AliasOrigin",
                      "fields": [
                        {
                          "type": 54,
                          "typeName": "Location"
                        }
                      ],
                      "index": 46
                    },
                    {
                      "name": "UnpaidExecution",
                      "fields": [
                        {
                          "name": "weight_limit",
                          "type": 94,
                          "typeName": "WeightLimit"
                        },
                        {
                          "name": "check_origin",
                          "type": 87,
                          "typeName": "Option<Location>"
                        }
                      ],
                      "index": 47
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 70,
            "type": {
              "path": [
                "staging_xcm",
                "v4",
                "asset",
                "Assets"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 71,
                      "typeName": "Vec<Asset>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 71,
            "type": {
              "def": {
                "sequence": {
                  "type": 72
                }
              }
            }
          },
          {
            "id": 72,
            "type": {
              "path": [
                "staging_xcm",
                "v4",
                "asset",
                "Asset"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "id",
                      "type": 73,
                      "typeName": "AssetId"
                    },
                    {
                      "name": "fun",
                      "type": 74,
                      "typeName": "Fungibility"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 73,
            "type": {
              "path": [
                "staging_xcm",
                "v4",
                "asset",
                "AssetId"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 54,
                      "typeName": "Location"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 74,
            "type": {
              "path": [
                "staging_xcm",
                "v4",
                "asset",
                "Fungibility"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Fungible",
                      "fields": [
                        {
                          "type": 44,
                          "typeName": "u128"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "NonFungible",
                      "fields": [
                        {
                          "type": 75,
                          "typeName": "AssetInstance"
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 75,
            "type": {
              "path": [
                "staging_xcm",
                "v4",
                "asset",
                "AssetInstance"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Undefined",
                      "index": 0
                    },
                    {
                      "name": "Index",
                      "fields": [
                        {
                          "type": 44,
                          "typeName": "u128"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "Array4",
                      "fields": [
                        {
                          "type": 18,
                          "typeName": "[u8; 4]"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "Array8",
                      "fields": [
                        {
                          "type": 76,
                          "typeName": "[u8; 8]"
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "Array16",
                      "fields": [
                        {
                          "type": 77,
                          "typeName": "[u8; 16]"
                        }
                      ],
                      "index": 4
                    },
                    {
                      "name": "Array32",
                      "fields": [
                        {
                          "type": 1,
                          "typeName": "[u8; 32]"
                        }
                      ],
                      "index": 5
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 76,
            "type": {
              "def": {
                "array": {
                  "len": 8,
                  "type": 2
                }
              }
            }
          },
          {
            "id": 77,
            "type": {
              "def": {
                "array": {
                  "len": 16,
                  "type": 2
                }
              }
            }
          },
          {
            "id": 78,
            "type": {
              "path": [
                "staging_xcm",
                "v4",
                "Response"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Null",
                      "index": 0
                    },
                    {
                      "name": "Assets",
                      "fields": [
                        {
                          "type": 70,
                          "typeName": "Assets"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "ExecutionResult",
                      "fields": [
                        {
                          "type": 79,
                          "typeName": "Option<(u32, Error)>"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "Version",
                      "fields": [
                        {
                          "type": 4,
                          "typeName": "super::Version"
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "PalletsInfo",
                      "fields": [
                        {
                          "type": 81,
                          "typeName": "BoundedVec<PalletInfo, MaxPalletsInfo>"
                        }
                      ],
                      "index": 4
                    },
                    {
                      "name": "DispatchResult",
                      "fields": [
                        {
                          "type": 85,
                          "typeName": "MaybeErrorCode"
                        }
                      ],
                      "index": 5
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 79,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 80
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 80
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 80,
            "type": {
              "def": {
                "tuple": [
                  4,
                  53
                ]
              }
            }
          },
          {
            "id": 81,
            "type": {
              "path": [
                "bounded_collections",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 82
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 84,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 82,
            "type": {
              "path": [
                "staging_xcm",
                "v4",
                "PalletInfo"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "index",
                      "type": 40,
                      "typeName": "u32"
                    },
                    {
                      "name": "name",
                      "type": 83,
                      "typeName": "BoundedVec<u8, MaxPalletNameLen>"
                    },
                    {
                      "name": "module_name",
                      "type": 83,
                      "typeName": "BoundedVec<u8, MaxPalletNameLen>"
                    },
                    {
                      "name": "major",
                      "type": 40,
                      "typeName": "u32"
                    },
                    {
                      "name": "minor",
                      "type": 40,
                      "typeName": "u32"
                    },
                    {
                      "name": "patch",
                      "type": 40,
                      "typeName": "u32"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 83,
            "type": {
              "path": [
                "bounded_collections",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 2
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 14,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 84,
            "type": {
              "def": {
                "sequence": {
                  "type": 82
                }
              }
            }
          },
          {
            "id": 85,
            "type": {
              "path": [
                "xcm",
                "v3",
                "MaybeErrorCode"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Success",
                      "index": 0
                    },
                    {
                      "name": "Error",
                      "fields": [
                        {
                          "type": 86,
                          "typeName": "BoundedVec<u8, MaxDispatchErrorLen>"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "TruncatedError",
                      "fields": [
                        {
                          "type": 86,
                          "typeName": "BoundedVec<u8, MaxDispatchErrorLen>"
                        }
                      ],
                      "index": 2
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 86,
            "type": {
              "path": [
                "bounded_collections",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 2
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 14,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 87,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 54
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 54
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 88,
            "type": {
              "path": [
                "xcm",
                "v3",
                "OriginKind"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Native",
                      "index": 0
                    },
                    {
                      "name": "SovereignAccount",
                      "index": 1
                    },
                    {
                      "name": "Superuser",
                      "index": 2
                    },
                    {
                      "name": "Xcm",
                      "index": 3
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 89,
            "type": {
              "path": [
                "xcm",
                "double_encoded",
                "DoubleEncoded"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "encoded",
                      "type": 14,
                      "typeName": "Vec<u8>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 90,
            "type": {
              "path": [
                "staging_xcm",
                "v4",
                "QueryResponseInfo"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "destination",
                      "type": 54,
                      "typeName": "Location"
                    },
                    {
                      "name": "query_id",
                      "type": 11,
                      "typeName": "QueryId"
                    },
                    {
                      "name": "max_weight",
                      "type": 10,
                      "typeName": "Weight"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 91,
            "type": {
              "path": [
                "staging_xcm",
                "v4",
                "asset",
                "AssetFilter"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Definite",
                      "fields": [
                        {
                          "type": 70,
                          "typeName": "Assets"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Wild",
                      "fields": [
                        {
                          "type": 92,
                          "typeName": "WildAsset"
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 92,
            "type": {
              "path": [
                "staging_xcm",
                "v4",
                "asset",
                "WildAsset"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "All",
                      "index": 0
                    },
                    {
                      "name": "AllOf",
                      "fields": [
                        {
                          "name": "id",
                          "type": 73,
                          "typeName": "AssetId"
                        },
                        {
                          "name": "fun",
                          "type": 93,
                          "typeName": "WildFungibility"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "AllCounted",
                      "fields": [
                        {
                          "type": 40,
                          "typeName": "u32"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "AllOfCounted",
                      "fields": [
                        {
                          "name": "id",
                          "type": 73,
                          "typeName": "AssetId"
                        },
                        {
                          "name": "fun",
                          "type": 93,
                          "typeName": "WildFungibility"
                        },
                        {
                          "name": "count",
                          "type": 40,
                          "typeName": "u32"
                        }
                      ],
                      "index": 3
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 93,
            "type": {
              "path": [
                "staging_xcm",
                "v4",
                "asset",
                "WildFungibility"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Fungible",
                      "index": 0
                    },
                    {
                      "name": "NonFungible",
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 94,
            "type": {
              "path": [
                "xcm",
                "v3",
                "WeightLimit"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Unlimited",
                      "index": 0
                    },
                    {
                      "name": "Limited",
                      "fields": [
                        {
                          "type": 10,
                          "typeName": "Weight"
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 95,
            "type": {
              "path": [
                "xcm",
                "VersionedAssets"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "V2",
                      "fields": [
                        {
                          "type": 96,
                          "typeName": "v2::MultiAssets"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "V3",
                      "fields": [
                        {
                          "type": 109,
                          "typeName": "v3::MultiAssets"
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "V4",
                      "fields": [
                        {
                          "type": 70,
                          "typeName": "v4::Assets"
                        }
                      ],
                      "index": 4
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 96,
            "type": {
              "path": [
                "xcm",
                "v2",
                "multiasset",
                "MultiAssets"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 97,
                      "typeName": "Vec<MultiAsset>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 97,
            "type": {
              "def": {
                "sequence": {
                  "type": 98
                }
              }
            }
          },
          {
            "id": 98,
            "type": {
              "path": [
                "xcm",
                "v2",
                "multiasset",
                "MultiAsset"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "id",
                      "type": 99,
                      "typeName": "AssetId"
                    },
                    {
                      "name": "fun",
                      "type": 107,
                      "typeName": "Fungibility"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 99,
            "type": {
              "path": [
                "xcm",
                "v2",
                "multiasset",
                "AssetId"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Concrete",
                      "fields": [
                        {
                          "type": 100,
                          "typeName": "MultiLocation"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Abstract",
                      "fields": [
                        {
                          "type": 14,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 100,
            "type": {
              "path": [
                "xcm",
                "v2",
                "multilocation",
                "MultiLocation"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "parents",
                      "type": 2,
                      "typeName": "u8"
                    },
                    {
                      "name": "interior",
                      "type": 101,
                      "typeName": "Junctions"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 101,
            "type": {
              "path": [
                "xcm",
                "v2",
                "multilocation",
                "Junctions"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Here",
                      "index": 0
                    },
                    {
                      "name": "X1",
                      "fields": [
                        {
                          "type": 102,
                          "typeName": "Junction"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "X2",
                      "fields": [
                        {
                          "type": 102,
                          "typeName": "Junction"
                        },
                        {
                          "type": 102,
                          "typeName": "Junction"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "X3",
                      "fields": [
                        {
                          "type": 102,
                          "typeName": "Junction"
                        },
                        {
                          "type": 102,
                          "typeName": "Junction"
                        },
                        {
                          "type": 102,
                          "typeName": "Junction"
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "X4",
                      "fields": [
                        {
                          "type": 102,
                          "typeName": "Junction"
                        },
                        {
                          "type": 102,
                          "typeName": "Junction"
                        },
                        {
                          "type": 102,
                          "typeName": "Junction"
                        },
                        {
                          "type": 102,
                          "typeName": "Junction"
                        }
                      ],
                      "index": 4
                    },
                    {
                      "name": "X5",
                      "fields": [
                        {
                          "type": 102,
                          "typeName": "Junction"
                        },
                        {
                          "type": 102,
                          "typeName": "Junction"
                        },
                        {
                          "type": 102,
                          "typeName": "Junction"
                        },
                        {
                          "type": 102,
                          "typeName": "Junction"
                        },
                        {
                          "type": 102,
                          "typeName": "Junction"
                        }
                      ],
                      "index": 5
                    },
                    {
                      "name": "X6",
                      "fields": [
                        {
                          "type": 102,
                          "typeName": "Junction"
                        },
                        {
                          "type": 102,
                          "typeName": "Junction"
                        },
                        {
                          "type": 102,
                          "typeName": "Junction"
                        },
                        {
                          "type": 102,
                          "typeName": "Junction"
                        },
                        {
                          "type": 102,
                          "typeName": "Junction"
                        },
                        {
                          "type": 102,
                          "typeName": "Junction"
                        }
                      ],
                      "index": 6
                    },
                    {
                      "name": "X7",
                      "fields": [
                        {
                          "type": 102,
                          "typeName": "Junction"
                        },
                        {
                          "type": 102,
                          "typeName": "Junction"
                        },
                        {
                          "type": 102,
                          "typeName": "Junction"
                        },
                        {
                          "type": 102,
                          "typeName": "Junction"
                        },
                        {
                          "type": 102,
                          "typeName": "Junction"
                        },
                        {
                          "type": 102,
                          "typeName": "Junction"
                        },
                        {
                          "type": 102,
                          "typeName": "Junction"
                        }
                      ],
                      "index": 7
                    },
                    {
                      "name": "X8",
                      "fields": [
                        {
                          "type": 102,
                          "typeName": "Junction"
                        },
                        {
                          "type": 102,
                          "typeName": "Junction"
                        },
                        {
                          "type": 102,
                          "typeName": "Junction"
                        },
                        {
                          "type": 102,
                          "typeName": "Junction"
                        },
                        {
                          "type": 102,
                          "typeName": "Junction"
                        },
                        {
                          "type": 102,
                          "typeName": "Junction"
                        },
                        {
                          "type": 102,
                          "typeName": "Junction"
                        },
                        {
                          "type": 102,
                          "typeName": "Junction"
                        }
                      ],
                      "index": 8
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 102,
            "type": {
              "path": [
                "xcm",
                "v2",
                "junction",
                "Junction"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Parachain",
                      "fields": [
                        {
                          "type": 40,
                          "typeName": "u32"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "AccountId32",
                      "fields": [
                        {
                          "name": "network",
                          "type": 103,
                          "typeName": "NetworkId"
                        },
                        {
                          "name": "id",
                          "type": 1,
                          "typeName": "[u8; 32]"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "AccountIndex64",
                      "fields": [
                        {
                          "name": "network",
                          "type": 103,
                          "typeName": "NetworkId"
                        },
                        {
                          "name": "index",
                          "type": 11,
                          "typeName": "u64"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "AccountKey20",
                      "fields": [
                        {
                          "name": "network",
                          "type": 103,
                          "typeName": "NetworkId"
                        },
                        {
                          "name": "key",
                          "type": 43,
                          "typeName": "[u8; 20]"
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "PalletInstance",
                      "fields": [
                        {
                          "type": 2,
                          "typeName": "u8"
                        }
                      ],
                      "index": 4
                    },
                    {
                      "name": "GeneralIndex",
                      "fields": [
                        {
                          "type": 44,
                          "typeName": "u128"
                        }
                      ],
                      "index": 5
                    },
                    {
                      "name": "GeneralKey",
                      "fields": [
                        {
                          "type": 104,
                          "typeName": "WeakBoundedVec<u8, ConstU32<32>>"
                        }
                      ],
                      "index": 6
                    },
                    {
                      "name": "OnlyChild",
                      "index": 7
                    },
                    {
                      "name": "Plurality",
                      "fields": [
                        {
                          "name": "id",
                          "type": 105,
                          "typeName": "BodyId"
                        },
                        {
                          "name": "part",
                          "type": 106,
                          "typeName": "BodyPart"
                        }
                      ],
                      "index": 8
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 103,
            "type": {
              "path": [
                "xcm",
                "v2",
                "NetworkId"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Any",
                      "index": 0
                    },
                    {
                      "name": "Named",
                      "fields": [
                        {
                          "type": 104,
                          "typeName": "WeakBoundedVec<u8, ConstU32<32>>"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "Polkadot",
                      "index": 2
                    },
                    {
                      "name": "Kusama",
                      "index": 3
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 104,
            "type": {
              "path": [
                "bounded_collections",
                "weak_bounded_vec",
                "WeakBoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 2
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 14,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 105,
            "type": {
              "path": [
                "xcm",
                "v2",
                "BodyId"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Unit",
                      "index": 0
                    },
                    {
                      "name": "Named",
                      "fields": [
                        {
                          "type": 104,
                          "typeName": "WeakBoundedVec<u8, ConstU32<32>>"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "Index",
                      "fields": [
                        {
                          "type": 40,
                          "typeName": "u32"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "Executive",
                      "index": 3
                    },
                    {
                      "name": "Technical",
                      "index": 4
                    },
                    {
                      "name": "Legislative",
                      "index": 5
                    },
                    {
                      "name": "Judicial",
                      "index": 6
                    },
                    {
                      "name": "Defense",
                      "index": 7
                    },
                    {
                      "name": "Administration",
                      "index": 8
                    },
                    {
                      "name": "Treasury",
                      "index": 9
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 106,
            "type": {
              "path": [
                "xcm",
                "v2",
                "BodyPart"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Voice",
                      "index": 0
                    },
                    {
                      "name": "Members",
                      "fields": [
                        {
                          "name": "count",
                          "type": 40,
                          "typeName": "u32"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "Fraction",
                      "fields": [
                        {
                          "name": "nom",
                          "type": 40,
                          "typeName": "u32"
                        },
                        {
                          "name": "denom",
                          "type": 40,
                          "typeName": "u32"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "AtLeastProportion",
                      "fields": [
                        {
                          "name": "nom",
                          "type": 40,
                          "typeName": "u32"
                        },
                        {
                          "name": "denom",
                          "type": 40,
                          "typeName": "u32"
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "MoreThanProportion",
                      "fields": [
                        {
                          "name": "nom",
                          "type": 40,
                          "typeName": "u32"
                        },
                        {
                          "name": "denom",
                          "type": 40,
                          "typeName": "u32"
                        }
                      ],
                      "index": 4
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 107,
            "type": {
              "path": [
                "xcm",
                "v2",
                "multiasset",
                "Fungibility"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Fungible",
                      "fields": [
                        {
                          "type": 44,
                          "typeName": "u128"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "NonFungible",
                      "fields": [
                        {
                          "type": 108,
                          "typeName": "AssetInstance"
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 108,
            "type": {
              "path": [
                "xcm",
                "v2",
                "multiasset",
                "AssetInstance"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Undefined",
                      "index": 0
                    },
                    {
                      "name": "Index",
                      "fields": [
                        {
                          "type": 44,
                          "typeName": "u128"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "Array4",
                      "fields": [
                        {
                          "type": 18,
                          "typeName": "[u8; 4]"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "Array8",
                      "fields": [
                        {
                          "type": 76,
                          "typeName": "[u8; 8]"
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "Array16",
                      "fields": [
                        {
                          "type": 77,
                          "typeName": "[u8; 16]"
                        }
                      ],
                      "index": 4
                    },
                    {
                      "name": "Array32",
                      "fields": [
                        {
                          "type": 1,
                          "typeName": "[u8; 32]"
                        }
                      ],
                      "index": 5
                    },
                    {
                      "name": "Blob",
                      "fields": [
                        {
                          "type": 14,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 6
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 109,
            "type": {
              "path": [
                "xcm",
                "v3",
                "multiasset",
                "MultiAssets"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 110,
                      "typeName": "Vec<MultiAsset>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 110,
            "type": {
              "def": {
                "sequence": {
                  "type": 111
                }
              }
            }
          },
          {
            "id": 111,
            "type": {
              "path": [
                "xcm",
                "v3",
                "multiasset",
                "MultiAsset"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "id",
                      "type": 112,
                      "typeName": "AssetId"
                    },
                    {
                      "name": "fun",
                      "type": 113,
                      "typeName": "Fungibility"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 112,
            "type": {
              "path": [
                "xcm",
                "v3",
                "multiasset",
                "AssetId"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Concrete",
                      "fields": [
                        {
                          "type": 37,
                          "typeName": "MultiLocation"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Abstract",
                      "fields": [
                        {
                          "type": 1,
                          "typeName": "[u8; 32]"
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 113,
            "type": {
              "path": [
                "xcm",
                "v3",
                "multiasset",
                "Fungibility"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Fungible",
                      "fields": [
                        {
                          "type": 44,
                          "typeName": "u128"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "NonFungible",
                      "fields": [
                        {
                          "type": 114,
                          "typeName": "AssetInstance"
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 114,
            "type": {
              "path": [
                "xcm",
                "v3",
                "multiasset",
                "AssetInstance"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Undefined",
                      "index": 0
                    },
                    {
                      "name": "Index",
                      "fields": [
                        {
                          "type": 44,
                          "typeName": "u128"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "Array4",
                      "fields": [
                        {
                          "type": 18,
                          "typeName": "[u8; 4]"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "Array8",
                      "fields": [
                        {
                          "type": 76,
                          "typeName": "[u8; 8]"
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "Array16",
                      "fields": [
                        {
                          "type": 77,
                          "typeName": "[u8; 16]"
                        }
                      ],
                      "index": 4
                    },
                    {
                      "name": "Array32",
                      "fields": [
                        {
                          "type": 1,
                          "typeName": "[u8; 32]"
                        }
                      ],
                      "index": 5
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 115,
            "type": {
              "path": [
                "xcm",
                "VersionedLocation"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "V2",
                      "fields": [
                        {
                          "type": 100,
                          "typeName": "v2::MultiLocation"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "V3",
                      "fields": [
                        {
                          "type": 37,
                          "typeName": "v3::MultiLocation"
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "V4",
                      "fields": [
                        {
                          "type": 54,
                          "typeName": "v4::Location"
                        }
                      ],
                      "index": 4
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 116,
            "type": {
              "path": [
                "cumulus_pallet_xcm",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "InvalidFormat",
                      "fields": [
                        {
                          "type": 1,
                          "typeName": "[u8; 32]"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Downward message is invalid XCM.",
                        "\\[ id \\]"
                      ]
                    },
                    {
                      "name": "UnsupportedVersion",
                      "fields": [
                        {
                          "type": 1,
                          "typeName": "[u8; 32]"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Downward message is unsupported version of XCM.",
                        "\\[ id \\]"
                      ]
                    },
                    {
                      "name": "ExecutedDownward",
                      "fields": [
                        {
                          "type": 1,
                          "typeName": "[u8; 32]"
                        },
                        {
                          "type": 52,
                          "typeName": "Outcome"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Downward message executed with the given outcome.",
                        "\\[ id, outcome \\]"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "The `Event` enum of this pallet"
              ]
            }
          },
          {
            "id": 117,
            "type": {
              "path": [
                "pallet_message_queue",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "ProcessingFailed",
                      "fields": [
                        {
                          "name": "id",
                          "type": 13,
                          "typeName": "H256",
                          "docs": [
                            "The `blake2_256` hash of the message."
                          ]
                        },
                        {
                          "name": "origin",
                          "type": 118,
                          "typeName": "MessageOriginOf<T>",
                          "docs": [
                            "The queue of the message."
                          ]
                        },
                        {
                          "name": "error",
                          "type": 120,
                          "typeName": "ProcessMessageError",
                          "docs": [
                            "The error that occurred.",
                            "",
                            "This error is pretty opaque. More fine-grained errors need to be emitted as events",
                            "by the `MessageProcessor`."
                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Message discarded due to an error in the `MessageProcessor` (usually a format error)."
                      ]
                    },
                    {
                      "name": "Processed",
                      "fields": [
                        {
                          "name": "id",
                          "type": 13,
                          "typeName": "H256",
                          "docs": [
                            "The `blake2_256` hash of the message."
                          ]
                        },
                        {
                          "name": "origin",
                          "type": 118,
                          "typeName": "MessageOriginOf<T>",
                          "docs": [
                            "The queue of the message."
                          ]
                        },
                        {
                          "name": "weight_used",
                          "type": 10,
                          "typeName": "Weight",
                          "docs": [
                            "How much weight was used to process the message."
                          ]
                        },
                        {
                          "name": "success",
                          "type": 8,
                          "typeName": "bool",
                          "docs": [
                            "Whether the message was processed.",
                            "",
                            "Note that this does not mean that the underlying `MessageProcessor` was internally",
                            "successful. It *solely* means that the MQ pallet will treat this as a success",
                            "condition and discard the message. Any internal error needs to be emitted as events",
                            "by the `MessageProcessor`."
                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Message is processed."
                      ]
                    },
                    {
                      "name": "OverweightEnqueued",
                      "fields": [
                        {
                          "name": "id",
                          "type": 1,
                          "typeName": "[u8; 32]",
                          "docs": [
                            "The `blake2_256` hash of the message."
                          ]
                        },
                        {
                          "name": "origin",
                          "type": 118,
                          "typeName": "MessageOriginOf<T>",
                          "docs": [
                            "The queue of the message."
                          ]
                        },
                        {
                          "name": "page_index",
                          "type": 4,
                          "typeName": "PageIndex",
                          "docs": [
                            "The page of the message."
                          ]
                        },
                        {
                          "name": "message_index",
                          "type": 4,
                          "typeName": "T::Size",
                          "docs": [
                            "The index of the message within the page."
                          ]
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Message placed in overweight queue."
                      ]
                    },
                    {
                      "name": "PageReaped",
                      "fields": [
                        {
                          "name": "origin",
                          "type": 118,
                          "typeName": "MessageOriginOf<T>",
                          "docs": [
                            "The queue of the page."
                          ]
                        },
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "PageIndex",
                          "docs": [
                            "The index of the page."
                          ]
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "This page was reaped."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "The `Event` enum of this pallet"
              ]
            }
          },
          {
            "id": 118,
            "type": {
              "path": [
                "cumulus_primitives_core",
                "AggregateMessageOrigin"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Here",
                      "index": 0
                    },
                    {
                      "name": "Parent",
                      "index": 1
                    },
                    {
                      "name": "Sibling",
                      "fields": [
                        {
                          "type": 119,
                          "typeName": "ParaId"
                        }
                      ],
                      "index": 2
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 119,
            "type": {
              "path": [
                "polkadot_parachain_primitives",
                "primitives",
                "Id"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 4,
                      "typeName": "u32"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 120,
            "type": {
              "path": [
                "frame_support",
                "traits",
                "messages",
                "ProcessMessageError"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "BadFormat",
                      "index": 0
                    },
                    {
                      "name": "Corrupt",
                      "index": 1
                    },
                    {
                      "name": "Unsupported",
                      "index": 2
                    },
                    {
                      "name": "Overweight",
                      "fields": [
                        {
                          "type": 10,
                          "typeName": "Weight"
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "Yield",
                      "index": 4
                    },
                    {
                      "name": "StackLimitReached",
                      "index": 5
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 121,
            "type": {
              "path": [
                "pallet_utility",
                "pallet",
                "Event"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "BatchInterrupted",
                      "fields": [
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "u32"
                        },
                        {
                          "name": "error",
                          "type": 26,
                          "typeName": "DispatchError"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Batch of dispatches did not complete fully. Index of first failing dispatch given, as",
                        "well as the error."
                      ]
                    },
                    {
                      "name": "BatchCompleted",
                      "index": 1,
                      "docs": [
                        "Batch of dispatches completed fully with no error."
                      ]
                    },
                    {
                      "name": "BatchCompletedWithErrors",
                      "index": 2,
                      "docs": [
                        "Batch of dispatches completed but has errors."
                      ]
                    },
                    {
                      "name": "ItemCompleted",
                      "index": 3,
                      "docs": [
                        "A single item within a Batch of dispatches has completed with no error."
                      ]
                    },
                    {
                      "name": "ItemFailed",
                      "fields": [
                        {
                          "name": "error",
                          "type": 26,
                          "typeName": "DispatchError"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "A single item within a Batch of dispatches has completed with error."
                      ]
                    },
                    {
                      "name": "DispatchedAs",
                      "fields": [
                        {
                          "name": "result",
                          "type": 122,
                          "typeName": "DispatchResult"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "A call was dispatched."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "The `Event` enum of this pallet"
              ]
            }
          },
          {
            "id": 122,
            "type": {
              "path": [
                "Result"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 123
                },
                {
                  "name": "E",
                  "type": 26
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Ok",
                      "fields": [
                        {
                          "type": 123
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Err",
                      "fields": [
                        {
                          "type": 26
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 123,
            "type": {
              "def": {
                "tuple": []
              }
            }
          },
          {
            "id": 124,
            "type": {
              "path": [
                "pallet_multisig",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "NewMultisig",
                      "fields": [
                        {
                          "name": "approving",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "multisig",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "call_hash",
                          "type": 1,
                          "typeName": "CallHash"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "A new multisig operation has begun."
                      ]
                    },
                    {
                      "name": "MultisigApproval",
                      "fields": [
                        {
                          "name": "approving",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "timepoint",
                          "type": 125,
                          "typeName": "Timepoint<BlockNumberFor<T>>"
                        },
                        {
                          "name": "multisig",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "call_hash",
                          "type": 1,
                          "typeName": "CallHash"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "A multisig operation has been approved by someone."
                      ]
                    },
                    {
                      "name": "MultisigExecuted",
                      "fields": [
                        {
                          "name": "approving",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "timepoint",
                          "type": 125,
                          "typeName": "Timepoint<BlockNumberFor<T>>"
                        },
                        {
                          "name": "multisig",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "call_hash",
                          "type": 1,
                          "typeName": "CallHash"
                        },
                        {
                          "name": "result",
                          "type": 122,
                          "typeName": "DispatchResult"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "A multisig operation has been executed."
                      ]
                    },
                    {
                      "name": "MultisigCancelled",
                      "fields": [
                        {
                          "name": "cancelling",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "timepoint",
                          "type": 125,
                          "typeName": "Timepoint<BlockNumberFor<T>>"
                        },
                        {
                          "name": "multisig",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "call_hash",
                          "type": 1,
                          "typeName": "CallHash"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "A multisig operation has been cancelled."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "The `Event` enum of this pallet"
              ]
            }
          },
          {
            "id": 125,
            "type": {
              "path": [
                "pallet_multisig",
                "Timepoint"
              ],
              "params": [
                {
                  "name": "BlockNumber",
                  "type": 4
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "height",
                      "type": 4,
                      "typeName": "BlockNumber"
                    },
                    {
                      "name": "index",
                      "type": 4,
                      "typeName": "u32"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 126,
            "type": {
              "path": [
                "pallet_proxy",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "ProxyExecuted",
                      "fields": [
                        {
                          "name": "result",
                          "type": 122,
                          "typeName": "DispatchResult"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "A proxy was executed correctly, with the given."
                      ]
                    },
                    {
                      "name": "PureCreated",
                      "fields": [
                        {
                          "name": "pure",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "proxy_type",
                          "type": 127,
                          "typeName": "T::ProxyType"
                        },
                        {
                          "name": "disambiguation_index",
                          "type": 128,
                          "typeName": "u16"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "A pure account has been created by new proxy with given",
                        "disambiguation index and proxy type."
                      ]
                    },
                    {
                      "name": "Announced",
                      "fields": [
                        {
                          "name": "real",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "proxy",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "call_hash",
                          "type": 13,
                          "typeName": "CallHashOf<T>"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "An announcement was placed to make a call in the future."
                      ]
                    },
                    {
                      "name": "ProxyAdded",
                      "fields": [
                        {
                          "name": "delegator",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "delegatee",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "proxy_type",
                          "type": 127,
                          "typeName": "T::ProxyType"
                        },
                        {
                          "name": "delay",
                          "type": 4,
                          "typeName": "BlockNumberFor<T>"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "A proxy was added."
                      ]
                    },
                    {
                      "name": "ProxyRemoved",
                      "fields": [
                        {
                          "name": "delegator",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "delegatee",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "proxy_type",
                          "type": 127,
                          "typeName": "T::ProxyType"
                        },
                        {
                          "name": "delay",
                          "type": 4,
                          "typeName": "BlockNumberFor<T>"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "A proxy was removed."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "The `Event` enum of this pallet"
              ]
            }
          },
          {
            "id": 127,
            "type": {
              "path": [
                "asset_hub_westend_runtime",
                "ProxyType"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Any",
                      "index": 0
                    },
                    {
                      "name": "NonTransfer",
                      "index": 1
                    },
                    {
                      "name": "CancelProxy",
                      "index": 2
                    },
                    {
                      "name": "Assets",
                      "index": 3
                    },
                    {
                      "name": "AssetOwner",
                      "index": 4
                    },
                    {
                      "name": "AssetManager",
                      "index": 5
                    },
                    {
                      "name": "Collator",
                      "index": 6
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 128,
            "type": {
              "def": {
                "primitive": "u16"
              }
            }
          },
          {
            "id": 129,
            "type": {
              "path": [
                "pallet_assets",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Created",
                      "fields": [
                        {
                          "name": "asset_id",
                          "type": 4,
                          "typeName": "T::AssetId"
                        },
                        {
                          "name": "creator",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "owner",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Some asset class was created."
                      ]
                    },
                    {
                      "name": "Issued",
                      "fields": [
                        {
                          "name": "asset_id",
                          "type": 4,
                          "typeName": "T::AssetId"
                        },
                        {
                          "name": "owner",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Some assets were issued."
                      ]
                    },
                    {
                      "name": "Transferred",
                      "fields": [
                        {
                          "name": "asset_id",
                          "type": 4,
                          "typeName": "T::AssetId"
                        },
                        {
                          "name": "from",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "to",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Some assets were transferred."
                      ]
                    },
                    {
                      "name": "Burned",
                      "fields": [
                        {
                          "name": "asset_id",
                          "type": 4,
                          "typeName": "T::AssetId"
                        },
                        {
                          "name": "owner",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "balance",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Some assets were destroyed."
                      ]
                    },
                    {
                      "name": "TeamChanged",
                      "fields": [
                        {
                          "name": "asset_id",
                          "type": 4,
                          "typeName": "T::AssetId"
                        },
                        {
                          "name": "issuer",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "admin",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "freezer",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "The management team changed."
                      ]
                    },
                    {
                      "name": "OwnerChanged",
                      "fields": [
                        {
                          "name": "asset_id",
                          "type": 4,
                          "typeName": "T::AssetId"
                        },
                        {
                          "name": "owner",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "The owner changed."
                      ]
                    },
                    {
                      "name": "Frozen",
                      "fields": [
                        {
                          "name": "asset_id",
                          "type": 4,
                          "typeName": "T::AssetId"
                        },
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "Some account `who` was frozen."
                      ]
                    },
                    {
                      "name": "Thawed",
                      "fields": [
                        {
                          "name": "asset_id",
                          "type": 4,
                          "typeName": "T::AssetId"
                        },
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "Some account `who` was thawed."
                      ]
                    },
                    {
                      "name": "AssetFrozen",
                      "fields": [
                        {
                          "name": "asset_id",
                          "type": 4,
                          "typeName": "T::AssetId"
                        }
                      ],
                      "index": 8,
                      "docs": [
                        "Some asset `asset_id` was frozen."
                      ]
                    },
                    {
                      "name": "AssetThawed",
                      "fields": [
                        {
                          "name": "asset_id",
                          "type": 4,
                          "typeName": "T::AssetId"
                        }
                      ],
                      "index": 9,
                      "docs": [
                        "Some asset `asset_id` was thawed."
                      ]
                    },
                    {
                      "name": "AccountsDestroyed",
                      "fields": [
                        {
                          "name": "asset_id",
                          "type": 4,
                          "typeName": "T::AssetId"
                        },
                        {
                          "name": "accounts_destroyed",
                          "type": 4,
                          "typeName": "u32"
                        },
                        {
                          "name": "accounts_remaining",
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 10,
                      "docs": [
                        "Accounts were destroyed for given asset."
                      ]
                    },
                    {
                      "name": "ApprovalsDestroyed",
                      "fields": [
                        {
                          "name": "asset_id",
                          "type": 4,
                          "typeName": "T::AssetId"
                        },
                        {
                          "name": "approvals_destroyed",
                          "type": 4,
                          "typeName": "u32"
                        },
                        {
                          "name": "approvals_remaining",
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 11,
                      "docs": [
                        "Approvals were destroyed for given asset."
                      ]
                    },
                    {
                      "name": "DestructionStarted",
                      "fields": [
                        {
                          "name": "asset_id",
                          "type": 4,
                          "typeName": "T::AssetId"
                        }
                      ],
                      "index": 12,
                      "docs": [
                        "An asset class is in the process of being destroyed."
                      ]
                    },
                    {
                      "name": "Destroyed",
                      "fields": [
                        {
                          "name": "asset_id",
                          "type": 4,
                          "typeName": "T::AssetId"
                        }
                      ],
                      "index": 13,
                      "docs": [
                        "An asset class was destroyed."
                      ]
                    },
                    {
                      "name": "ForceCreated",
                      "fields": [
                        {
                          "name": "asset_id",
                          "type": 4,
                          "typeName": "T::AssetId"
                        },
                        {
                          "name": "owner",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 14,
                      "docs": [
                        "Some asset class was force-created."
                      ]
                    },
                    {
                      "name": "MetadataSet",
                      "fields": [
                        {
                          "name": "asset_id",
                          "type": 4,
                          "typeName": "T::AssetId"
                        },
                        {
                          "name": "name",
                          "type": 14,
                          "typeName": "Vec<u8>"
                        },
                        {
                          "name": "symbol",
                          "type": 14,
                          "typeName": "Vec<u8>"
                        },
                        {
                          "name": "decimals",
                          "type": 2,
                          "typeName": "u8"
                        },
                        {
                          "name": "is_frozen",
                          "type": 8,
                          "typeName": "bool"
                        }
                      ],
                      "index": 15,
                      "docs": [
                        "New metadata has been set for an asset."
                      ]
                    },
                    {
                      "name": "MetadataCleared",
                      "fields": [
                        {
                          "name": "asset_id",
                          "type": 4,
                          "typeName": "T::AssetId"
                        }
                      ],
                      "index": 16,
                      "docs": [
                        "Metadata has been cleared for an asset."
                      ]
                    },
                    {
                      "name": "ApprovedTransfer",
                      "fields": [
                        {
                          "name": "asset_id",
                          "type": 4,
                          "typeName": "T::AssetId"
                        },
                        {
                          "name": "source",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "delegate",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 17,
                      "docs": [
                        "(Additional) funds have been approved for transfer to a destination account."
                      ]
                    },
                    {
                      "name": "ApprovalCancelled",
                      "fields": [
                        {
                          "name": "asset_id",
                          "type": 4,
                          "typeName": "T::AssetId"
                        },
                        {
                          "name": "owner",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "delegate",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 18,
                      "docs": [
                        "An approval for account `delegate` was cancelled by `owner`."
                      ]
                    },
                    {
                      "name": "TransferredApproved",
                      "fields": [
                        {
                          "name": "asset_id",
                          "type": 4,
                          "typeName": "T::AssetId"
                        },
                        {
                          "name": "owner",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "delegate",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "destination",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 19,
                      "docs": [
                        "An `amount` was transferred in its entirety from `owner` to `destination` by",
                        "the approved `delegate`."
                      ]
                    },
                    {
                      "name": "AssetStatusChanged",
                      "fields": [
                        {
                          "name": "asset_id",
                          "type": 4,
                          "typeName": "T::AssetId"
                        }
                      ],
                      "index": 20,
                      "docs": [
                        "An asset has had its attributes changed by the `Force` origin."
                      ]
                    },
                    {
                      "name": "AssetMinBalanceChanged",
                      "fields": [
                        {
                          "name": "asset_id",
                          "type": 4,
                          "typeName": "T::AssetId"
                        },
                        {
                          "name": "new_min_balance",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 21,
                      "docs": [
                        "The min_balance of an asset has been updated by the asset owner."
                      ]
                    },
                    {
                      "name": "Touched",
                      "fields": [
                        {
                          "name": "asset_id",
                          "type": 4,
                          "typeName": "T::AssetId"
                        },
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "depositor",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 22,
                      "docs": [
                        "Some account `who` was created with a deposit from `depositor`."
                      ]
                    },
                    {
                      "name": "Blocked",
                      "fields": [
                        {
                          "name": "asset_id",
                          "type": 4,
                          "typeName": "T::AssetId"
                        },
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 23,
                      "docs": [
                        "Some account `who` was blocked."
                      ]
                    },
                    {
                      "name": "Deposited",
                      "fields": [
                        {
                          "name": "asset_id",
                          "type": 4,
                          "typeName": "T::AssetId"
                        },
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 24,
                      "docs": [
                        "Some assets were deposited (e.g. for transaction fees)."
                      ]
                    },
                    {
                      "name": "Withdrawn",
                      "fields": [
                        {
                          "name": "asset_id",
                          "type": 4,
                          "typeName": "T::AssetId"
                        },
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 25,
                      "docs": [
                        "Some assets were withdrawn from the account (e.g. for transaction fees)."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "The `Event` enum of this pallet"
              ]
            }
          },
          {
            "id": 130,
            "type": {
              "path": [
                "pallet_uniques",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Created",
                      "fields": [
                        {
                          "name": "collection",
                          "type": 4,
                          "typeName": "T::CollectionId"
                        },
                        {
                          "name": "creator",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "owner",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "A `collection` was created."
                      ]
                    },
                    {
                      "name": "ForceCreated",
                      "fields": [
                        {
                          "name": "collection",
                          "type": 4,
                          "typeName": "T::CollectionId"
                        },
                        {
                          "name": "owner",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "A `collection` was force-created."
                      ]
                    },
                    {
                      "name": "Destroyed",
                      "fields": [
                        {
                          "name": "collection",
                          "type": 4,
                          "typeName": "T::CollectionId"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "A `collection` was destroyed."
                      ]
                    },
                    {
                      "name": "Issued",
                      "fields": [
                        {
                          "name": "collection",
                          "type": 4,
                          "typeName": "T::CollectionId"
                        },
                        {
                          "name": "item",
                          "type": 4,
                          "typeName": "T::ItemId"
                        },
                        {
                          "name": "owner",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "An `item` was issued."
                      ]
                    },
                    {
                      "name": "Transferred",
                      "fields": [
                        {
                          "name": "collection",
                          "type": 4,
                          "typeName": "T::CollectionId"
                        },
                        {
                          "name": "item",
                          "type": 4,
                          "typeName": "T::ItemId"
                        },
                        {
                          "name": "from",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "to",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "An `item` was transferred."
                      ]
                    },
                    {
                      "name": "Burned",
                      "fields": [
                        {
                          "name": "collection",
                          "type": 4,
                          "typeName": "T::CollectionId"
                        },
                        {
                          "name": "item",
                          "type": 4,
                          "typeName": "T::ItemId"
                        },
                        {
                          "name": "owner",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "An `item` was destroyed."
                      ]
                    },
                    {
                      "name": "Frozen",
                      "fields": [
                        {
                          "name": "collection",
                          "type": 4,
                          "typeName": "T::CollectionId"
                        },
                        {
                          "name": "item",
                          "type": 4,
                          "typeName": "T::ItemId"
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "Some `item` was frozen."
                      ]
                    },
                    {
                      "name": "Thawed",
                      "fields": [
                        {
                          "name": "collection",
                          "type": 4,
                          "typeName": "T::CollectionId"
                        },
                        {
                          "name": "item",
                          "type": 4,
                          "typeName": "T::ItemId"
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "Some `item` was thawed."
                      ]
                    },
                    {
                      "name": "CollectionFrozen",
                      "fields": [
                        {
                          "name": "collection",
                          "type": 4,
                          "typeName": "T::CollectionId"
                        }
                      ],
                      "index": 8,
                      "docs": [
                        "Some `collection` was frozen."
                      ]
                    },
                    {
                      "name": "CollectionThawed",
                      "fields": [
                        {
                          "name": "collection",
                          "type": 4,
                          "typeName": "T::CollectionId"
                        }
                      ],
                      "index": 9,
                      "docs": [
                        "Some `collection` was thawed."
                      ]
                    },
                    {
                      "name": "OwnerChanged",
                      "fields": [
                        {
                          "name": "collection",
                          "type": 4,
                          "typeName": "T::CollectionId"
                        },
                        {
                          "name": "new_owner",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 10,
                      "docs": [
                        "The owner changed."
                      ]
                    },
                    {
                      "name": "TeamChanged",
                      "fields": [
                        {
                          "name": "collection",
                          "type": 4,
                          "typeName": "T::CollectionId"
                        },
                        {
                          "name": "issuer",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "admin",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "freezer",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 11,
                      "docs": [
                        "The management team changed."
                      ]
                    },
                    {
                      "name": "ApprovedTransfer",
                      "fields": [
                        {
                          "name": "collection",
                          "type": 4,
                          "typeName": "T::CollectionId"
                        },
                        {
                          "name": "item",
                          "type": 4,
                          "typeName": "T::ItemId"
                        },
                        {
                          "name": "owner",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "delegate",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 12,
                      "docs": [
                        "An `item` of a `collection` has been approved by the `owner` for transfer by",
                        "a `delegate`."
                      ]
                    },
                    {
                      "name": "ApprovalCancelled",
                      "fields": [
                        {
                          "name": "collection",
                          "type": 4,
                          "typeName": "T::CollectionId"
                        },
                        {
                          "name": "item",
                          "type": 4,
                          "typeName": "T::ItemId"
                        },
                        {
                          "name": "owner",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "delegate",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 13,
                      "docs": [
                        "An approval for a `delegate` account to transfer the `item` of an item",
                        "`collection` was cancelled by its `owner`."
                      ]
                    },
                    {
                      "name": "ItemStatusChanged",
                      "fields": [
                        {
                          "name": "collection",
                          "type": 4,
                          "typeName": "T::CollectionId"
                        }
                      ],
                      "index": 14,
                      "docs": [
                        "A `collection` has had its attributes changed by the `Force` origin."
                      ]
                    },
                    {
                      "name": "CollectionMetadataSet",
                      "fields": [
                        {
                          "name": "collection",
                          "type": 4,
                          "typeName": "T::CollectionId"
                        },
                        {
                          "name": "data",
                          "type": 131,
                          "typeName": "BoundedVec<u8, T::StringLimit>"
                        },
                        {
                          "name": "is_frozen",
                          "type": 8,
                          "typeName": "bool"
                        }
                      ],
                      "index": 15,
                      "docs": [
                        "New metadata has been set for a `collection`."
                      ]
                    },
                    {
                      "name": "CollectionMetadataCleared",
                      "fields": [
                        {
                          "name": "collection",
                          "type": 4,
                          "typeName": "T::CollectionId"
                        }
                      ],
                      "index": 16,
                      "docs": [
                        "Metadata has been cleared for a `collection`."
                      ]
                    },
                    {
                      "name": "MetadataSet",
                      "fields": [
                        {
                          "name": "collection",
                          "type": 4,
                          "typeName": "T::CollectionId"
                        },
                        {
                          "name": "item",
                          "type": 4,
                          "typeName": "T::ItemId"
                        },
                        {
                          "name": "data",
                          "type": 131,
                          "typeName": "BoundedVec<u8, T::StringLimit>"
                        },
                        {
                          "name": "is_frozen",
                          "type": 8,
                          "typeName": "bool"
                        }
                      ],
                      "index": 17,
                      "docs": [
                        "New metadata has been set for an item."
                      ]
                    },
                    {
                      "name": "MetadataCleared",
                      "fields": [
                        {
                          "name": "collection",
                          "type": 4,
                          "typeName": "T::CollectionId"
                        },
                        {
                          "name": "item",
                          "type": 4,
                          "typeName": "T::ItemId"
                        }
                      ],
                      "index": 18,
                      "docs": [
                        "Metadata has been cleared for an item."
                      ]
                    },
                    {
                      "name": "Redeposited",
                      "fields": [
                        {
                          "name": "collection",
                          "type": 4,
                          "typeName": "T::CollectionId"
                        },
                        {
                          "name": "successful_items",
                          "type": 132,
                          "typeName": "Vec<T::ItemId>"
                        }
                      ],
                      "index": 19,
                      "docs": [
                        "Metadata has been cleared for an item."
                      ]
                    },
                    {
                      "name": "AttributeSet",
                      "fields": [
                        {
                          "name": "collection",
                          "type": 4,
                          "typeName": "T::CollectionId"
                        },
                        {
                          "name": "maybe_item",
                          "type": 133,
                          "typeName": "Option<T::ItemId>"
                        },
                        {
                          "name": "key",
                          "type": 134,
                          "typeName": "BoundedVec<u8, T::KeyLimit>"
                        },
                        {
                          "name": "value",
                          "type": 135,
                          "typeName": "BoundedVec<u8, T::ValueLimit>"
                        }
                      ],
                      "index": 20,
                      "docs": [
                        "New attribute metadata has been set for a `collection` or `item`."
                      ]
                    },
                    {
                      "name": "AttributeCleared",
                      "fields": [
                        {
                          "name": "collection",
                          "type": 4,
                          "typeName": "T::CollectionId"
                        },
                        {
                          "name": "maybe_item",
                          "type": 133,
                          "typeName": "Option<T::ItemId>"
                        },
                        {
                          "name": "key",
                          "type": 134,
                          "typeName": "BoundedVec<u8, T::KeyLimit>"
                        }
                      ],
                      "index": 21,
                      "docs": [
                        "Attribute metadata has been cleared for a `collection` or `item`."
                      ]
                    },
                    {
                      "name": "OwnershipAcceptanceChanged",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "maybe_collection",
                          "type": 133,
                          "typeName": "Option<T::CollectionId>"
                        }
                      ],
                      "index": 22,
                      "docs": [
                        "Ownership acceptance has changed for an account."
                      ]
                    },
                    {
                      "name": "CollectionMaxSupplySet",
                      "fields": [
                        {
                          "name": "collection",
                          "type": 4,
                          "typeName": "T::CollectionId"
                        },
                        {
                          "name": "max_supply",
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 23,
                      "docs": [
                        "Max supply has been set for a collection."
                      ]
                    },
                    {
                      "name": "ItemPriceSet",
                      "fields": [
                        {
                          "name": "collection",
                          "type": 4,
                          "typeName": "T::CollectionId"
                        },
                        {
                          "name": "item",
                          "type": 4,
                          "typeName": "T::ItemId"
                        },
                        {
                          "name": "price",
                          "type": 6,
                          "typeName": "ItemPrice<T, I>"
                        },
                        {
                          "name": "whitelisted_buyer",
                          "type": 136,
                          "typeName": "Option<T::AccountId>"
                        }
                      ],
                      "index": 24,
                      "docs": [
                        "The price was set for the instance."
                      ]
                    },
                    {
                      "name": "ItemPriceRemoved",
                      "fields": [
                        {
                          "name": "collection",
                          "type": 4,
                          "typeName": "T::CollectionId"
                        },
                        {
                          "name": "item",
                          "type": 4,
                          "typeName": "T::ItemId"
                        }
                      ],
                      "index": 25,
                      "docs": [
                        "The price for the instance was removed."
                      ]
                    },
                    {
                      "name": "ItemBought",
                      "fields": [
                        {
                          "name": "collection",
                          "type": 4,
                          "typeName": "T::CollectionId"
                        },
                        {
                          "name": "item",
                          "type": 4,
                          "typeName": "T::ItemId"
                        },
                        {
                          "name": "price",
                          "type": 6,
                          "typeName": "ItemPrice<T, I>"
                        },
                        {
                          "name": "seller",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "buyer",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 26,
                      "docs": [
                        "An item was bought."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "The `Event` enum of this pallet"
              ]
            }
          },
          {
            "id": 131,
            "type": {
              "path": [
                "bounded_collections",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 2
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 14,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 132,
            "type": {
              "def": {
                "sequence": {
                  "type": 4
                }
              }
            }
          },
          {
            "id": 133,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 4
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 4
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 134,
            "type": {
              "path": [
                "bounded_collections",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 2
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 14,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 135,
            "type": {
              "path": [
                "bounded_collections",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 2
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 14,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 136,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 0
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 0
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 137,
            "type": {
              "path": [
                "pallet_nfts",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Created",
                      "fields": [
                        {
                          "name": "collection",
                          "type": 4,
                          "typeName": "T::CollectionId"
                        },
                        {
                          "name": "creator",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "owner",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "A `collection` was created."
                      ]
                    },
                    {
                      "name": "ForceCreated",
                      "fields": [
                        {
                          "name": "collection",
                          "type": 4,
                          "typeName": "T::CollectionId"
                        },
                        {
                          "name": "owner",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "A `collection` was force-created."
                      ]
                    },
                    {
                      "name": "Destroyed",
                      "fields": [
                        {
                          "name": "collection",
                          "type": 4,
                          "typeName": "T::CollectionId"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "A `collection` was destroyed."
                      ]
                    },
                    {
                      "name": "Issued",
                      "fields": [
                        {
                          "name": "collection",
                          "type": 4,
                          "typeName": "T::CollectionId"
                        },
                        {
                          "name": "item",
                          "type": 4,
                          "typeName": "T::ItemId"
                        },
                        {
                          "name": "owner",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "An `item` was issued."
                      ]
                    },
                    {
                      "name": "Transferred",
                      "fields": [
                        {
                          "name": "collection",
                          "type": 4,
                          "typeName": "T::CollectionId"
                        },
                        {
                          "name": "item",
                          "type": 4,
                          "typeName": "T::ItemId"
                        },
                        {
                          "name": "from",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "to",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "An `item` was transferred."
                      ]
                    },
                    {
                      "name": "Burned",
                      "fields": [
                        {
                          "name": "collection",
                          "type": 4,
                          "typeName": "T::CollectionId"
                        },
                        {
                          "name": "item",
                          "type": 4,
                          "typeName": "T::ItemId"
                        },
                        {
                          "name": "owner",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "An `item` was destroyed."
                      ]
                    },
                    {
                      "name": "ItemTransferLocked",
                      "fields": [
                        {
                          "name": "collection",
                          "type": 4,
                          "typeName": "T::CollectionId"
                        },
                        {
                          "name": "item",
                          "type": 4,
                          "typeName": "T::ItemId"
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "An `item` became non-transferable."
                      ]
                    },
                    {
                      "name": "ItemTransferUnlocked",
                      "fields": [
                        {
                          "name": "collection",
                          "type": 4,
                          "typeName": "T::CollectionId"
                        },
                        {
                          "name": "item",
                          "type": 4,
                          "typeName": "T::ItemId"
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "An `item` became transferable."
                      ]
                    },
                    {
                      "name": "ItemPropertiesLocked",
                      "fields": [
                        {
                          "name": "collection",
                          "type": 4,
                          "typeName": "T::CollectionId"
                        },
                        {
                          "name": "item",
                          "type": 4,
                          "typeName": "T::ItemId"
                        },
                        {
                          "name": "lock_metadata",
                          "type": 8,
                          "typeName": "bool"
                        },
                        {
                          "name": "lock_attributes",
                          "type": 8,
                          "typeName": "bool"
                        }
                      ],
                      "index": 8,
                      "docs": [
                        "`item` metadata or attributes were locked."
                      ]
                    },
                    {
                      "name": "CollectionLocked",
                      "fields": [
                        {
                          "name": "collection",
                          "type": 4,
                          "typeName": "T::CollectionId"
                        }
                      ],
                      "index": 9,
                      "docs": [
                        "Some `collection` was locked."
                      ]
                    },
                    {
                      "name": "OwnerChanged",
                      "fields": [
                        {
                          "name": "collection",
                          "type": 4,
                          "typeName": "T::CollectionId"
                        },
                        {
                          "name": "new_owner",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 10,
                      "docs": [
                        "The owner changed."
                      ]
                    },
                    {
                      "name": "TeamChanged",
                      "fields": [
                        {
                          "name": "collection",
                          "type": 4,
                          "typeName": "T::CollectionId"
                        },
                        {
                          "name": "issuer",
                          "type": 136,
                          "typeName": "Option<T::AccountId>"
                        },
                        {
                          "name": "admin",
                          "type": 136,
                          "typeName": "Option<T::AccountId>"
                        },
                        {
                          "name": "freezer",
                          "type": 136,
                          "typeName": "Option<T::AccountId>"
                        }
                      ],
                      "index": 11,
                      "docs": [
                        "The management team changed."
                      ]
                    },
                    {
                      "name": "TransferApproved",
                      "fields": [
                        {
                          "name": "collection",
                          "type": 4,
                          "typeName": "T::CollectionId"
                        },
                        {
                          "name": "item",
                          "type": 4,
                          "typeName": "T::ItemId"
                        },
                        {
                          "name": "owner",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "delegate",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "deadline",
                          "type": 133,
                          "typeName": "Option<BlockNumberFor<T>>"
                        }
                      ],
                      "index": 12,
                      "docs": [
                        "An `item` of a `collection` has been approved by the `owner` for transfer by",
                        "a `delegate`."
                      ]
                    },
                    {
                      "name": "ApprovalCancelled",
                      "fields": [
                        {
                          "name": "collection",
                          "type": 4,
                          "typeName": "T::CollectionId"
                        },
                        {
                          "name": "item",
                          "type": 4,
                          "typeName": "T::ItemId"
                        },
                        {
                          "name": "owner",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "delegate",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 13,
                      "docs": [
                        "An approval for a `delegate` account to transfer the `item` of an item",
                        "`collection` was cancelled by its `owner`."
                      ]
                    },
                    {
                      "name": "AllApprovalsCancelled",
                      "fields": [
                        {
                          "name": "collection",
                          "type": 4,
                          "typeName": "T::CollectionId"
                        },
                        {
                          "name": "item",
                          "type": 4,
                          "typeName": "T::ItemId"
                        },
                        {
                          "name": "owner",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 14,
                      "docs": [
                        "All approvals of an item got cancelled."
                      ]
                    },
                    {
                      "name": "CollectionConfigChanged",
                      "fields": [
                        {
                          "name": "collection",
                          "type": 4,
                          "typeName": "T::CollectionId"
                        }
                      ],
                      "index": 15,
                      "docs": [
                        "A `collection` has had its config changed by the `Force` origin."
                      ]
                    },
                    {
                      "name": "CollectionMetadataSet",
                      "fields": [
                        {
                          "name": "collection",
                          "type": 4,
                          "typeName": "T::CollectionId"
                        },
                        {
                          "name": "data",
                          "type": 138,
                          "typeName": "BoundedVec<u8, T::StringLimit>"
                        }
                      ],
                      "index": 16,
                      "docs": [
                        "New metadata has been set for a `collection`."
                      ]
                    },
                    {
                      "name": "CollectionMetadataCleared",
                      "fields": [
                        {
                          "name": "collection",
                          "type": 4,
                          "typeName": "T::CollectionId"
                        }
                      ],
                      "index": 17,
                      "docs": [
                        "Metadata has been cleared for a `collection`."
                      ]
                    },
                    {
                      "name": "ItemMetadataSet",
                      "fields": [
                        {
                          "name": "collection",
                          "type": 4,
                          "typeName": "T::CollectionId"
                        },
                        {
                          "name": "item",
                          "type": 4,
                          "typeName": "T::ItemId"
                        },
                        {
                          "name": "data",
                          "type": 138,
                          "typeName": "BoundedVec<u8, T::StringLimit>"
                        }
                      ],
                      "index": 18,
                      "docs": [
                        "New metadata has been set for an item."
                      ]
                    },
                    {
                      "name": "ItemMetadataCleared",
                      "fields": [
                        {
                          "name": "collection",
                          "type": 4,
                          "typeName": "T::CollectionId"
                        },
                        {
                          "name": "item",
                          "type": 4,
                          "typeName": "T::ItemId"
                        }
                      ],
                      "index": 19,
                      "docs": [
                        "Metadata has been cleared for an item."
                      ]
                    },
                    {
                      "name": "Redeposited",
                      "fields": [
                        {
                          "name": "collection",
                          "type": 4,
                          "typeName": "T::CollectionId"
                        },
                        {
                          "name": "successful_items",
                          "type": 132,
                          "typeName": "Vec<T::ItemId>"
                        }
                      ],
                      "index": 20,
                      "docs": [
                        "The deposit for a set of `item`s within a `collection` has been updated."
                      ]
                    },
                    {
                      "name": "AttributeSet",
                      "fields": [
                        {
                          "name": "collection",
                          "type": 4,
                          "typeName": "T::CollectionId"
                        },
                        {
                          "name": "maybe_item",
                          "type": 133,
                          "typeName": "Option<T::ItemId>"
                        },
                        {
                          "name": "key",
                          "type": 135,
                          "typeName": "BoundedVec<u8, T::KeyLimit>"
                        },
                        {
                          "name": "value",
                          "type": 138,
                          "typeName": "BoundedVec<u8, T::ValueLimit>"
                        },
                        {
                          "name": "namespace",
                          "type": 139,
                          "typeName": "AttributeNamespace<T::AccountId>"
                        }
                      ],
                      "index": 21,
                      "docs": [
                        "New attribute metadata has been set for a `collection` or `item`."
                      ]
                    },
                    {
                      "name": "AttributeCleared",
                      "fields": [
                        {
                          "name": "collection",
                          "type": 4,
                          "typeName": "T::CollectionId"
                        },
                        {
                          "name": "maybe_item",
                          "type": 133,
                          "typeName": "Option<T::ItemId>"
                        },
                        {
                          "name": "key",
                          "type": 135,
                          "typeName": "BoundedVec<u8, T::KeyLimit>"
                        },
                        {
                          "name": "namespace",
                          "type": 139,
                          "typeName": "AttributeNamespace<T::AccountId>"
                        }
                      ],
                      "index": 22,
                      "docs": [
                        "Attribute metadata has been cleared for a `collection` or `item`."
                      ]
                    },
                    {
                      "name": "ItemAttributesApprovalAdded",
                      "fields": [
                        {
                          "name": "collection",
                          "type": 4,
                          "typeName": "T::CollectionId"
                        },
                        {
                          "name": "item",
                          "type": 4,
                          "typeName": "T::ItemId"
                        },
                        {
                          "name": "delegate",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 23,
                      "docs": [
                        "A new approval to modify item attributes was added."
                      ]
                    },
                    {
                      "name": "ItemAttributesApprovalRemoved",
                      "fields": [
                        {
                          "name": "collection",
                          "type": 4,
                          "typeName": "T::CollectionId"
                        },
                        {
                          "name": "item",
                          "type": 4,
                          "typeName": "T::ItemId"
                        },
                        {
                          "name": "delegate",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 24,
                      "docs": [
                        "A new approval to modify item attributes was removed."
                      ]
                    },
                    {
                      "name": "OwnershipAcceptanceChanged",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "maybe_collection",
                          "type": 133,
                          "typeName": "Option<T::CollectionId>"
                        }
                      ],
                      "index": 25,
                      "docs": [
                        "Ownership acceptance has changed for an account."
                      ]
                    },
                    {
                      "name": "CollectionMaxSupplySet",
                      "fields": [
                        {
                          "name": "collection",
                          "type": 4,
                          "typeName": "T::CollectionId"
                        },
                        {
                          "name": "max_supply",
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 26,
                      "docs": [
                        "Max supply has been set for a collection."
                      ]
                    },
                    {
                      "name": "CollectionMintSettingsUpdated",
                      "fields": [
                        {
                          "name": "collection",
                          "type": 4,
                          "typeName": "T::CollectionId"
                        }
                      ],
                      "index": 27,
                      "docs": [
                        "Mint settings for a collection had changed."
                      ]
                    },
                    {
                      "name": "NextCollectionIdIncremented",
                      "fields": [
                        {
                          "name": "next_id",
                          "type": 133,
                          "typeName": "Option<T::CollectionId>"
                        }
                      ],
                      "index": 28,
                      "docs": [
                        "Event gets emitted when the `NextCollectionId` gets incremented."
                      ]
                    },
                    {
                      "name": "ItemPriceSet",
                      "fields": [
                        {
                          "name": "collection",
                          "type": 4,
                          "typeName": "T::CollectionId"
                        },
                        {
                          "name": "item",
                          "type": 4,
                          "typeName": "T::ItemId"
                        },
                        {
                          "name": "price",
                          "type": 6,
                          "typeName": "ItemPrice<T, I>"
                        },
                        {
                          "name": "whitelisted_buyer",
                          "type": 136,
                          "typeName": "Option<T::AccountId>"
                        }
                      ],
                      "index": 29,
                      "docs": [
                        "The price was set for the item."
                      ]
                    },
                    {
                      "name": "ItemPriceRemoved",
                      "fields": [
                        {
                          "name": "collection",
                          "type": 4,
                          "typeName": "T::CollectionId"
                        },
                        {
                          "name": "item",
                          "type": 4,
                          "typeName": "T::ItemId"
                        }
                      ],
                      "index": 30,
                      "docs": [
                        "The price for the item was removed."
                      ]
                    },
                    {
                      "name": "ItemBought",
                      "fields": [
                        {
                          "name": "collection",
                          "type": 4,
                          "typeName": "T::CollectionId"
                        },
                        {
                          "name": "item",
                          "type": 4,
                          "typeName": "T::ItemId"
                        },
                        {
                          "name": "price",
                          "type": 6,
                          "typeName": "ItemPrice<T, I>"
                        },
                        {
                          "name": "seller",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "buyer",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 31,
                      "docs": [
                        "An item was bought."
                      ]
                    },
                    {
                      "name": "TipSent",
                      "fields": [
                        {
                          "name": "collection",
                          "type": 4,
                          "typeName": "T::CollectionId"
                        },
                        {
                          "name": "item",
                          "type": 4,
                          "typeName": "T::ItemId"
                        },
                        {
                          "name": "sender",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "receiver",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "DepositBalanceOf<T, I>"
                        }
                      ],
                      "index": 32,
                      "docs": [
                        "A tip was sent."
                      ]
                    },
                    {
                      "name": "SwapCreated",
                      "fields": [
                        {
                          "name": "offered_collection",
                          "type": 4,
                          "typeName": "T::CollectionId"
                        },
                        {
                          "name": "offered_item",
                          "type": 4,
                          "typeName": "T::ItemId"
                        },
                        {
                          "name": "desired_collection",
                          "type": 4,
                          "typeName": "T::CollectionId"
                        },
                        {
                          "name": "desired_item",
                          "type": 133,
                          "typeName": "Option<T::ItemId>"
                        },
                        {
                          "name": "price",
                          "type": 140,
                          "typeName": "Option<PriceWithDirection<ItemPrice<T, I>>>"
                        },
                        {
                          "name": "deadline",
                          "type": 4,
                          "typeName": "BlockNumberFor<T>"
                        }
                      ],
                      "index": 33,
                      "docs": [
                        "An `item` swap intent was created."
                      ]
                    },
                    {
                      "name": "SwapCancelled",
                      "fields": [
                        {
                          "name": "offered_collection",
                          "type": 4,
                          "typeName": "T::CollectionId"
                        },
                        {
                          "name": "offered_item",
                          "type": 4,
                          "typeName": "T::ItemId"
                        },
                        {
                          "name": "desired_collection",
                          "type": 4,
                          "typeName": "T::CollectionId"
                        },
                        {
                          "name": "desired_item",
                          "type": 133,
                          "typeName": "Option<T::ItemId>"
                        },
                        {
                          "name": "price",
                          "type": 140,
                          "typeName": "Option<PriceWithDirection<ItemPrice<T, I>>>"
                        },
                        {
                          "name": "deadline",
                          "type": 4,
                          "typeName": "BlockNumberFor<T>"
                        }
                      ],
                      "index": 34,
                      "docs": [
                        "The swap was cancelled."
                      ]
                    },
                    {
                      "name": "SwapClaimed",
                      "fields": [
                        {
                          "name": "sent_collection",
                          "type": 4,
                          "typeName": "T::CollectionId"
                        },
                        {
                          "name": "sent_item",
                          "type": 4,
                          "typeName": "T::ItemId"
                        },
                        {
                          "name": "sent_item_owner",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "received_collection",
                          "type": 4,
                          "typeName": "T::CollectionId"
                        },
                        {
                          "name": "received_item",
                          "type": 4,
                          "typeName": "T::ItemId"
                        },
                        {
                          "name": "received_item_owner",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "price",
                          "type": 140,
                          "typeName": "Option<PriceWithDirection<ItemPrice<T, I>>>"
                        },
                        {
                          "name": "deadline",
                          "type": 4,
                          "typeName": "BlockNumberFor<T>"
                        }
                      ],
                      "index": 35,
                      "docs": [
                        "The swap has been claimed."
                      ]
                    },
                    {
                      "name": "PreSignedAttributesSet",
                      "fields": [
                        {
                          "name": "collection",
                          "type": 4,
                          "typeName": "T::CollectionId"
                        },
                        {
                          "name": "item",
                          "type": 4,
                          "typeName": "T::ItemId"
                        },
                        {
                          "name": "namespace",
                          "type": 139,
                          "typeName": "AttributeNamespace<T::AccountId>"
                        }
                      ],
                      "index": 36,
                      "docs": [
                        "New attributes have been set for an `item` of the `collection`."
                      ]
                    },
                    {
                      "name": "PalletAttributeSet",
                      "fields": [
                        {
                          "name": "collection",
                          "type": 4,
                          "typeName": "T::CollectionId"
                        },
                        {
                          "name": "item",
                          "type": 133,
                          "typeName": "Option<T::ItemId>"
                        },
                        {
                          "name": "attribute",
                          "type": 143,
                          "typeName": "PalletAttributes<T::CollectionId>"
                        },
                        {
                          "name": "value",
                          "type": 138,
                          "typeName": "BoundedVec<u8, T::ValueLimit>"
                        }
                      ],
                      "index": 37,
                      "docs": [
                        "A new attribute in the `Pallet` namespace was set for the `collection` or an `item`",
                        "within that `collection`."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "The `Event` enum of this pallet"
              ]
            }
          },
          {
            "id": 138,
            "type": {
              "path": [
                "bounded_collections",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 2
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 14,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 139,
            "type": {
              "path": [
                "pallet_nfts",
                "types",
                "AttributeNamespace"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Pallet",
                      "index": 0
                    },
                    {
                      "name": "CollectionOwner",
                      "index": 1
                    },
                    {
                      "name": "ItemOwner",
                      "index": 2
                    },
                    {
                      "name": "Account",
                      "fields": [
                        {
                          "type": 0,
                          "typeName": "AccountId"
                        }
                      ],
                      "index": 3
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 140,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 141
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 141
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 141,
            "type": {
              "path": [
                "pallet_nfts",
                "types",
                "PriceWithDirection"
              ],
              "params": [
                {
                  "name": "Amount",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "amount",
                      "type": 6,
                      "typeName": "Amount"
                    },
                    {
                      "name": "direction",
                      "type": 142,
                      "typeName": "PriceDirection"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 142,
            "type": {
              "path": [
                "pallet_nfts",
                "types",
                "PriceDirection"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Send",
                      "index": 0
                    },
                    {
                      "name": "Receive",
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 143,
            "type": {
              "path": [
                "pallet_nfts",
                "types",
                "PalletAttributes"
              ],
              "params": [
                {
                  "name": "CollectionId",
                  "type": 4
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "UsedToClaim",
                      "fields": [
                        {
                          "type": 4,
                          "typeName": "CollectionId"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "TransferDisabled",
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 144,
            "type": {
              "path": [
                "pallet_assets",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Created",
                      "fields": [
                        {
                          "name": "asset_id",
                          "type": 37,
                          "typeName": "T::AssetId"
                        },
                        {
                          "name": "creator",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "owner",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Some asset class was created."
                      ]
                    },
                    {
                      "name": "Issued",
                      "fields": [
                        {
                          "name": "asset_id",
                          "type": 37,
                          "typeName": "T::AssetId"
                        },
                        {
                          "name": "owner",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Some assets were issued."
                      ]
                    },
                    {
                      "name": "Transferred",
                      "fields": [
                        {
                          "name": "asset_id",
                          "type": 37,
                          "typeName": "T::AssetId"
                        },
                        {
                          "name": "from",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "to",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Some assets were transferred."
                      ]
                    },
                    {
                      "name": "Burned",
                      "fields": [
                        {
                          "name": "asset_id",
                          "type": 37,
                          "typeName": "T::AssetId"
                        },
                        {
                          "name": "owner",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "balance",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Some assets were destroyed."
                      ]
                    },
                    {
                      "name": "TeamChanged",
                      "fields": [
                        {
                          "name": "asset_id",
                          "type": 37,
                          "typeName": "T::AssetId"
                        },
                        {
                          "name": "issuer",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "admin",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "freezer",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "The management team changed."
                      ]
                    },
                    {
                      "name": "OwnerChanged",
                      "fields": [
                        {
                          "name": "asset_id",
                          "type": 37,
                          "typeName": "T::AssetId"
                        },
                        {
                          "name": "owner",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "The owner changed."
                      ]
                    },
                    {
                      "name": "Frozen",
                      "fields": [
                        {
                          "name": "asset_id",
                          "type": 37,
                          "typeName": "T::AssetId"
                        },
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "Some account `who` was frozen."
                      ]
                    },
                    {
                      "name": "Thawed",
                      "fields": [
                        {
                          "name": "asset_id",
                          "type": 37,
                          "typeName": "T::AssetId"
                        },
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "Some account `who` was thawed."
                      ]
                    },
                    {
                      "name": "AssetFrozen",
                      "fields": [
                        {
                          "name": "asset_id",
                          "type": 37,
                          "typeName": "T::AssetId"
                        }
                      ],
                      "index": 8,
                      "docs": [
                        "Some asset `asset_id` was frozen."
                      ]
                    },
                    {
                      "name": "AssetThawed",
                      "fields": [
                        {
                          "name": "asset_id",
                          "type": 37,
                          "typeName": "T::AssetId"
                        }
                      ],
                      "index": 9,
                      "docs": [
                        "Some asset `asset_id` was thawed."
                      ]
                    },
                    {
                      "name": "AccountsDestroyed",
                      "fields": [
                        {
                          "name": "asset_id",
                          "type": 37,
                          "typeName": "T::AssetId"
                        },
                        {
                          "name": "accounts_destroyed",
                          "type": 4,
                          "typeName": "u32"
                        },
                        {
                          "name": "accounts_remaining",
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 10,
                      "docs": [
                        "Accounts were destroyed for given asset."
                      ]
                    },
                    {
                      "name": "ApprovalsDestroyed",
                      "fields": [
                        {
                          "name": "asset_id",
                          "type": 37,
                          "typeName": "T::AssetId"
                        },
                        {
                          "name": "approvals_destroyed",
                          "type": 4,
                          "typeName": "u32"
                        },
                        {
                          "name": "approvals_remaining",
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 11,
                      "docs": [
                        "Approvals were destroyed for given asset."
                      ]
                    },
                    {
                      "name": "DestructionStarted",
                      "fields": [
                        {
                          "name": "asset_id",
                          "type": 37,
                          "typeName": "T::AssetId"
                        }
                      ],
                      "index": 12,
                      "docs": [
                        "An asset class is in the process of being destroyed."
                      ]
                    },
                    {
                      "name": "Destroyed",
                      "fields": [
                        {
                          "name": "asset_id",
                          "type": 37,
                          "typeName": "T::AssetId"
                        }
                      ],
                      "index": 13,
                      "docs": [
                        "An asset class was destroyed."
                      ]
                    },
                    {
                      "name": "ForceCreated",
                      "fields": [
                        {
                          "name": "asset_id",
                          "type": 37,
                          "typeName": "T::AssetId"
                        },
                        {
                          "name": "owner",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 14,
                      "docs": [
                        "Some asset class was force-created."
                      ]
                    },
                    {
                      "name": "MetadataSet",
                      "fields": [
                        {
                          "name": "asset_id",
                          "type": 37,
                          "typeName": "T::AssetId"
                        },
                        {
                          "name": "name",
                          "type": 14,
                          "typeName": "Vec<u8>"
                        },
                        {
                          "name": "symbol",
                          "type": 14,
                          "typeName": "Vec<u8>"
                        },
                        {
                          "name": "decimals",
                          "type": 2,
                          "typeName": "u8"
                        },
                        {
                          "name": "is_frozen",
                          "type": 8,
                          "typeName": "bool"
                        }
                      ],
                      "index": 15,
                      "docs": [
                        "New metadata has been set for an asset."
                      ]
                    },
                    {
                      "name": "MetadataCleared",
                      "fields": [
                        {
                          "name": "asset_id",
                          "type": 37,
                          "typeName": "T::AssetId"
                        }
                      ],
                      "index": 16,
                      "docs": [
                        "Metadata has been cleared for an asset."
                      ]
                    },
                    {
                      "name": "ApprovedTransfer",
                      "fields": [
                        {
                          "name": "asset_id",
                          "type": 37,
                          "typeName": "T::AssetId"
                        },
                        {
                          "name": "source",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "delegate",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 17,
                      "docs": [
                        "(Additional) funds have been approved for transfer to a destination account."
                      ]
                    },
                    {
                      "name": "ApprovalCancelled",
                      "fields": [
                        {
                          "name": "asset_id",
                          "type": 37,
                          "typeName": "T::AssetId"
                        },
                        {
                          "name": "owner",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "delegate",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 18,
                      "docs": [
                        "An approval for account `delegate` was cancelled by `owner`."
                      ]
                    },
                    {
                      "name": "TransferredApproved",
                      "fields": [
                        {
                          "name": "asset_id",
                          "type": 37,
                          "typeName": "T::AssetId"
                        },
                        {
                          "name": "owner",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "delegate",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "destination",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 19,
                      "docs": [
                        "An `amount` was transferred in its entirety from `owner` to `destination` by",
                        "the approved `delegate`."
                      ]
                    },
                    {
                      "name": "AssetStatusChanged",
                      "fields": [
                        {
                          "name": "asset_id",
                          "type": 37,
                          "typeName": "T::AssetId"
                        }
                      ],
                      "index": 20,
                      "docs": [
                        "An asset has had its attributes changed by the `Force` origin."
                      ]
                    },
                    {
                      "name": "AssetMinBalanceChanged",
                      "fields": [
                        {
                          "name": "asset_id",
                          "type": 37,
                          "typeName": "T::AssetId"
                        },
                        {
                          "name": "new_min_balance",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 21,
                      "docs": [
                        "The min_balance of an asset has been updated by the asset owner."
                      ]
                    },
                    {
                      "name": "Touched",
                      "fields": [
                        {
                          "name": "asset_id",
                          "type": 37,
                          "typeName": "T::AssetId"
                        },
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "depositor",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 22,
                      "docs": [
                        "Some account `who` was created with a deposit from `depositor`."
                      ]
                    },
                    {
                      "name": "Blocked",
                      "fields": [
                        {
                          "name": "asset_id",
                          "type": 37,
                          "typeName": "T::AssetId"
                        },
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 23,
                      "docs": [
                        "Some account `who` was blocked."
                      ]
                    },
                    {
                      "name": "Deposited",
                      "fields": [
                        {
                          "name": "asset_id",
                          "type": 37,
                          "typeName": "T::AssetId"
                        },
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 24,
                      "docs": [
                        "Some assets were deposited (e.g. for transaction fees)."
                      ]
                    },
                    {
                      "name": "Withdrawn",
                      "fields": [
                        {
                          "name": "asset_id",
                          "type": 37,
                          "typeName": "T::AssetId"
                        },
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 25,
                      "docs": [
                        "Some assets were withdrawn from the account (e.g. for transaction fees)."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "The `Event` enum of this pallet"
              ]
            }
          },
          {
            "id": 145,
            "type": {
              "path": [
                "pallet_nft_fractionalization",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "NftFractionalized",
                      "fields": [
                        {
                          "name": "nft_collection",
                          "type": 4,
                          "typeName": "T::NftCollectionId"
                        },
                        {
                          "name": "nft",
                          "type": 4,
                          "typeName": "T::NftId"
                        },
                        {
                          "name": "fractions",
                          "type": 6,
                          "typeName": "AssetBalanceOf<T>"
                        },
                        {
                          "name": "asset",
                          "type": 4,
                          "typeName": "AssetIdOf<T>"
                        },
                        {
                          "name": "beneficiary",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "An NFT was successfully fractionalized."
                      ]
                    },
                    {
                      "name": "NftUnified",
                      "fields": [
                        {
                          "name": "nft_collection",
                          "type": 4,
                          "typeName": "T::NftCollectionId"
                        },
                        {
                          "name": "nft",
                          "type": 4,
                          "typeName": "T::NftId"
                        },
                        {
                          "name": "asset",
                          "type": 4,
                          "typeName": "AssetIdOf<T>"
                        },
                        {
                          "name": "beneficiary",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "An NFT was successfully returned back."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "The `Event` enum of this pallet"
              ]
            }
          },
          {
            "id": 146,
            "type": {
              "path": [
                "pallet_assets",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Created",
                      "fields": [
                        {
                          "name": "asset_id",
                          "type": 4,
                          "typeName": "T::AssetId"
                        },
                        {
                          "name": "creator",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "owner",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Some asset class was created."
                      ]
                    },
                    {
                      "name": "Issued",
                      "fields": [
                        {
                          "name": "asset_id",
                          "type": 4,
                          "typeName": "T::AssetId"
                        },
                        {
                          "name": "owner",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Some assets were issued."
                      ]
                    },
                    {
                      "name": "Transferred",
                      "fields": [
                        {
                          "name": "asset_id",
                          "type": 4,
                          "typeName": "T::AssetId"
                        },
                        {
                          "name": "from",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "to",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Some assets were transferred."
                      ]
                    },
                    {
                      "name": "Burned",
                      "fields": [
                        {
                          "name": "asset_id",
                          "type": 4,
                          "typeName": "T::AssetId"
                        },
                        {
                          "name": "owner",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "balance",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Some assets were destroyed."
                      ]
                    },
                    {
                      "name": "TeamChanged",
                      "fields": [
                        {
                          "name": "asset_id",
                          "type": 4,
                          "typeName": "T::AssetId"
                        },
                        {
                          "name": "issuer",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "admin",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "freezer",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "The management team changed."
                      ]
                    },
                    {
                      "name": "OwnerChanged",
                      "fields": [
                        {
                          "name": "asset_id",
                          "type": 4,
                          "typeName": "T::AssetId"
                        },
                        {
                          "name": "owner",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "The owner changed."
                      ]
                    },
                    {
                      "name": "Frozen",
                      "fields": [
                        {
                          "name": "asset_id",
                          "type": 4,
                          "typeName": "T::AssetId"
                        },
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "Some account `who` was frozen."
                      ]
                    },
                    {
                      "name": "Thawed",
                      "fields": [
                        {
                          "name": "asset_id",
                          "type": 4,
                          "typeName": "T::AssetId"
                        },
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "Some account `who` was thawed."
                      ]
                    },
                    {
                      "name": "AssetFrozen",
                      "fields": [
                        {
                          "name": "asset_id",
                          "type": 4,
                          "typeName": "T::AssetId"
                        }
                      ],
                      "index": 8,
                      "docs": [
                        "Some asset `asset_id` was frozen."
                      ]
                    },
                    {
                      "name": "AssetThawed",
                      "fields": [
                        {
                          "name": "asset_id",
                          "type": 4,
                          "typeName": "T::AssetId"
                        }
                      ],
                      "index": 9,
                      "docs": [
                        "Some asset `asset_id` was thawed."
                      ]
                    },
                    {
                      "name": "AccountsDestroyed",
                      "fields": [
                        {
                          "name": "asset_id",
                          "type": 4,
                          "typeName": "T::AssetId"
                        },
                        {
                          "name": "accounts_destroyed",
                          "type": 4,
                          "typeName": "u32"
                        },
                        {
                          "name": "accounts_remaining",
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 10,
                      "docs": [
                        "Accounts were destroyed for given asset."
                      ]
                    },
                    {
                      "name": "ApprovalsDestroyed",
                      "fields": [
                        {
                          "name": "asset_id",
                          "type": 4,
                          "typeName": "T::AssetId"
                        },
                        {
                          "name": "approvals_destroyed",
                          "type": 4,
                          "typeName": "u32"
                        },
                        {
                          "name": "approvals_remaining",
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 11,
                      "docs": [
                        "Approvals were destroyed for given asset."
                      ]
                    },
                    {
                      "name": "DestructionStarted",
                      "fields": [
                        {
                          "name": "asset_id",
                          "type": 4,
                          "typeName": "T::AssetId"
                        }
                      ],
                      "index": 12,
                      "docs": [
                        "An asset class is in the process of being destroyed."
                      ]
                    },
                    {
                      "name": "Destroyed",
                      "fields": [
                        {
                          "name": "asset_id",
                          "type": 4,
                          "typeName": "T::AssetId"
                        }
                      ],
                      "index": 13,
                      "docs": [
                        "An asset class was destroyed."
                      ]
                    },
                    {
                      "name": "ForceCreated",
                      "fields": [
                        {
                          "name": "asset_id",
                          "type": 4,
                          "typeName": "T::AssetId"
                        },
                        {
                          "name": "owner",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 14,
                      "docs": [
                        "Some asset class was force-created."
                      ]
                    },
                    {
                      "name": "MetadataSet",
                      "fields": [
                        {
                          "name": "asset_id",
                          "type": 4,
                          "typeName": "T::AssetId"
                        },
                        {
                          "name": "name",
                          "type": 14,
                          "typeName": "Vec<u8>"
                        },
                        {
                          "name": "symbol",
                          "type": 14,
                          "typeName": "Vec<u8>"
                        },
                        {
                          "name": "decimals",
                          "type": 2,
                          "typeName": "u8"
                        },
                        {
                          "name": "is_frozen",
                          "type": 8,
                          "typeName": "bool"
                        }
                      ],
                      "index": 15,
                      "docs": [
                        "New metadata has been set for an asset."
                      ]
                    },
                    {
                      "name": "MetadataCleared",
                      "fields": [
                        {
                          "name": "asset_id",
                          "type": 4,
                          "typeName": "T::AssetId"
                        }
                      ],
                      "index": 16,
                      "docs": [
                        "Metadata has been cleared for an asset."
                      ]
                    },
                    {
                      "name": "ApprovedTransfer",
                      "fields": [
                        {
                          "name": "asset_id",
                          "type": 4,
                          "typeName": "T::AssetId"
                        },
                        {
                          "name": "source",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "delegate",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 17,
                      "docs": [
                        "(Additional) funds have been approved for transfer to a destination account."
                      ]
                    },
                    {
                      "name": "ApprovalCancelled",
                      "fields": [
                        {
                          "name": "asset_id",
                          "type": 4,
                          "typeName": "T::AssetId"
                        },
                        {
                          "name": "owner",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "delegate",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 18,
                      "docs": [
                        "An approval for account `delegate` was cancelled by `owner`."
                      ]
                    },
                    {
                      "name": "TransferredApproved",
                      "fields": [
                        {
                          "name": "asset_id",
                          "type": 4,
                          "typeName": "T::AssetId"
                        },
                        {
                          "name": "owner",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "delegate",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "destination",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 19,
                      "docs": [
                        "An `amount` was transferred in its entirety from `owner` to `destination` by",
                        "the approved `delegate`."
                      ]
                    },
                    {
                      "name": "AssetStatusChanged",
                      "fields": [
                        {
                          "name": "asset_id",
                          "type": 4,
                          "typeName": "T::AssetId"
                        }
                      ],
                      "index": 20,
                      "docs": [
                        "An asset has had its attributes changed by the `Force` origin."
                      ]
                    },
                    {
                      "name": "AssetMinBalanceChanged",
                      "fields": [
                        {
                          "name": "asset_id",
                          "type": 4,
                          "typeName": "T::AssetId"
                        },
                        {
                          "name": "new_min_balance",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 21,
                      "docs": [
                        "The min_balance of an asset has been updated by the asset owner."
                      ]
                    },
                    {
                      "name": "Touched",
                      "fields": [
                        {
                          "name": "asset_id",
                          "type": 4,
                          "typeName": "T::AssetId"
                        },
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "depositor",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 22,
                      "docs": [
                        "Some account `who` was created with a deposit from `depositor`."
                      ]
                    },
                    {
                      "name": "Blocked",
                      "fields": [
                        {
                          "name": "asset_id",
                          "type": 4,
                          "typeName": "T::AssetId"
                        },
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 23,
                      "docs": [
                        "Some account `who` was blocked."
                      ]
                    },
                    {
                      "name": "Deposited",
                      "fields": [
                        {
                          "name": "asset_id",
                          "type": 4,
                          "typeName": "T::AssetId"
                        },
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 24,
                      "docs": [
                        "Some assets were deposited (e.g. for transaction fees)."
                      ]
                    },
                    {
                      "name": "Withdrawn",
                      "fields": [
                        {
                          "name": "asset_id",
                          "type": 4,
                          "typeName": "T::AssetId"
                        },
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 25,
                      "docs": [
                        "Some assets were withdrawn from the account (e.g. for transaction fees)."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "The `Event` enum of this pallet"
              ]
            }
          },
          {
            "id": 147,
            "type": {
              "path": [
                "pallet_asset_conversion",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "PoolCreated",
                      "fields": [
                        {
                          "name": "creator",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [
                            "The account that created the pool."
                          ]
                        },
                        {
                          "name": "pool_id",
                          "type": 148,
                          "typeName": "T::PoolId",
                          "docs": [
                            "The pool id associated with the pool. Note that the order of the assets may not be",
                            "the same as the order specified in the create pool extrinsic."
                          ]
                        },
                        {
                          "name": "pool_account",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [
                            "The account ID of the pool."
                          ]
                        },
                        {
                          "name": "lp_token",
                          "type": 4,
                          "typeName": "T::PoolAssetId",
                          "docs": [
                            "The id of the liquidity tokens that will be minted when assets are added to this",
                            "pool."
                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "A successful call of the `CreatePool` extrinsic will create this event."
                      ]
                    },
                    {
                      "name": "LiquidityAdded",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [
                            "The account that the liquidity was taken from."
                          ]
                        },
                        {
                          "name": "mint_to",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [
                            "The account that the liquidity tokens were minted to."
                          ]
                        },
                        {
                          "name": "pool_id",
                          "type": 148,
                          "typeName": "T::PoolId",
                          "docs": [
                            "The pool id of the pool that the liquidity was added to."
                          ]
                        },
                        {
                          "name": "amount1_provided",
                          "type": 6,
                          "typeName": "T::Balance",
                          "docs": [
                            "The amount of the first asset that was added to the pool."
                          ]
                        },
                        {
                          "name": "amount2_provided",
                          "type": 6,
                          "typeName": "T::Balance",
                          "docs": [
                            "The amount of the second asset that was added to the pool."
                          ]
                        },
                        {
                          "name": "lp_token",
                          "type": 4,
                          "typeName": "T::PoolAssetId",
                          "docs": [
                            "The id of the lp token that was minted."
                          ]
                        },
                        {
                          "name": "lp_token_minted",
                          "type": 6,
                          "typeName": "T::Balance",
                          "docs": [
                            "The amount of lp tokens that were minted of that id."
                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "A successful call of the `AddLiquidity` extrinsic will create this event."
                      ]
                    },
                    {
                      "name": "LiquidityRemoved",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [
                            "The account that the liquidity tokens were burned from."
                          ]
                        },
                        {
                          "name": "withdraw_to",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [
                            "The account that the assets were transferred to."
                          ]
                        },
                        {
                          "name": "pool_id",
                          "type": 148,
                          "typeName": "T::PoolId",
                          "docs": [
                            "The pool id that the liquidity was removed from."
                          ]
                        },
                        {
                          "name": "amount1",
                          "type": 6,
                          "typeName": "T::Balance",
                          "docs": [
                            "The amount of the first asset that was removed from the pool."
                          ]
                        },
                        {
                          "name": "amount2",
                          "type": 6,
                          "typeName": "T::Balance",
                          "docs": [
                            "The amount of the second asset that was removed from the pool."
                          ]
                        },
                        {
                          "name": "lp_token",
                          "type": 4,
                          "typeName": "T::PoolAssetId",
                          "docs": [
                            "The id of the lp token that was burned."
                          ]
                        },
                        {
                          "name": "lp_token_burned",
                          "type": 6,
                          "typeName": "T::Balance",
                          "docs": [
                            "The amount of lp tokens that were burned of that id."
                          ]
                        },
                        {
                          "name": "withdrawal_fee",
                          "type": 149,
                          "typeName": "Permill",
                          "docs": [
                            "Liquidity withdrawal fee (%)."
                          ]
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "A successful call of the `RemoveLiquidity` extrinsic will create this event."
                      ]
                    },
                    {
                      "name": "SwapExecuted",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [
                            "Which account was the instigator of the swap."
                          ]
                        },
                        {
                          "name": "send_to",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [
                            "The account that the assets were transferred to."
                          ]
                        },
                        {
                          "name": "amount_in",
                          "type": 6,
                          "typeName": "T::Balance",
                          "docs": [
                            "The amount of the first asset that was swapped."
                          ]
                        },
                        {
                          "name": "amount_out",
                          "type": 6,
                          "typeName": "T::Balance",
                          "docs": [
                            "The amount of the second asset that was received."
                          ]
                        },
                        {
                          "name": "path",
                          "type": 150,
                          "typeName": "BalancePath<T>",
                          "docs": [
                            "The route of asset IDs with amounts that the swap went through.",
                            "E.g. (A, amount_in) -> (Dot, amount_out) -> (B, amount_out)"
                          ]
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Assets have been converted from one to another. Both `SwapExactTokenForToken`",
                        "and `SwapTokenForExactToken` will generate this event."
                      ]
                    },
                    {
                      "name": "SwapCreditExecuted",
                      "fields": [
                        {
                          "name": "amount_in",
                          "type": 6,
                          "typeName": "T::Balance",
                          "docs": [
                            "The amount of the first asset that was swapped."
                          ]
                        },
                        {
                          "name": "amount_out",
                          "type": 6,
                          "typeName": "T::Balance",
                          "docs": [
                            "The amount of the second asset that was received."
                          ]
                        },
                        {
                          "name": "path",
                          "type": 150,
                          "typeName": "BalancePath<T>",
                          "docs": [
                            "The route of asset IDs with amounts that the swap went through.",
                            "E.g. (A, amount_in) -> (Dot, amount_out) -> (B, amount_out)"
                          ]
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Assets have been converted from one to another."
                      ]
                    },
                    {
                      "name": "Touched",
                      "fields": [
                        {
                          "name": "pool_id",
                          "type": 148,
                          "typeName": "T::PoolId",
                          "docs": [
                            "The ID of the pool."
                          ]
                        },
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [
                            "The account initiating the touch."
                          ]
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Pool has been touched in order to fulfill operational requirements."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "The `Event` enum of this pallet"
              ]
            }
          },
          {
            "id": 148,
            "type": {
              "def": {
                "tuple": [
                  37,
                  37
                ]
              }
            }
          },
          {
            "id": 149,
            "type": {
              "path": [
                "sp_arithmetic",
                "per_things",
                "Permill"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 4,
                      "typeName": "u32"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 150,
            "type": {
              "def": {
                "sequence": {
                  "type": 151
                }
              }
            }
          },
          {
            "id": 151,
            "type": {
              "def": {
                "tuple": [
                  37,
                  6
                ]
              }
            }
          },
          {
            "id": 152,
            "type": {
              "path": [
                "pallet_assets_freezer",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Frozen",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "asset_id",
                          "type": 4,
                          "typeName": "T::AssetId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Thawed",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "asset_id",
                          "type": 4,
                          "typeName": "T::AssetId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              },
              "docs": [
                "The `Event` enum of this pallet"
              ]
            }
          },
          {
            "id": 153,
            "type": {
              "path": [
                "pallet_assets_freezer",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Frozen",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "asset_id",
                          "type": 37,
                          "typeName": "T::AssetId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Thawed",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "asset_id",
                          "type": 37,
                          "typeName": "T::AssetId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              },
              "docs": [
                "The `Event` enum of this pallet"
              ]
            }
          },
          {
            "id": 154,
            "type": {
              "path": [
                "pallet_assets_freezer",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Frozen",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "asset_id",
                          "type": 4,
                          "typeName": "T::AssetId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Thawed",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "asset_id",
                          "type": 4,
                          "typeName": "T::AssetId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              },
              "docs": [
                "The `Event` enum of this pallet"
              ]
            }
          },
          {
            "id": 155,
            "type": {
              "path": [
                "pallet_state_trie_migration",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Migrated",
                      "fields": [
                        {
                          "name": "top",
                          "type": 4,
                          "typeName": "u32"
                        },
                        {
                          "name": "child",
                          "type": 4,
                          "typeName": "u32"
                        },
                        {
                          "name": "compute",
                          "type": 156,
                          "typeName": "MigrationCompute"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Given number of `(top, child)` keys were migrated respectively, with the given",
                        "`compute`."
                      ]
                    },
                    {
                      "name": "Slashed",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Some account got slashed by the given amount."
                      ]
                    },
                    {
                      "name": "AutoMigrationFinished",
                      "index": 2,
                      "docs": [
                        "The auto migration task finished."
                      ]
                    },
                    {
                      "name": "Halted",
                      "fields": [
                        {
                          "name": "error",
                          "type": 157,
                          "typeName": "Error<T>"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Migration got halted due to an error or miss-configuration."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Inner events of this pallet."
              ]
            }
          },
          {
            "id": 156,
            "type": {
              "path": [
                "pallet_state_trie_migration",
                "pallet",
                "MigrationCompute"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Signed",
                      "index": 0
                    },
                    {
                      "name": "Auto",
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 157,
            "type": {
              "path": [
                "pallet_state_trie_migration",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "MaxSignedLimits",
                      "index": 0,
                      "docs": [
                        "Max signed limits not respected."
                      ]
                    },
                    {
                      "name": "KeyTooLong",
                      "index": 1,
                      "docs": [
                        "A key was longer than the configured maximum.",
                        "",
                        "This means that the migration halted at the current [`Progress`] and",
                        "can be resumed with a larger [`crate::Config::MaxKeyLen`] value.",
                        "Retrying with the same [`crate::Config::MaxKeyLen`] value will not work.",
                        "The value should only be increased to avoid a storage migration for the currently",
                        "stored [`crate::Progress::LastKey`]."
                      ]
                    },
                    {
                      "name": "NotEnoughFunds",
                      "index": 2,
                      "docs": [
                        "submitter does not have enough funds."
                      ]
                    },
                    {
                      "name": "BadWitness",
                      "index": 3,
                      "docs": [
                        "Bad witness data provided."
                      ]
                    },
                    {
                      "name": "SignedMigrationNotAllowed",
                      "index": 4,
                      "docs": [
                        "Signed migration is not allowed because the maximum limit is not set yet."
                      ]
                    },
                    {
                      "name": "BadChildRoot",
                      "index": 5,
                      "docs": [
                        "Bad child root provided."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "The `Error` enum of this pallet."
              ]
            }
          },
          {
            "id": 158,
            "type": {
              "path": [
                "pallet_asset_conversion_ops",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "MigratedToNewAccount",
                      "fields": [
                        {
                          "name": "pool_id",
                          "type": 148,
                          "typeName": "T::PoolId",
                          "docs": [
                            "Pool's ID."
                          ]
                        },
                        {
                          "name": "prior_account",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [
                            "Pool's prior account ID."
                          ]
                        },
                        {
                          "name": "new_account",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [
                            "Pool's new account ID."
                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Indicates that a pool has been migrated to the new account ID."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "The `Event` enum of this pallet"
              ]
            }
          },
          {
            "id": 159,
            "type": {
              "path": [
                "frame_system",
                "Phase"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "ApplyExtrinsic",
                      "fields": [
                        {
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Finalization",
                      "index": 1
                    },
                    {
                      "name": "Initialization",
                      "index": 2
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 160,
            "type": {
              "def": {
                "sequence": {
                  "type": 13
                }
              }
            }
          },
          {
            "id": 161,
            "type": {
              "def": {
                "sequence": {
                  "type": 162
                }
              }
            }
          },
          {
            "id": 162,
            "type": {
              "def": {
                "tuple": [
                  4,
                  4
                ]
              }
            }
          },
          {
            "id": 163,
            "type": {
              "path": [
                "frame_system",
                "LastRuntimeUpgradeInfo"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "spec_version",
                      "type": 40,
                      "typeName": "codec::Compact<u32>"
                    },
                    {
                      "name": "spec_name",
                      "type": 164,
                      "typeName": "sp_runtime::RuntimeString"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 164,
            "type": {
              "def": {
                "primitive": "str"
              }
            }
          },
          {
            "id": 165,
            "type": {
              "path": [
                "frame_system",
                "CodeUpgradeAuthorization"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "code_hash",
                      "type": 13,
                      "typeName": "T::Hash"
                    },
                    {
                      "name": "check_version",
                      "type": 8,
                      "typeName": "bool"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 166,
            "type": {
              "path": [
                "frame_system",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "remark",
                      "fields": [
                        {
                          "name": "remark",
                          "type": 14,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Make some on-chain remark.",
                        "",
                        "Can be executed by every `origin`."
                      ]
                    },
                    {
                      "name": "set_heap_pages",
                      "fields": [
                        {
                          "name": "pages",
                          "type": 12,
                          "typeName": "u64"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Set the number of pages in the WebAssembly environment's heap."
                      ]
                    },
                    {
                      "name": "set_code",
                      "fields": [
                        {
                          "name": "code",
                          "type": 14,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Set the new runtime code."
                      ]
                    },
                    {
                      "name": "set_code_without_checks",
                      "fields": [
                        {
                          "name": "code",
                          "type": 14,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Set the new runtime code without doing any checks of the given `code`.",
                        "",
                        "Note that runtime upgrades will not run if this is called with a not-increasing spec",
                        "version!"
                      ]
                    },
                    {
                      "name": "set_storage",
                      "fields": [
                        {
                          "name": "items",
                          "type": 167,
                          "typeName": "Vec<KeyValue>"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Set some items of storage."
                      ]
                    },
                    {
                      "name": "kill_storage",
                      "fields": [
                        {
                          "name": "keys",
                          "type": 169,
                          "typeName": "Vec<Key>"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Kill some items from storage."
                      ]
                    },
                    {
                      "name": "kill_prefix",
                      "fields": [
                        {
                          "name": "prefix",
                          "type": 14,
                          "typeName": "Key"
                        },
                        {
                          "name": "subkeys",
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "Kill all storage items with a key that starts with the given prefix.",
                        "",
                        "**NOTE:** We rely on the Root origin to provide us the number of subkeys under",
                        "the prefix we are removing to accurately calculate the weight of this function."
                      ]
                    },
                    {
                      "name": "remark_with_event",
                      "fields": [
                        {
                          "name": "remark",
                          "type": 14,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "Make some on-chain remark and emit event."
                      ]
                    },
                    {
                      "name": "authorize_upgrade",
                      "fields": [
                        {
                          "name": "code_hash",
                          "type": 13,
                          "typeName": "T::Hash"
                        }
                      ],
                      "index": 9,
                      "docs": [
                        "Authorize an upgrade to a given `code_hash` for the runtime. The runtime can be supplied",
                        "later.",
                        "",
                        "This call requires Root origin."
                      ]
                    },
                    {
                      "name": "authorize_upgrade_without_checks",
                      "fields": [
                        {
                          "name": "code_hash",
                          "type": 13,
                          "typeName": "T::Hash"
                        }
                      ],
                      "index": 10,
                      "docs": [
                        "Authorize an upgrade to a given `code_hash` for the runtime. The runtime can be supplied",
                        "later.",
                        "",
                        "WARNING: This authorizes an upgrade that will take place without any safety checks, for",
                        "example that the spec name remains the same and that the version number increases. Not",
                        "recommended for normal use. Use `authorize_upgrade` instead.",
                        "",
                        "This call requires Root origin."
                      ]
                    },
                    {
                      "name": "apply_authorized_upgrade",
                      "fields": [
                        {
                          "name": "code",
                          "type": 14,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 11,
                      "docs": [
                        "Provide the preimage (runtime binary) `code` for an upgrade that has been authorized.",
                        "",
                        "If the authorization required a version check, this call will ensure the spec name",
                        "remains unchanged and that the spec version has increased.",
                        "",
                        "Depending on the runtime's `OnSetCode` configuration, this function may directly apply",
                        "the new `code` in the same block or attempt to schedule the upgrade.",
                        "",
                        "All origins are allowed."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains a variant per dispatchable extrinsic that this pallet has."
              ]
            }
          },
          {
            "id": 167,
            "type": {
              "def": {
                "sequence": {
                  "type": 168
                }
              }
            }
          },
          {
            "id": 168,
            "type": {
              "def": {
                "tuple": [
                  14,
                  14
                ]
              }
            }
          },
          {
            "id": 169,
            "type": {
              "def": {
                "sequence": {
                  "type": 14
                }
              }
            }
          },
          {
            "id": 170,
            "type": {
              "path": [
                "frame_system",
                "limits",
                "BlockWeights"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "base_block",
                      "type": 10,
                      "typeName": "Weight"
                    },
                    {
                      "name": "max_block",
                      "type": 10,
                      "typeName": "Weight"
                    },
                    {
                      "name": "per_class",
                      "type": 171,
                      "typeName": "PerDispatchClass<WeightsPerClass>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 171,
            "type": {
              "path": [
                "frame_support",
                "dispatch",
                "PerDispatchClass"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 172
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "normal",
                      "type": 172,
                      "typeName": "T"
                    },
                    {
                      "name": "operational",
                      "type": 172,
                      "typeName": "T"
                    },
                    {
                      "name": "mandatory",
                      "type": 172,
                      "typeName": "T"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 172,
            "type": {
              "path": [
                "frame_system",
                "limits",
                "WeightsPerClass"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "base_extrinsic",
                      "type": 10,
                      "typeName": "Weight"
                    },
                    {
                      "name": "max_extrinsic",
                      "type": 173,
                      "typeName": "Option<Weight>"
                    },
                    {
                      "name": "max_total",
                      "type": 173,
                      "typeName": "Option<Weight>"
                    },
                    {
                      "name": "reserved",
                      "type": 173,
                      "typeName": "Option<Weight>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 173,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 10
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 10
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 174,
            "type": {
              "path": [
                "frame_system",
                "limits",
                "BlockLength"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "max",
                      "type": 175,
                      "typeName": "PerDispatchClass<u32>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 175,
            "type": {
              "path": [
                "frame_support",
                "dispatch",
                "PerDispatchClass"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 4
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "normal",
                      "type": 4,
                      "typeName": "T"
                    },
                    {
                      "name": "operational",
                      "type": 4,
                      "typeName": "T"
                    },
                    {
                      "name": "mandatory",
                      "type": 4,
                      "typeName": "T"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 176,
            "type": {
              "path": [
                "sp_weights",
                "RuntimeDbWeight"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "read",
                      "type": 12,
                      "typeName": "u64"
                    },
                    {
                      "name": "write",
                      "type": 12,
                      "typeName": "u64"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 177,
            "type": {
              "path": [
                "sp_version",
                "RuntimeVersion"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "spec_name",
                      "type": 164,
                      "typeName": "RuntimeString"
                    },
                    {
                      "name": "impl_name",
                      "type": 164,
                      "typeName": "RuntimeString"
                    },
                    {
                      "name": "authoring_version",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "spec_version",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "impl_version",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "apis",
                      "type": 178,
                      "typeName": "ApisVec"
                    },
                    {
                      "name": "transaction_version",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "state_version",
                      "type": 2,
                      "typeName": "u8"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 178,
            "type": {
              "path": [
                "Cow"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 179
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 179
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 179,
            "type": {
              "def": {
                "sequence": {
                  "type": 180
                }
              }
            }
          },
          {
            "id": 180,
            "type": {
              "def": {
                "tuple": [
                  76,
                  4
                ]
              }
            }
          },
          {
            "id": 181,
            "type": {
              "path": [
                "frame_system",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "InvalidSpecName",
                      "index": 0,
                      "docs": [
                        "The name of specification does not match between the current runtime",
                        "and the new runtime."
                      ]
                    },
                    {
                      "name": "SpecVersionNeedsToIncrease",
                      "index": 1,
                      "docs": [
                        "The specification version is not allowed to decrease between the current runtime",
                        "and the new runtime."
                      ]
                    },
                    {
                      "name": "FailedToExtractRuntimeVersion",
                      "index": 2,
                      "docs": [
                        "Failed to extract the runtime version from the new runtime.",
                        "",
                        "Either calling `Core_version` or decoding `RuntimeVersion` failed."
                      ]
                    },
                    {
                      "name": "NonDefaultComposite",
                      "index": 3,
                      "docs": [
                        "Suicide called when the account has non-default composite data."
                      ]
                    },
                    {
                      "name": "NonZeroRefCount",
                      "index": 4,
                      "docs": [
                        "There is a non-zero reference count preventing the account from being purged."
                      ]
                    },
                    {
                      "name": "CallFiltered",
                      "index": 5,
                      "docs": [
                        "The origin filter prevent the call to be dispatched."
                      ]
                    },
                    {
                      "name": "MultiBlockMigrationsOngoing",
                      "index": 6,
                      "docs": [
                        "A multi-block migration is ongoing and prevents the current code from being replaced."
                      ]
                    },
                    {
                      "name": "NothingAuthorized",
                      "index": 7,
                      "docs": [
                        "No upgrade authorized."
                      ]
                    },
                    {
                      "name": "Unauthorized",
                      "index": 8,
                      "docs": [
                        "The submitted code is not authorized."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Error for the System pallet"
              ]
            }
          },
          {
            "id": 182,
            "type": {
              "def": {
                "sequence": {
                  "type": 183
                }
              }
            }
          },
          {
            "id": 183,
            "type": {
              "path": [
                "cumulus_pallet_parachain_system",
                "unincluded_segment",
                "Ancestor"
              ],
              "params": [
                {
                  "name": "H",
                  "type": 13
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "used_bandwidth",
                      "type": 184,
                      "typeName": "UsedBandwidth"
                    },
                    {
                      "name": "para_head_hash",
                      "type": 189,
                      "typeName": "Option<H>"
                    },
                    {
                      "name": "consumed_go_ahead_signal",
                      "type": 190,
                      "typeName": "Option<relay_chain::UpgradeGoAhead>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 184,
            "type": {
              "path": [
                "cumulus_pallet_parachain_system",
                "unincluded_segment",
                "UsedBandwidth"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "ump_msg_count",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "ump_total_bytes",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "hrmp_outgoing",
                      "type": 185,
                      "typeName": "BTreeMap<ParaId, HrmpChannelUpdate>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 185,
            "type": {
              "path": [
                "BTreeMap"
              ],
              "params": [
                {
                  "name": "K",
                  "type": 119
                },
                {
                  "name": "V",
                  "type": 186
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 187
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 186,
            "type": {
              "path": [
                "cumulus_pallet_parachain_system",
                "unincluded_segment",
                "HrmpChannelUpdate"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "msg_count",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "total_bytes",
                      "type": 4,
                      "typeName": "u32"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 187,
            "type": {
              "def": {
                "sequence": {
                  "type": 188
                }
              }
            }
          },
          {
            "id": 188,
            "type": {
              "def": {
                "tuple": [
                  119,
                  186
                ]
              }
            }
          },
          {
            "id": 189,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 13
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 13
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 190,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 191
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 191
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 191,
            "type": {
              "path": [
                "polkadot_primitives",
                "v7",
                "UpgradeGoAhead"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Abort",
                      "index": 0
                    },
                    {
                      "name": "GoAhead",
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 192,
            "type": {
              "path": [
                "cumulus_pallet_parachain_system",
                "unincluded_segment",
                "SegmentTracker"
              ],
              "params": [
                {
                  "name": "H",
                  "type": 13
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "used_bandwidth",
                      "type": 184,
                      "typeName": "UsedBandwidth"
                    },
                    {
                      "name": "hrmp_watermark",
                      "type": 133,
                      "typeName": "Option<relay_chain::BlockNumber>"
                    },
                    {
                      "name": "consumed_go_ahead_signal",
                      "type": 190,
                      "typeName": "Option<relay_chain::UpgradeGoAhead>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 193,
            "type": {
              "path": [
                "polkadot_primitives",
                "v7",
                "PersistedValidationData"
              ],
              "params": [
                {
                  "name": "H",
                  "type": 13
                },
                {
                  "name": "N",
                  "type": 4
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "parent_head",
                      "type": 194,
                      "typeName": "HeadData"
                    },
                    {
                      "name": "relay_parent_number",
                      "type": 4,
                      "typeName": "N"
                    },
                    {
                      "name": "relay_parent_storage_root",
                      "type": 13,
                      "typeName": "H"
                    },
                    {
                      "name": "max_pov_size",
                      "type": 4,
                      "typeName": "u32"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 194,
            "type": {
              "path": [
                "polkadot_parachain_primitives",
                "primitives",
                "HeadData"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 14,
                      "typeName": "Vec<u8>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 195,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 196
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 196
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 196,
            "type": {
              "path": [
                "polkadot_primitives",
                "v7",
                "UpgradeRestriction"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Present",
                      "index": 0
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 197,
            "type": {
              "path": [
                "sp_trie",
                "storage_proof",
                "StorageProof"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "trie_nodes",
                      "type": 198,
                      "typeName": "BTreeSet<Vec<u8>>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 198,
            "type": {
              "path": [
                "BTreeSet"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 14
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 169
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 199,
            "type": {
              "path": [
                "cumulus_pallet_parachain_system",
                "relay_state_snapshot",
                "MessagingStateSnapshot"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "dmq_mqc_head",
                      "type": 13,
                      "typeName": "relay_chain::Hash"
                    },
                    {
                      "name": "relay_dispatch_queue_remaining_capacity",
                      "type": 200,
                      "typeName": "RelayDispatchQueueRemainingCapacity"
                    },
                    {
                      "name": "ingress_channels",
                      "type": 201,
                      "typeName": "Vec<(ParaId, AbridgedHrmpChannel)>"
                    },
                    {
                      "name": "egress_channels",
                      "type": 201,
                      "typeName": "Vec<(ParaId, AbridgedHrmpChannel)>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 200,
            "type": {
              "path": [
                "cumulus_pallet_parachain_system",
                "relay_state_snapshot",
                "RelayDispatchQueueRemainingCapacity"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "remaining_count",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "remaining_size",
                      "type": 4,
                      "typeName": "u32"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 201,
            "type": {
              "def": {
                "sequence": {
                  "type": 202
                }
              }
            }
          },
          {
            "id": 202,
            "type": {
              "def": {
                "tuple": [
                  119,
                  203
                ]
              }
            }
          },
          {
            "id": 203,
            "type": {
              "path": [
                "polkadot_primitives",
                "v7",
                "AbridgedHrmpChannel"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "max_capacity",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "max_total_size",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "max_message_size",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "msg_count",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "total_size",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "mqc_head",
                      "type": 189,
                      "typeName": "Option<Hash>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 204,
            "type": {
              "path": [
                "polkadot_primitives",
                "v7",
                "AbridgedHostConfiguration"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "max_code_size",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "max_head_data_size",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "max_upward_queue_count",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "max_upward_queue_size",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "max_upward_message_size",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "max_upward_message_num_per_candidate",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "hrmp_max_message_num_per_candidate",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "validation_upgrade_cooldown",
                      "type": 4,
                      "typeName": "BlockNumber"
                    },
                    {
                      "name": "validation_upgrade_delay",
                      "type": 4,
                      "typeName": "BlockNumber"
                    },
                    {
                      "name": "async_backing_params",
                      "type": 205,
                      "typeName": "AsyncBackingParams"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 205,
            "type": {
              "path": [
                "polkadot_primitives",
                "v7",
                "async_backing",
                "AsyncBackingParams"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "max_candidate_depth",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "allowed_ancestry_len",
                      "type": 4,
                      "typeName": "u32"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 206,
            "type": {
              "path": [
                "cumulus_primitives_parachain_inherent",
                "MessageQueueChain"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 13,
                      "typeName": "RelayHash"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 207,
            "type": {
              "path": [
                "BTreeMap"
              ],
              "params": [
                {
                  "name": "K",
                  "type": 119
                },
                {
                  "name": "V",
                  "type": 206
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 208
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 208,
            "type": {
              "def": {
                "sequence": {
                  "type": 209
                }
              }
            }
          },
          {
            "id": 209,
            "type": {
              "def": {
                "tuple": [
                  119,
                  206
                ]
              }
            }
          },
          {
            "id": 210,
            "type": {
              "def": {
                "sequence": {
                  "type": 211
                }
              }
            }
          },
          {
            "id": 211,
            "type": {
              "path": [
                "polkadot_core_primitives",
                "OutboundHrmpMessage"
              ],
              "params": [
                {
                  "name": "Id",
                  "type": 119
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "recipient",
                      "type": 119,
                      "typeName": "Id"
                    },
                    {
                      "name": "data",
                      "type": 14,
                      "typeName": "sp_std::vec::Vec<u8>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 212,
            "type": {
              "path": [
                "sp_arithmetic",
                "fixed_point",
                "FixedU128"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 6,
                      "typeName": "u128"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 213,
            "type": {
              "path": [
                "cumulus_pallet_parachain_system",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "set_validation_data",
                      "fields": [
                        {
                          "name": "data",
                          "type": 214,
                          "typeName": "ParachainInherentData"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Set the current validation data.",
                        "",
                        "This should be invoked exactly once per block. It will panic at the finalization",
                        "phase if the call was not invoked.",
                        "",
                        "The dispatch origin for this call must be `Inherent`",
                        "",
                        "As a side effect, this function upgrades the current validation function",
                        "if the appropriate time has come."
                      ]
                    },
                    {
                      "name": "sudo_send_upward_message",
                      "fields": [
                        {
                          "name": "message",
                          "type": 14,
                          "typeName": "UpwardMessage"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "authorize_upgrade",
                      "fields": [
                        {
                          "name": "code_hash",
                          "type": 13,
                          "typeName": "T::Hash"
                        },
                        {
                          "name": "check_version",
                          "type": 8,
                          "typeName": "bool"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Authorize an upgrade to a given `code_hash` for the runtime. The runtime can be supplied",
                        "later.",
                        "",
                        "The `check_version` parameter sets a boolean flag for whether or not the runtime's spec",
                        "version and name should be verified on upgrade. Since the authorization only has a hash,",
                        "it cannot actually perform the verification.",
                        "",
                        "This call requires Root origin."
                      ]
                    },
                    {
                      "name": "enact_authorized_upgrade",
                      "fields": [
                        {
                          "name": "code",
                          "type": 14,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Provide the preimage (runtime binary) `code` for an upgrade that has been authorized.",
                        "",
                        "If the authorization required a version check, this call will ensure the spec name",
                        "remains unchanged and that the spec version has increased.",
                        "",
                        "Note that this function will not apply the new `code`, but only attempt to schedule the",
                        "upgrade with the Relay Chain.",
                        "",
                        "All origins are allowed."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains a variant per dispatchable extrinsic that this pallet has."
              ]
            }
          },
          {
            "id": 214,
            "type": {
              "path": [
                "cumulus_primitives_parachain_inherent",
                "ParachainInherentData"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "validation_data",
                      "type": 193,
                      "typeName": "PersistedValidationData"
                    },
                    {
                      "name": "relay_chain_state",
                      "type": 197,
                      "typeName": "sp_trie::StorageProof"
                    },
                    {
                      "name": "downward_messages",
                      "type": 215,
                      "typeName": "Vec<InboundDownwardMessage>"
                    },
                    {
                      "name": "horizontal_messages",
                      "type": 217,
                      "typeName": "BTreeMap<ParaId, Vec<InboundHrmpMessage>>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 215,
            "type": {
              "def": {
                "sequence": {
                  "type": 216
                }
              }
            }
          },
          {
            "id": 216,
            "type": {
              "path": [
                "polkadot_core_primitives",
                "InboundDownwardMessage"
              ],
              "params": [
                {
                  "name": "BlockNumber",
                  "type": 4
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "sent_at",
                      "type": 4,
                      "typeName": "BlockNumber"
                    },
                    {
                      "name": "msg",
                      "type": 14,
                      "typeName": "DownwardMessage"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 217,
            "type": {
              "path": [
                "BTreeMap"
              ],
              "params": [
                {
                  "name": "K",
                  "type": 119
                },
                {
                  "name": "V",
                  "type": 218
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 220
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 218,
            "type": {
              "def": {
                "sequence": {
                  "type": 219
                }
              }
            }
          },
          {
            "id": 219,
            "type": {
              "path": [
                "polkadot_core_primitives",
                "InboundHrmpMessage"
              ],
              "params": [
                {
                  "name": "BlockNumber",
                  "type": 4
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "sent_at",
                      "type": 4,
                      "typeName": "BlockNumber"
                    },
                    {
                      "name": "data",
                      "type": 14,
                      "typeName": "sp_std::vec::Vec<u8>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 220,
            "type": {
              "def": {
                "sequence": {
                  "type": 221
                }
              }
            }
          },
          {
            "id": 221,
            "type": {
              "def": {
                "tuple": [
                  119,
                  218
                ]
              }
            }
          },
          {
            "id": 222,
            "type": {
              "path": [
                "cumulus_pallet_parachain_system",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "OverlappingUpgrades",
                      "index": 0,
                      "docs": [
                        "Attempt to upgrade validation function while existing upgrade pending."
                      ]
                    },
                    {
                      "name": "ProhibitedByPolkadot",
                      "index": 1,
                      "docs": [
                        "Polkadot currently prohibits this parachain from upgrading its validation function."
                      ]
                    },
                    {
                      "name": "TooBig",
                      "index": 2,
                      "docs": [
                        "The supplied validation function has compiled into a blob larger than Polkadot is",
                        "willing to run."
                      ]
                    },
                    {
                      "name": "ValidationDataNotAvailable",
                      "index": 3,
                      "docs": [
                        "The inherent which supplies the validation data did not run this block."
                      ]
                    },
                    {
                      "name": "HostConfigurationNotAvailable",
                      "index": 4,
                      "docs": [
                        "The inherent which supplies the host configuration did not run this block."
                      ]
                    },
                    {
                      "name": "NotScheduled",
                      "index": 5,
                      "docs": [
                        "No validation function upgrade is currently scheduled."
                      ]
                    },
                    {
                      "name": "NothingAuthorized",
                      "index": 6,
                      "docs": [
                        "No code upgrade has been authorized."
                      ]
                    },
                    {
                      "name": "Unauthorized",
                      "index": 7,
                      "docs": [
                        "The given code upgrade has not been authorized."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "The `Error` enum of this pallet."
              ]
            }
          },
          {
            "id": 223,
            "type": {
              "path": [
                "pallet_timestamp",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "set",
                      "fields": [
                        {
                          "name": "now",
                          "type": 11,
                          "typeName": "T::Moment"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Set the current time.",
                        "",
                        "This call should be invoked exactly once per block. It will panic at the finalization",
                        "phase, if this call hasn't been invoked by that time.",
                        "",
                        "The timestamp should be greater than the previous one by the amount specified by",
                        "[`Config::MinimumPeriod`].",
                        "",
                        "The dispatch origin for this call must be _None_.",
                        "",
                        "This dispatch class is _Mandatory_ to ensure it gets executed in the block. Be aware",
                        "that changing the complexity of this call could result exhausting the resources in a",
                        "block to execute any other calls.",
                        "",
                        "## Complexity",
                        "- `O(1)` (Note that implementations of `OnTimestampSet` must also be `O(1)`)",
                        "- 1 storage read and 1 storage mutation (codec `O(1)` because of `DidUpdate::take` in",
                        "  `on_finalize`)",
                        "- 1 event handler `on_timestamp_set`. Must be `O(1)`."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains a variant per dispatchable extrinsic that this pallet has."
              ]
            }
          },
          {
            "id": 224,
            "type": {
              "path": [
                "staging_parachain_info",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {}
              },
              "docs": [
                "Contains a variant per dispatchable extrinsic that this pallet has."
              ]
            }
          },
          {
            "id": 225,
            "type": {
              "path": [
                "bounded_collections",
                "weak_bounded_vec",
                "WeakBoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 226
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 228,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 226,
            "type": {
              "path": [
                "pallet_balances",
                "types",
                "BalanceLock"
              ],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "id",
                      "type": 76,
                      "typeName": "LockIdentifier"
                    },
                    {
                      "name": "amount",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "reasons",
                      "type": 227,
                      "typeName": "Reasons"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 227,
            "type": {
              "path": [
                "pallet_balances",
                "types",
                "Reasons"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Fee",
                      "index": 0
                    },
                    {
                      "name": "Misc",
                      "index": 1
                    },
                    {
                      "name": "All",
                      "index": 2
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 228,
            "type": {
              "def": {
                "sequence": {
                  "type": 226
                }
              }
            }
          },
          {
            "id": 229,
            "type": {
              "path": [
                "bounded_collections",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 230
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 231,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 230,
            "type": {
              "path": [
                "pallet_balances",
                "types",
                "ReserveData"
              ],
              "params": [
                {
                  "name": "ReserveIdentifier",
                  "type": 76
                },
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "id",
                      "type": 76,
                      "typeName": "ReserveIdentifier"
                    },
                    {
                      "name": "amount",
                      "type": 6,
                      "typeName": "Balance"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 231,
            "type": {
              "def": {
                "sequence": {
                  "type": 230
                }
              }
            }
          },
          {
            "id": 232,
            "type": {
              "path": [
                "bounded_collections",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 233
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 237,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 233,
            "type": {
              "path": [
                "frame_support",
                "traits",
                "tokens",
                "misc",
                "IdAmount"
              ],
              "params": [
                {
                  "name": "Id",
                  "type": 234
                },
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "id",
                      "type": 234,
                      "typeName": "Id"
                    },
                    {
                      "name": "amount",
                      "type": 6,
                      "typeName": "Balance"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 234,
            "type": {
              "path": [
                "asset_hub_westend_runtime",
                "RuntimeHoldReason"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "NftFractionalization",
                      "fields": [
                        {
                          "type": 235,
                          "typeName": "pallet_nft_fractionalization::HoldReason"
                        }
                      ],
                      "index": 54
                    },
                    {
                      "name": "StateTrieMigration",
                      "fields": [
                        {
                          "type": 236,
                          "typeName": "pallet_state_trie_migration::HoldReason"
                        }
                      ],
                      "index": 70
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 235,
            "type": {
              "path": [
                "pallet_nft_fractionalization",
                "pallet",
                "HoldReason"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Fractionalized",
                      "index": 0
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 236,
            "type": {
              "path": [
                "pallet_state_trie_migration",
                "pallet",
                "HoldReason"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "SlashForMigrate",
                      "index": 0
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 237,
            "type": {
              "def": {
                "sequence": {
                  "type": 233
                }
              }
            }
          },
          {
            "id": 238,
            "type": {
              "path": [
                "bounded_collections",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 239
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 240,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 239,
            "type": {
              "path": [
                "frame_support",
                "traits",
                "tokens",
                "misc",
                "IdAmount"
              ],
              "params": [
                {
                  "name": "Id",
                  "type": 123
                },
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "id",
                      "type": 123,
                      "typeName": "Id"
                    },
                    {
                      "name": "amount",
                      "type": 6,
                      "typeName": "Balance"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 240,
            "type": {
              "def": {
                "sequence": {
                  "type": 239
                }
              }
            }
          },
          {
            "id": 241,
            "type": {
              "path": [
                "pallet_balances",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "transfer_allow_death",
                      "fields": [
                        {
                          "name": "dest",
                          "type": 242,
                          "typeName": "AccountIdLookupOf<T>"
                        },
                        {
                          "name": "value",
                          "type": 44,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Transfer some liquid free balance to another account.",
                        "",
                        "`transfer_allow_death` will set the `FreeBalance` of the sender and receiver.",
                        "If the sender's account is below the existential deposit as a result",
                        "of the transfer, the account will be reaped.",
                        "",
                        "The dispatch origin for this call must be `Signed` by the transactor."
                      ]
                    },
                    {
                      "name": "force_transfer",
                      "fields": [
                        {
                          "name": "source",
                          "type": 242,
                          "typeName": "AccountIdLookupOf<T>"
                        },
                        {
                          "name": "dest",
                          "type": 242,
                          "typeName": "AccountIdLookupOf<T>"
                        },
                        {
                          "name": "value",
                          "type": 44,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Exactly as `transfer_allow_death`, except the origin must be root and the source account",
                        "may be specified."
                      ]
                    },
                    {
                      "name": "transfer_keep_alive",
                      "fields": [
                        {
                          "name": "dest",
                          "type": 242,
                          "typeName": "AccountIdLookupOf<T>"
                        },
                        {
                          "name": "value",
                          "type": 44,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Same as the [`transfer_allow_death`] call, but with a check that the transfer will not",
                        "kill the origin account.",
                        "",
                        "99% of the time you want [`transfer_allow_death`] instead.",
                        "",
                        "[`transfer_allow_death`]: struct.Pallet.html#method.transfer"
                      ]
                    },
                    {
                      "name": "transfer_all",
                      "fields": [
                        {
                          "name": "dest",
                          "type": 242,
                          "typeName": "AccountIdLookupOf<T>"
                        },
                        {
                          "name": "keep_alive",
                          "type": 8,
                          "typeName": "bool"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Transfer the entire transferable balance from the caller account.",
                        "",
                        "NOTE: This function only attempts to transfer _transferable_ balances. This means that",
                        "any locked, reserved, or existential deposits (when `keep_alive` is `true`), will not be",
                        "transferred by this function. To ensure that this function results in a killed account,",
                        "you might need to prepare the account by removing any reference counters, storage",
                        "deposits, etc...",
                        "",
                        "The dispatch origin of this call must be Signed.",
                        "",
                        "- `dest`: The recipient of the transfer.",
                        "- `keep_alive`: A boolean to determine if the `transfer_all` operation should send all",
                        "  of the funds the account has, causing the sender account to be killed (false), or",
                        "  transfer everything except at least the existential deposit, which will guarantee to",
                        "  keep the sender account alive (true)."
                      ]
                    },
                    {
                      "name": "force_unreserve",
                      "fields": [
                        {
                          "name": "who",
                          "type": 242,
                          "typeName": "AccountIdLookupOf<T>"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Unreserve some balance from a user by force.",
                        "",
                        "Can only be called by ROOT."
                      ]
                    },
                    {
                      "name": "upgrade_accounts",
                      "fields": [
                        {
                          "name": "who",
                          "type": 48,
                          "typeName": "Vec<T::AccountId>"
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "Upgrade a specified account.",
                        "",
                        "- `origin`: Must be `Signed`.",
                        "- `who`: The account to be upgraded.",
                        "",
                        "This will waive the transaction fee if at least all but 10% of the accounts needed to",
                        "be upgraded. (We let some not have to be upgraded just in order to allow for the",
                        "possibility of churn)."
                      ]
                    },
                    {
                      "name": "force_set_balance",
                      "fields": [
                        {
                          "name": "who",
                          "type": 242,
                          "typeName": "AccountIdLookupOf<T>"
                        },
                        {
                          "name": "new_free",
                          "type": 44,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 8,
                      "docs": [
                        "Set the regular balance of a given account.",
                        "",
                        "The dispatch origin for this call is `root`."
                      ]
                    },
                    {
                      "name": "force_adjust_total_issuance",
                      "fields": [
                        {
                          "name": "direction",
                          "type": 244,
                          "typeName": "AdjustmentDirection"
                        },
                        {
                          "name": "delta",
                          "type": 44,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 9,
                      "docs": [
                        "Adjust the total issuance in a saturating way.",
                        "",
                        "Can only be called by root and always needs a positive `delta`.",
                        "",
                        "# Example"
                      ]
                    },
                    {
                      "name": "burn",
                      "fields": [
                        {
                          "name": "value",
                          "type": 44,
                          "typeName": "T::Balance"
                        },
                        {
                          "name": "keep_alive",
                          "type": 8,
                          "typeName": "bool"
                        }
                      ],
                      "index": 10,
                      "docs": [
                        "Burn the specified liquid free balance from the origin account.",
                        "",
                        "If the origin's account ends up below the existential deposit as a result",
                        "of the burn and `keep_alive` is false, the account will be reaped.",
                        "",
                        "Unlike sending funds to a _burn_ address, which merely makes the funds inaccessible,",
                        "this `burn` operation will reduce total issuance by the amount _burned_."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains a variant per dispatchable extrinsic that this pallet has."
              ]
            }
          },
          {
            "id": 242,
            "type": {
              "path": [
                "sp_runtime",
                "multiaddress",
                "MultiAddress"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "AccountIndex",
                  "type": 123
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Id",
                      "fields": [
                        {
                          "type": 0,
                          "typeName": "AccountId"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Index",
                      "fields": [
                        {
                          "type": 243,
                          "typeName": "AccountIndex"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "Raw",
                      "fields": [
                        {
                          "type": 14,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "Address32",
                      "fields": [
                        {
                          "type": 1,
                          "typeName": "[u8; 32]"
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "Address20",
                      "fields": [
                        {
                          "type": 43,
                          "typeName": "[u8; 20]"
                        }
                      ],
                      "index": 4
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 243,
            "type": {
              "def": {
                "compact": {
                  "type": 123
                }
              }
            }
          },
          {
            "id": 244,
            "type": {
              "path": [
                "pallet_balances",
                "types",
                "AdjustmentDirection"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Increase",
                      "index": 0
                    },
                    {
                      "name": "Decrease",
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 245,
            "type": {
              "path": [
                "pallet_balances",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "VestingBalance",
                      "index": 0,
                      "docs": [
                        "Vesting balance too high to send value."
                      ]
                    },
                    {
                      "name": "LiquidityRestrictions",
                      "index": 1,
                      "docs": [
                        "Account liquidity restrictions prevent withdrawal."
                      ]
                    },
                    {
                      "name": "InsufficientBalance",
                      "index": 2,
                      "docs": [
                        "Balance too low to send value."
                      ]
                    },
                    {
                      "name": "ExistentialDeposit",
                      "index": 3,
                      "docs": [
                        "Value too low to create account due to existential deposit."
                      ]
                    },
                    {
                      "name": "Expendability",
                      "index": 4,
                      "docs": [
                        "Transfer/payment would kill account."
                      ]
                    },
                    {
                      "name": "ExistingVestingSchedule",
                      "index": 5,
                      "docs": [
                        "A vesting schedule already exists for this account."
                      ]
                    },
                    {
                      "name": "DeadAccount",
                      "index": 6,
                      "docs": [
                        "Beneficiary account must pre-exist."
                      ]
                    },
                    {
                      "name": "TooManyReserves",
                      "index": 7,
                      "docs": [
                        "Number of named reserves exceed `MaxReserves`."
                      ]
                    },
                    {
                      "name": "TooManyHolds",
                      "index": 8,
                      "docs": [
                        "Number of holds exceed `VariantCountOf<T::RuntimeHoldReason>`."
                      ]
                    },
                    {
                      "name": "TooManyFreezes",
                      "index": 9,
                      "docs": [
                        "Number of freezes exceed `MaxFreezes`."
                      ]
                    },
                    {
                      "name": "IssuanceDeactivated",
                      "index": 10,
                      "docs": [
                        "The issuance cannot be modified since it is already deactivated."
                      ]
                    },
                    {
                      "name": "DeltaZero",
                      "index": 11,
                      "docs": [
                        "The delta cannot be zero."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "The `Error` enum of this pallet."
              ]
            }
          },
          {
            "id": 246,
            "type": {
              "path": [
                "pallet_transaction_payment",
                "Releases"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "V1Ancient",
                      "index": 0
                    },
                    {
                      "name": "V2",
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 247,
            "type": {
              "path": [
                "bounded_collections",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 0
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 48,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 248,
            "type": {
              "path": [
                "bounded_collections",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 249
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 250,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 249,
            "type": {
              "path": [
                "pallet_collator_selection",
                "pallet",
                "CandidateInfo"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "who",
                      "type": 0,
                      "typeName": "AccountId"
                    },
                    {
                      "name": "deposit",
                      "type": 6,
                      "typeName": "Balance"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 250,
            "type": {
              "def": {
                "sequence": {
                  "type": 249
                }
              }
            }
          },
          {
            "id": 251,
            "type": {
              "path": [
                "pallet_collator_selection",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "set_invulnerables",
                      "fields": [
                        {
                          "name": "new",
                          "type": 48,
                          "typeName": "Vec<T::AccountId>"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Set the list of invulnerable (fixed) collators. These collators must do some",
                        "preparation, namely to have registered session keys.",
                        "",
                        "The call will remove any accounts that have not registered keys from the set. That is,",
                        "it is non-atomic; the caller accepts all `AccountId`s passed in `new` _individually_ as",
                        "acceptable Invulnerables, and is not proposing a _set_ of new Invulnerables.",
                        "",
                        "This call does not maintain mutual exclusivity of `Invulnerables` and `Candidates`. It",
                        "is recommended to use a batch of `add_invulnerable` and `remove_invulnerable` instead. A",
                        "`batch_all` can also be used to enforce atomicity. If any candidates are included in",
                        "`new`, they should be removed with `remove_invulnerable_candidate` after execution.",
                        "",
                        "Must be called by the `UpdateOrigin`."
                      ]
                    },
                    {
                      "name": "set_desired_candidates",
                      "fields": [
                        {
                          "name": "max",
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Set the ideal number of non-invulnerable collators. If lowering this number, then the",
                        "number of running collators could be higher than this figure. Aside from that edge case,",
                        "there should be no other way to have more candidates than the desired number.",
                        "",
                        "The origin for this call must be the `UpdateOrigin`."
                      ]
                    },
                    {
                      "name": "set_candidacy_bond",
                      "fields": [
                        {
                          "name": "bond",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Set the candidacy bond amount.",
                        "",
                        "If the candidacy bond is increased by this call, all current candidates which have a",
                        "deposit lower than the new bond will be kicked from the list and get their deposits",
                        "back.",
                        "",
                        "The origin for this call must be the `UpdateOrigin`."
                      ]
                    },
                    {
                      "name": "register_as_candidate",
                      "index": 3,
                      "docs": [
                        "Register this account as a collator candidate. The account must (a) already have",
                        "registered session keys and (b) be able to reserve the `CandidacyBond`.",
                        "",
                        "This call is not available to `Invulnerable` collators."
                      ]
                    },
                    {
                      "name": "leave_intent",
                      "index": 4,
                      "docs": [
                        "Deregister `origin` as a collator candidate. Note that the collator can only leave on",
                        "session change. The `CandidacyBond` will be unreserved immediately.",
                        "",
                        "This call will fail if the total number of candidates would drop below",
                        "`MinEligibleCollators`."
                      ]
                    },
                    {
                      "name": "add_invulnerable",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Add a new account `who` to the list of `Invulnerables` collators. `who` must have",
                        "registered session keys. If `who` is a candidate, they will be removed.",
                        "",
                        "The origin for this call must be the `UpdateOrigin`."
                      ]
                    },
                    {
                      "name": "remove_invulnerable",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "Remove an account `who` from the list of `Invulnerables` collators. `Invulnerables` must",
                        "be sorted.",
                        "",
                        "The origin for this call must be the `UpdateOrigin`."
                      ]
                    },
                    {
                      "name": "update_bond",
                      "fields": [
                        {
                          "name": "new_deposit",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "Update the candidacy bond of collator candidate `origin` to a new amount `new_deposit`.",
                        "",
                        "Setting a `new_deposit` that is lower than the current deposit while `origin` is",
                        "occupying a top-`DesiredCandidates` slot is not allowed.",
                        "",
                        "This call will fail if `origin` is not a collator candidate, the updated bond is lower",
                        "than the minimum candidacy bond, and/or the amount cannot be reserved."
                      ]
                    },
                    {
                      "name": "take_candidate_slot",
                      "fields": [
                        {
                          "name": "deposit",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        },
                        {
                          "name": "target",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 8,
                      "docs": [
                        "The caller `origin` replaces a candidate `target` in the collator candidate list by",
                        "reserving `deposit`. The amount `deposit` reserved by the caller must be greater than",
                        "the existing bond of the target it is trying to replace.",
                        "",
                        "This call will fail if the caller is already a collator candidate or invulnerable, the",
                        "caller does not have registered session keys, the target is not a collator candidate,",
                        "and/or the `deposit` amount cannot be reserved."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains a variant per dispatchable extrinsic that this pallet has."
              ]
            }
          },
          {
            "id": 252,
            "type": {
              "path": [
                "pallet_collator_selection",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "TooManyCandidates",
                      "index": 0,
                      "docs": [
                        "The pallet has too many candidates."
                      ]
                    },
                    {
                      "name": "TooFewEligibleCollators",
                      "index": 1,
                      "docs": [
                        "Leaving would result in too few candidates."
                      ]
                    },
                    {
                      "name": "AlreadyCandidate",
                      "index": 2,
                      "docs": [
                        "Account is already a candidate."
                      ]
                    },
                    {
                      "name": "NotCandidate",
                      "index": 3,
                      "docs": [
                        "Account is not a candidate."
                      ]
                    },
                    {
                      "name": "TooManyInvulnerables",
                      "index": 4,
                      "docs": [
                        "There are too many Invulnerables."
                      ]
                    },
                    {
                      "name": "AlreadyInvulnerable",
                      "index": 5,
                      "docs": [
                        "Account is already an Invulnerable."
                      ]
                    },
                    {
                      "name": "NotInvulnerable",
                      "index": 6,
                      "docs": [
                        "Account is not an Invulnerable."
                      ]
                    },
                    {
                      "name": "NoAssociatedValidatorId",
                      "index": 7,
                      "docs": [
                        "Account has no associated validator ID."
                      ]
                    },
                    {
                      "name": "ValidatorNotRegistered",
                      "index": 8,
                      "docs": [
                        "Validator ID is not yet registered."
                      ]
                    },
                    {
                      "name": "InsertToCandidateListFailed",
                      "index": 9,
                      "docs": [
                        "Could not insert in the candidate list."
                      ]
                    },
                    {
                      "name": "RemoveFromCandidateListFailed",
                      "index": 10,
                      "docs": [
                        "Could not remove from the candidate list."
                      ]
                    },
                    {
                      "name": "DepositTooLow",
                      "index": 11,
                      "docs": [
                        "New deposit amount would be below the minimum candidacy bond."
                      ]
                    },
                    {
                      "name": "UpdateCandidateListFailed",
                      "index": 12,
                      "docs": [
                        "Could not update the candidate list."
                      ]
                    },
                    {
                      "name": "InsufficientBond",
                      "index": 13,
                      "docs": [
                        "Deposit amount is too low to take the target's slot in the candidate list."
                      ]
                    },
                    {
                      "name": "TargetIsNotCandidate",
                      "index": 14,
                      "docs": [
                        "The target account to be replaced in the candidate list is not a candidate."
                      ]
                    },
                    {
                      "name": "IdenticalDeposit",
                      "index": 15,
                      "docs": [
                        "The updated deposit amount is equal to the amount already reserved."
                      ]
                    },
                    {
                      "name": "InvalidUnreserve",
                      "index": 16,
                      "docs": [
                        "Cannot lower candidacy bond while occupying a future collator slot in the list."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "The `Error` enum of this pallet."
              ]
            }
          },
          {
            "id": 253,
            "type": {
              "def": {
                "sequence": {
                  "type": 254
                }
              }
            }
          },
          {
            "id": 254,
            "type": {
              "def": {
                "tuple": [
                  0,
                  255
                ]
              }
            }
          },
          {
            "id": 255,
            "type": {
              "path": [
                "asset_hub_westend_runtime",
                "SessionKeys"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "aura",
                      "type": 256,
                      "typeName": "<Aura as $crate::BoundToRuntimeAppPublic>::Public"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 256,
            "type": {
              "path": [
                "sp_consensus_aura",
                "sr25519",
                "app_sr25519",
                "Public"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 1,
                      "typeName": "sr25519::Public"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 257,
            "type": {
              "def": {
                "tuple": [
                  258,
                  14
                ]
              }
            }
          },
          {
            "id": 258,
            "type": {
              "path": [
                "sp_core",
                "crypto",
                "KeyTypeId"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 18,
                      "typeName": "[u8; 4]"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 259,
            "type": {
              "path": [
                "pallet_session",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "set_keys",
                      "fields": [
                        {
                          "name": "keys",
                          "type": 255,
                          "typeName": "T::Keys"
                        },
                        {
                          "name": "proof",
                          "type": 14,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Sets the session key(s) of the function caller to `keys`.",
                        "Allows an account to set its session key prior to becoming a validator.",
                        "This doesn't take effect until the next session.",
                        "",
                        "The dispatch origin of this function must be signed.",
                        "",
                        "## Complexity",
                        "- `O(1)`. Actual cost depends on the number of length of `T::Keys::key_ids()` which is",
                        "  fixed."
                      ]
                    },
                    {
                      "name": "purge_keys",
                      "index": 1,
                      "docs": [
                        "Removes any session key(s) of the function caller.",
                        "",
                        "This doesn't take effect until the next session.",
                        "",
                        "The dispatch origin of this function must be Signed and the account must be either be",
                        "convertible to a validator ID using the chain's typical addressing system (this usually",
                        "means being a controller account) or directly convertible into a validator ID (which",
                        "usually means being a stash account).",
                        "",
                        "## Complexity",
                        "- `O(1)` in number of key types. Actual cost depends on the number of length of",
                        "  `T::Keys::key_ids()` which is fixed."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains a variant per dispatchable extrinsic that this pallet has."
              ]
            }
          },
          {
            "id": 260,
            "type": {
              "path": [
                "pallet_session",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "InvalidProof",
                      "index": 0,
                      "docs": [
                        "Invalid ownership proof."
                      ]
                    },
                    {
                      "name": "NoAssociatedValidatorId",
                      "index": 1,
                      "docs": [
                        "No associated validator ID for account."
                      ]
                    },
                    {
                      "name": "DuplicatedKey",
                      "index": 2,
                      "docs": [
                        "Registered duplicate key."
                      ]
                    },
                    {
                      "name": "NoKeys",
                      "index": 3,
                      "docs": [
                        "No keys are associated with this account."
                      ]
                    },
                    {
                      "name": "NoAccount",
                      "index": 4,
                      "docs": [
                        "Key setting account is not live, so it's impossible to associate keys."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Error for the session pallet."
              ]
            }
          },
          {
            "id": 261,
            "type": {
              "path": [
                "bounded_collections",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 256
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 262,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 262,
            "type": {
              "def": {
                "sequence": {
                  "type": 256
                }
              }
            }
          },
          {
            "id": 263,
            "type": {
              "path": [
                "sp_consensus_slots",
                "Slot"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 12,
                      "typeName": "u64"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 264,
            "type": {
              "def": {
                "tuple": [
                  263,
                  4
                ]
              }
            }
          },
          {
            "id": 265,
            "type": {
              "path": [
                "bounded_collections",
                "bounded_btree_set",
                "BoundedBTreeSet"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 119
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 266,
                      "typeName": "BTreeSet<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 266,
            "type": {
              "path": [
                "BTreeSet"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 119
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 267
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 267,
            "type": {
              "def": {
                "sequence": {
                  "type": 119
                }
              }
            }
          },
          {
            "id": 268,
            "type": {
              "path": [
                "bounded_collections",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 269
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 271,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 269,
            "type": {
              "path": [
                "cumulus_pallet_xcmp_queue",
                "OutboundChannelDetails"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "recipient",
                      "type": 119,
                      "typeName": "ParaId"
                    },
                    {
                      "name": "state",
                      "type": 270,
                      "typeName": "OutboundState"
                    },
                    {
                      "name": "signals_exist",
                      "type": 8,
                      "typeName": "bool"
                    },
                    {
                      "name": "first_index",
                      "type": 128,
                      "typeName": "u16"
                    },
                    {
                      "name": "last_index",
                      "type": 128,
                      "typeName": "u16"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 270,
            "type": {
              "path": [
                "cumulus_pallet_xcmp_queue",
                "OutboundState"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Ok",
                      "index": 0
                    },
                    {
                      "name": "Suspended",
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 271,
            "type": {
              "def": {
                "sequence": {
                  "type": 269
                }
              }
            }
          },
          {
            "id": 272,
            "type": {
              "def": {
                "tuple": [
                  119,
                  128
                ]
              }
            }
          },
          {
            "id": 273,
            "type": {
              "path": [
                "bounded_collections",
                "weak_bounded_vec",
                "WeakBoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 2
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 14,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 274,
            "type": {
              "path": [
                "cumulus_pallet_xcmp_queue",
                "QueueConfigData"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "suspend_threshold",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "drop_threshold",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "resume_threshold",
                      "type": 4,
                      "typeName": "u32"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 275,
            "type": {
              "path": [
                "cumulus_pallet_xcmp_queue",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "suspend_xcm_execution",
                      "index": 1,
                      "docs": [
                        "Suspends all XCM executions for the XCMP queue, regardless of the sender's origin.",
                        "",
                        "- `origin`: Must pass `ControllerOrigin`."
                      ]
                    },
                    {
                      "name": "resume_xcm_execution",
                      "index": 2,
                      "docs": [
                        "Resumes all XCM executions for the XCMP queue.",
                        "",
                        "Note that this function doesn't change the status of the in/out bound channels.",
                        "",
                        "- `origin`: Must pass `ControllerOrigin`."
                      ]
                    },
                    {
                      "name": "update_suspend_threshold",
                      "fields": [
                        {
                          "name": "new",
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Overwrites the number of pages which must be in the queue for the other side to be",
                        "told to suspend their sending.",
                        "",
                        "- `origin`: Must pass `Root`.",
                        "- `new`: Desired value for `QueueConfigData.suspend_value`"
                      ]
                    },
                    {
                      "name": "update_drop_threshold",
                      "fields": [
                        {
                          "name": "new",
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Overwrites the number of pages which must be in the queue after which we drop any",
                        "further messages from the channel.",
                        "",
                        "- `origin`: Must pass `Root`.",
                        "- `new`: Desired value for `QueueConfigData.drop_threshold`"
                      ]
                    },
                    {
                      "name": "update_resume_threshold",
                      "fields": [
                        {
                          "name": "new",
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Overwrites the number of pages which the queue must be reduced to before it signals",
                        "that message sending may recommence after it has been suspended.",
                        "",
                        "- `origin`: Must pass `Root`.",
                        "- `new`: Desired value for `QueueConfigData.resume_threshold`"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains a variant per dispatchable extrinsic that this pallet has."
              ]
            }
          },
          {
            "id": 276,
            "type": {
              "path": [
                "cumulus_pallet_xcmp_queue",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "BadQueueConfig",
                      "index": 0,
                      "docs": [
                        "Setting the queue config failed since one of its values was invalid."
                      ]
                    },
                    {
                      "name": "AlreadySuspended",
                      "index": 1,
                      "docs": [
                        "The execution is already suspended."
                      ]
                    },
                    {
                      "name": "AlreadyResumed",
                      "index": 2,
                      "docs": [
                        "The execution is already resumed."
                      ]
                    },
                    {
                      "name": "TooManyActiveOutboundChannels",
                      "index": 3,
                      "docs": [
                        "There are too many active outbound channels."
                      ]
                    },
                    {
                      "name": "TooBig",
                      "index": 4,
                      "docs": [
                        "The message is too big."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "The `Error` enum of this pallet."
              ]
            }
          },
          {
            "id": 277,
            "type": {
              "path": [
                "pallet_xcm",
                "pallet",
                "QueryStatus"
              ],
              "params": [
                {
                  "name": "BlockNumber",
                  "type": 4
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Pending",
                      "fields": [
                        {
                          "name": "responder",
                          "type": 115,
                          "typeName": "VersionedLocation"
                        },
                        {
                          "name": "maybe_match_querier",
                          "type": 278,
                          "typeName": "Option<VersionedLocation>"
                        },
                        {
                          "name": "maybe_notify",
                          "type": 279,
                          "typeName": "Option<(u8, u8)>"
                        },
                        {
                          "name": "timeout",
                          "type": 4,
                          "typeName": "BlockNumber"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "VersionNotifier",
                      "fields": [
                        {
                          "name": "origin",
                          "type": 115,
                          "typeName": "VersionedLocation"
                        },
                        {
                          "name": "is_active",
                          "type": 8,
                          "typeName": "bool"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "Ready",
                      "fields": [
                        {
                          "name": "response",
                          "type": 281,
                          "typeName": "VersionedResponse"
                        },
                        {
                          "name": "at",
                          "type": 4,
                          "typeName": "BlockNumber"
                        }
                      ],
                      "index": 2
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 278,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 115
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 115
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 279,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 280
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 280
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 280,
            "type": {
              "def": {
                "tuple": [
                  2,
                  2
                ]
              }
            }
          },
          {
            "id": 281,
            "type": {
              "path": [
                "xcm",
                "VersionedResponse"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "V2",
                      "fields": [
                        {
                          "type": 282,
                          "typeName": "v2::Response"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "V3",
                      "fields": [
                        {
                          "type": 286,
                          "typeName": "v3::Response"
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "V4",
                      "fields": [
                        {
                          "type": 78,
                          "typeName": "v4::Response"
                        }
                      ],
                      "index": 4
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 282,
            "type": {
              "path": [
                "xcm",
                "v2",
                "Response"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Null",
                      "index": 0
                    },
                    {
                      "name": "Assets",
                      "fields": [
                        {
                          "type": 96,
                          "typeName": "MultiAssets"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "ExecutionResult",
                      "fields": [
                        {
                          "type": 283,
                          "typeName": "Option<(u32, Error)>"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "Version",
                      "fields": [
                        {
                          "type": 4,
                          "typeName": "super::Version"
                        }
                      ],
                      "index": 3
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 283,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 284
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 284
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 284,
            "type": {
              "def": {
                "tuple": [
                  4,
                  285
                ]
              }
            }
          },
          {
            "id": 285,
            "type": {
              "path": [
                "xcm",
                "v2",
                "traits",
                "Error"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Overflow",
                      "index": 0
                    },
                    {
                      "name": "Unimplemented",
                      "index": 1
                    },
                    {
                      "name": "UntrustedReserveLocation",
                      "index": 2
                    },
                    {
                      "name": "UntrustedTeleportLocation",
                      "index": 3
                    },
                    {
                      "name": "MultiLocationFull",
                      "index": 4
                    },
                    {
                      "name": "MultiLocationNotInvertible",
                      "index": 5
                    },
                    {
                      "name": "BadOrigin",
                      "index": 6
                    },
                    {
                      "name": "InvalidLocation",
                      "index": 7
                    },
                    {
                      "name": "AssetNotFound",
                      "index": 8
                    },
                    {
                      "name": "FailedToTransactAsset",
                      "index": 9
                    },
                    {
                      "name": "NotWithdrawable",
                      "index": 10
                    },
                    {
                      "name": "LocationCannotHold",
                      "index": 11
                    },
                    {
                      "name": "ExceedsMaxMessageSize",
                      "index": 12
                    },
                    {
                      "name": "DestinationUnsupported",
                      "index": 13
                    },
                    {
                      "name": "Transport",
                      "index": 14
                    },
                    {
                      "name": "Unroutable",
                      "index": 15
                    },
                    {
                      "name": "UnknownClaim",
                      "index": 16
                    },
                    {
                      "name": "FailedToDecode",
                      "index": 17
                    },
                    {
                      "name": "MaxWeightInvalid",
                      "index": 18
                    },
                    {
                      "name": "NotHoldingFees",
                      "index": 19
                    },
                    {
                      "name": "TooExpensive",
                      "index": 20
                    },
                    {
                      "name": "Trap",
                      "fields": [
                        {
                          "type": 12,
                          "typeName": "u64"
                        }
                      ],
                      "index": 21
                    },
                    {
                      "name": "UnhandledXcmVersion",
                      "index": 22
                    },
                    {
                      "name": "WeightLimitReached",
                      "fields": [
                        {
                          "type": 12,
                          "typeName": "Weight"
                        }
                      ],
                      "index": 23
                    },
                    {
                      "name": "Barrier",
                      "index": 24
                    },
                    {
                      "name": "WeightNotComputable",
                      "index": 25
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 286,
            "type": {
              "path": [
                "xcm",
                "v3",
                "Response"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Null",
                      "index": 0
                    },
                    {
                      "name": "Assets",
                      "fields": [
                        {
                          "type": 109,
                          "typeName": "MultiAssets"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "ExecutionResult",
                      "fields": [
                        {
                          "type": 79,
                          "typeName": "Option<(u32, Error)>"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "Version",
                      "fields": [
                        {
                          "type": 4,
                          "typeName": "super::Version"
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "PalletsInfo",
                      "fields": [
                        {
                          "type": 287,
                          "typeName": "BoundedVec<PalletInfo, MaxPalletsInfo>"
                        }
                      ],
                      "index": 4
                    },
                    {
                      "name": "DispatchResult",
                      "fields": [
                        {
                          "type": 85,
                          "typeName": "MaybeErrorCode"
                        }
                      ],
                      "index": 5
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 287,
            "type": {
              "path": [
                "bounded_collections",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 288
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 290,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 288,
            "type": {
              "path": [
                "xcm",
                "v3",
                "PalletInfo"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "index",
                      "type": 40,
                      "typeName": "u32"
                    },
                    {
                      "name": "name",
                      "type": 289,
                      "typeName": "BoundedVec<u8, MaxPalletNameLen>"
                    },
                    {
                      "name": "module_name",
                      "type": 289,
                      "typeName": "BoundedVec<u8, MaxPalletNameLen>"
                    },
                    {
                      "name": "major",
                      "type": 40,
                      "typeName": "u32"
                    },
                    {
                      "name": "minor",
                      "type": 40,
                      "typeName": "u32"
                    },
                    {
                      "name": "patch",
                      "type": 40,
                      "typeName": "u32"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 289,
            "type": {
              "path": [
                "bounded_collections",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 2
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 14,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 290,
            "type": {
              "def": {
                "sequence": {
                  "type": 288
                }
              }
            }
          },
          {
            "id": 291,
            "type": {
              "def": {
                "tuple": [
                  4,
                  115
                ]
              }
            }
          },
          {
            "id": 292,
            "type": {
              "def": {
                "tuple": [
                  12,
                  10,
                  4
                ]
              }
            }
          },
          {
            "id": 293,
            "type": {
              "path": [
                "bounded_collections",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 294
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 295,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 294,
            "type": {
              "def": {
                "tuple": [
                  115,
                  4
                ]
              }
            }
          },
          {
            "id": 295,
            "type": {
              "def": {
                "sequence": {
                  "type": 294
                }
              }
            }
          },
          {
            "id": 296,
            "type": {
              "path": [
                "pallet_xcm",
                "pallet",
                "VersionMigrationStage"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "MigrateSupportedVersion",
                      "index": 0
                    },
                    {
                      "name": "MigrateVersionNotifiers",
                      "index": 1
                    },
                    {
                      "name": "NotifyCurrentTargets",
                      "fields": [
                        {
                          "type": 297,
                          "typeName": "Option<Vec<u8>>"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "MigrateAndNotifyOldTargets",
                      "index": 3
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 297,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 14
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 14
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 298,
            "type": {
              "def": {
                "tuple": [
                  4,
                  0,
                  299
                ]
              }
            }
          },
          {
            "id": 299,
            "type": {
              "path": [
                "xcm",
                "VersionedAssetId"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "V3",
                      "fields": [
                        {
                          "type": 112,
                          "typeName": "v3::AssetId"
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "V4",
                      "fields": [
                        {
                          "type": 73,
                          "typeName": "v4::AssetId"
                        }
                      ],
                      "index": 4
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 300,
            "type": {
              "path": [
                "pallet_xcm",
                "pallet",
                "RemoteLockedFungibleRecord"
              ],
              "params": [
                {
                  "name": "ConsumerIdentifier",
                  "type": 123
                },
                {
                  "name": "MaxConsumers",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "amount",
                      "type": 6,
                      "typeName": "u128"
                    },
                    {
                      "name": "owner",
                      "type": 115,
                      "typeName": "VersionedLocation"
                    },
                    {
                      "name": "locker",
                      "type": 115,
                      "typeName": "VersionedLocation"
                    },
                    {
                      "name": "consumers",
                      "type": 301,
                      "typeName": "BoundedVec<(ConsumerIdentifier, u128), MaxConsumers>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 301,
            "type": {
              "path": [
                "bounded_collections",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 302
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 303,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 302,
            "type": {
              "def": {
                "tuple": [
                  123,
                  6
                ]
              }
            }
          },
          {
            "id": 303,
            "type": {
              "def": {
                "sequence": {
                  "type": 302
                }
              }
            }
          },
          {
            "id": 304,
            "type": {
              "path": [
                "bounded_collections",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 305
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 306,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 305,
            "type": {
              "def": {
                "tuple": [
                  6,
                  115
                ]
              }
            }
          },
          {
            "id": 306,
            "type": {
              "def": {
                "sequence": {
                  "type": 305
                }
              }
            }
          },
          {
            "id": 307,
            "type": {
              "path": [
                "pallet_xcm",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "send",
                      "fields": [
                        {
                          "name": "dest",
                          "type": 115,
                          "typeName": "Box<VersionedLocation>"
                        },
                        {
                          "name": "message",
                          "type": 308,
                          "typeName": "Box<VersionedXcm<()>>"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "teleport_assets",
                      "fields": [
                        {
                          "name": "dest",
                          "type": 115,
                          "typeName": "Box<VersionedLocation>"
                        },
                        {
                          "name": "beneficiary",
                          "type": 115,
                          "typeName": "Box<VersionedLocation>"
                        },
                        {
                          "name": "assets",
                          "type": 95,
                          "typeName": "Box<VersionedAssets>"
                        },
                        {
                          "name": "fee_asset_item",
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Teleport some assets from the local chain to some destination chain.",
                        "",
                        "**This function is deprecated: Use `limited_teleport_assets` instead.**",
                        "",
                        "Fee payment on the destination side is made from the asset in the `assets` vector of",
                        "index `fee_asset_item`. The weight limit for fees is not provided and thus is unlimited,",
                        "with all fees taken as needed from the asset.",
                        "",
                        "- `origin`: Must be capable of withdrawing the `assets` and executing XCM.",
                        "- `dest`: Destination context for the assets. Will typically be `[Parent,",
                        "  Parachain(..)]` to send from parachain to parachain, or `[Parachain(..)]` to send from",
                        "  relay to parachain.",
                        "- `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will",
                        "  generally be an `AccountId32` value.",
                        "- `assets`: The assets to be withdrawn. This should include the assets used to pay the",
                        "  fee on the `dest` chain.",
                        "- `fee_asset_item`: The index into `assets` of the item which should be used to pay",
                        "  fees."
                      ]
                    },
                    {
                      "name": "reserve_transfer_assets",
                      "fields": [
                        {
                          "name": "dest",
                          "type": 115,
                          "typeName": "Box<VersionedLocation>"
                        },
                        {
                          "name": "beneficiary",
                          "type": 115,
                          "typeName": "Box<VersionedLocation>"
                        },
                        {
                          "name": "assets",
                          "type": 95,
                          "typeName": "Box<VersionedAssets>"
                        },
                        {
                          "name": "fee_asset_item",
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Transfer some assets from the local chain to the destination chain through their local,",
                        "destination or remote reserve.",
                        "",
                        "`assets` must have same reserve location and may not be teleportable to `dest`.",
                        " - `assets` have local reserve: transfer assets to sovereign account of destination",
                        "   chain and forward a notification XCM to `dest` to mint and deposit reserve-based",
                        "   assets to `beneficiary`.",
                        " - `assets` have destination reserve: burn local assets and forward a notification to",
                        "   `dest` chain to withdraw the reserve assets from this chain's sovereign account and",
                        "   deposit them to `beneficiary`.",
                        " - `assets` have remote reserve: burn local assets, forward XCM to reserve chain to move",
                        "   reserves from this chain's SA to `dest` chain's SA, and forward another XCM to `dest`",
                        "   to mint and deposit reserve-based assets to `beneficiary`.",
                        "",
                        "**This function is deprecated: Use `limited_reserve_transfer_assets` instead.**",
                        "",
                        "Fee payment on the destination side is made from the asset in the `assets` vector of",
                        "index `fee_asset_item`. The weight limit for fees is not provided and thus is unlimited,",
                        "with all fees taken as needed from the asset.",
                        "",
                        "- `origin`: Must be capable of withdrawing the `assets` and executing XCM.",
                        "- `dest`: Destination context for the assets. Will typically be `[Parent,",
                        "  Parachain(..)]` to send from parachain to parachain, or `[Parachain(..)]` to send from",
                        "  relay to parachain.",
                        "- `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will",
                        "  generally be an `AccountId32` value.",
                        "- `assets`: The assets to be withdrawn. This should include the assets used to pay the",
                        "  fee on the `dest` (and possibly reserve) chains.",
                        "- `fee_asset_item`: The index into `assets` of the item which should be used to pay",
                        "  fees."
                      ]
                    },
                    {
                      "name": "execute",
                      "fields": [
                        {
                          "name": "message",
                          "type": 325,
                          "typeName": "Box<VersionedXcm<<T as Config>::RuntimeCall>>"
                        },
                        {
                          "name": "max_weight",
                          "type": 10,
                          "typeName": "Weight"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Execute an XCM message from a local, signed, origin.",
                        "",
                        "An event is deposited indicating whether `msg` could be executed completely or only",
                        "partially.",
                        "",
                        "No more than `max_weight` will be used in its attempted execution. If this is less than",
                        "the maximum amount of weight that the message could take to be executed, then no",
                        "execution attempt will be made."
                      ]
                    },
                    {
                      "name": "force_xcm_version",
                      "fields": [
                        {
                          "name": "location",
                          "type": 54,
                          "typeName": "Box<Location>"
                        },
                        {
                          "name": "version",
                          "type": 4,
                          "typeName": "XcmVersion"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Extoll that a particular destination can be communicated with through a particular",
                        "version of XCM.",
                        "",
                        "- `origin`: Must be an origin specified by AdminOrigin.",
                        "- `location`: The destination that is being described.",
                        "- `xcm_version`: The latest version of XCM that `location` supports."
                      ]
                    },
                    {
                      "name": "force_default_xcm_version",
                      "fields": [
                        {
                          "name": "maybe_xcm_version",
                          "type": 133,
                          "typeName": "Option<XcmVersion>"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Set a safe XCM version (the version that XCM should be encoded with if the most recent",
                        "version a destination can accept is unknown).",
                        "",
                        "- `origin`: Must be an origin specified by AdminOrigin.",
                        "- `maybe_xcm_version`: The default XCM encoding version, or `None` to disable."
                      ]
                    },
                    {
                      "name": "force_subscribe_version_notify",
                      "fields": [
                        {
                          "name": "location",
                          "type": 115,
                          "typeName": "Box<VersionedLocation>"
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "Ask a location to notify us regarding their XCM version and any changes to it.",
                        "",
                        "- `origin`: Must be an origin specified by AdminOrigin.",
                        "- `location`: The location to which we should subscribe for XCM version notifications."
                      ]
                    },
                    {
                      "name": "force_unsubscribe_version_notify",
                      "fields": [
                        {
                          "name": "location",
                          "type": 115,
                          "typeName": "Box<VersionedLocation>"
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "Require that a particular destination should no longer notify us regarding any XCM",
                        "version changes.",
                        "",
                        "- `origin`: Must be an origin specified by AdminOrigin.",
                        "- `location`: The location to which we are currently subscribed for XCM version",
                        "  notifications which we no longer desire."
                      ]
                    },
                    {
                      "name": "limited_reserve_transfer_assets",
                      "fields": [
                        {
                          "name": "dest",
                          "type": 115,
                          "typeName": "Box<VersionedLocation>"
                        },
                        {
                          "name": "beneficiary",
                          "type": 115,
                          "typeName": "Box<VersionedLocation>"
                        },
                        {
                          "name": "assets",
                          "type": 95,
                          "typeName": "Box<VersionedAssets>"
                        },
                        {
                          "name": "fee_asset_item",
                          "type": 4,
                          "typeName": "u32"
                        },
                        {
                          "name": "weight_limit",
                          "type": 94,
                          "typeName": "WeightLimit"
                        }
                      ],
                      "index": 8,
                      "docs": [
                        "Transfer some assets from the local chain to the destination chain through their local,",
                        "destination or remote reserve.",
                        "",
                        "`assets` must have same reserve location and may not be teleportable to `dest`.",
                        " - `assets` have local reserve: transfer assets to sovereign account of destination",
                        "   chain and forward a notification XCM to `dest` to mint and deposit reserve-based",
                        "   assets to `beneficiary`.",
                        " - `assets` have destination reserve: burn local assets and forward a notification to",
                        "   `dest` chain to withdraw the reserve assets from this chain's sovereign account and",
                        "   deposit them to `beneficiary`.",
                        " - `assets` have remote reserve: burn local assets, forward XCM to reserve chain to move",
                        "   reserves from this chain's SA to `dest` chain's SA, and forward another XCM to `dest`",
                        "   to mint and deposit reserve-based assets to `beneficiary`.",
                        "",
                        "Fee payment on the destination side is made from the asset in the `assets` vector of",
                        "index `fee_asset_item`, up to enough to pay for `weight_limit` of weight. If more weight",
                        "is needed than `weight_limit`, then the operation will fail and the sent assets may be",
                        "at risk.",
                        "",
                        "- `origin`: Must be capable of withdrawing the `assets` and executing XCM.",
                        "- `dest`: Destination context for the assets. Will typically be `[Parent,",
                        "  Parachain(..)]` to send from parachain to parachain, or `[Parachain(..)]` to send from",
                        "  relay to parachain.",
                        "- `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will",
                        "  generally be an `AccountId32` value.",
                        "- `assets`: The assets to be withdrawn. This should include the assets used to pay the",
                        "  fee on the `dest` (and possibly reserve) chains.",
                        "- `fee_asset_item`: The index into `assets` of the item which should be used to pay",
                        "  fees.",
                        "- `weight_limit`: The remote-side weight limit, if any, for the XCM fee purchase."
                      ]
                    },
                    {
                      "name": "limited_teleport_assets",
                      "fields": [
                        {
                          "name": "dest",
                          "type": 115,
                          "typeName": "Box<VersionedLocation>"
                        },
                        {
                          "name": "beneficiary",
                          "type": 115,
                          "typeName": "Box<VersionedLocation>"
                        },
                        {
                          "name": "assets",
                          "type": 95,
                          "typeName": "Box<VersionedAssets>"
                        },
                        {
                          "name": "fee_asset_item",
                          "type": 4,
                          "typeName": "u32"
                        },
                        {
                          "name": "weight_limit",
                          "type": 94,
                          "typeName": "WeightLimit"
                        }
                      ],
                      "index": 9,
                      "docs": [
                        "Teleport some assets from the local chain to some destination chain.",
                        "",
                        "Fee payment on the destination side is made from the asset in the `assets` vector of",
                        "index `fee_asset_item`, up to enough to pay for `weight_limit` of weight. If more weight",
                        "is needed than `weight_limit`, then the operation will fail and the sent assets may be",
                        "at risk.",
                        "",
                        "- `origin`: Must be capable of withdrawing the `assets` and executing XCM.",
                        "- `dest`: Destination context for the assets. Will typically be `[Parent,",
                        "  Parachain(..)]` to send from parachain to parachain, or `[Parachain(..)]` to send from",
                        "  relay to parachain.",
                        "- `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will",
                        "  generally be an `AccountId32` value.",
                        "- `assets`: The assets to be withdrawn. This should include the assets used to pay the",
                        "  fee on the `dest` chain.",
                        "- `fee_asset_item`: The index into `assets` of the item which should be used to pay",
                        "  fees.",
                        "- `weight_limit`: The remote-side weight limit, if any, for the XCM fee purchase."
                      ]
                    },
                    {
                      "name": "force_suspension",
                      "fields": [
                        {
                          "name": "suspended",
                          "type": 8,
                          "typeName": "bool"
                        }
                      ],
                      "index": 10,
                      "docs": [
                        "Set or unset the global suspension state of the XCM executor.",
                        "",
                        "- `origin`: Must be an origin specified by AdminOrigin.",
                        "- `suspended`: `true` to suspend, `false` to resume."
                      ]
                    },
                    {
                      "name": "transfer_assets",
                      "fields": [
                        {
                          "name": "dest",
                          "type": 115,
                          "typeName": "Box<VersionedLocation>"
                        },
                        {
                          "name": "beneficiary",
                          "type": 115,
                          "typeName": "Box<VersionedLocation>"
                        },
                        {
                          "name": "assets",
                          "type": 95,
                          "typeName": "Box<VersionedAssets>"
                        },
                        {
                          "name": "fee_asset_item",
                          "type": 4,
                          "typeName": "u32"
                        },
                        {
                          "name": "weight_limit",
                          "type": 94,
                          "typeName": "WeightLimit"
                        }
                      ],
                      "index": 11,
                      "docs": [
                        "Transfer some assets from the local chain to the destination chain through their local,",
                        "destination or remote reserve, or through teleports.",
                        "",
                        "Fee payment on the destination side is made from the asset in the `assets` vector of",
                        "index `fee_asset_item` (hence referred to as `fees`), up to enough to pay for",
                        "`weight_limit` of weight. If more weight is needed than `weight_limit`, then the",
                        "operation will fail and the sent assets may be at risk.",
                        "",
                        "`assets` (excluding `fees`) must have same reserve location or otherwise be teleportable",
                        "to `dest`, no limitations imposed on `fees`.",
                        " - for local reserve: transfer assets to sovereign account of destination chain and",
                        "   forward a notification XCM to `dest` to mint and deposit reserve-based assets to",
                        "   `beneficiary`.",
                        " - for destination reserve: burn local assets and forward a notification to `dest` chain",
                        "   to withdraw the reserve assets from this chain's sovereign account and deposit them",
                        "   to `beneficiary`.",
                        " - for remote reserve: burn local assets, forward XCM to reserve chain to move reserves",
                        "   from this chain's SA to `dest` chain's SA, and forward another XCM to `dest` to mint",
                        "   and deposit reserve-based assets to `beneficiary`.",
                        " - for teleports: burn local assets and forward XCM to `dest` chain to mint/teleport",
                        "   assets and deposit them to `beneficiary`.",
                        "",
                        "- `origin`: Must be capable of withdrawing the `assets` and executing XCM.",
                        "- `dest`: Destination context for the assets. Will typically be `X2(Parent,",
                        "  Parachain(..))` to send from parachain to parachain, or `X1(Parachain(..))` to send",
                        "  from relay to parachain.",
                        "- `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will",
                        "  generally be an `AccountId32` value.",
                        "- `assets`: The assets to be withdrawn. This should include the assets used to pay the",
                        "  fee on the `dest` (and possibly reserve) chains.",
                        "- `fee_asset_item`: The index into `assets` of the item which should be used to pay",
                        "  fees.",
                        "- `weight_limit`: The remote-side weight limit, if any, for the XCM fee purchase."
                      ]
                    },
                    {
                      "name": "claim_assets",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 95,
                          "typeName": "Box<VersionedAssets>"
                        },
                        {
                          "name": "beneficiary",
                          "type": 115,
                          "typeName": "Box<VersionedLocation>"
                        }
                      ],
                      "index": 12,
                      "docs": [
                        "Claims assets trapped on this pallet because of leftover assets during XCM execution.",
                        "",
                        "- `origin`: Anyone can call this extrinsic.",
                        "- `assets`: The exact assets that were trapped. Use the version to specify what version",
                        "was the latest when they were trapped.",
                        "- `beneficiary`: The location/account where the claimed assets will be deposited."
                      ]
                    },
                    {
                      "name": "transfer_assets_using_type_and_then",
                      "fields": [
                        {
                          "name": "dest",
                          "type": 115,
                          "typeName": "Box<VersionedLocation>"
                        },
                        {
                          "name": "assets",
                          "type": 95,
                          "typeName": "Box<VersionedAssets>"
                        },
                        {
                          "name": "assets_transfer_type",
                          "type": 336,
                          "typeName": "Box<TransferType>"
                        },
                        {
                          "name": "remote_fees_id",
                          "type": 299,
                          "typeName": "Box<VersionedAssetId>"
                        },
                        {
                          "name": "fees_transfer_type",
                          "type": 336,
                          "typeName": "Box<TransferType>"
                        },
                        {
                          "name": "custom_xcm_on_dest",
                          "type": 308,
                          "typeName": "Box<VersionedXcm<()>>"
                        },
                        {
                          "name": "weight_limit",
                          "type": 94,
                          "typeName": "WeightLimit"
                        }
                      ],
                      "index": 13,
                      "docs": [
                        "Transfer assets from the local chain to the destination chain using explicit transfer",
                        "types for assets and fees.",
                        "",
                        "`assets` must have same reserve location or may be teleportable to `dest`. Caller must",
                        "provide the `assets_transfer_type` to be used for `assets`:",
                        " - `TransferType::LocalReserve`: transfer assets to sovereign account of destination",
                        "   chain and forward a notification XCM to `dest` to mint and deposit reserve-based",
                        "   assets to `beneficiary`.",
                        " - `TransferType::DestinationReserve`: burn local assets and forward a notification to",
                        "   `dest` chain to withdraw the reserve assets from this chain's sovereign account and",
                        "   deposit them to `beneficiary`.",
                        " - `TransferType::RemoteReserve(reserve)`: burn local assets, forward XCM to `reserve`",
                        "   chain to move reserves from this chain's SA to `dest` chain's SA, and forward another",
                        "   XCM to `dest` to mint and deposit reserve-based assets to `beneficiary`. Typically",
                        "   the remote `reserve` is Asset Hub.",
                        " - `TransferType::Teleport`: burn local assets and forward XCM to `dest` chain to",
                        "   mint/teleport assets and deposit them to `beneficiary`.",
                        "",
                        "On the destination chain, as well as any intermediary hops, `BuyExecution` is used to",
                        "buy execution using transferred `assets` identified by `remote_fees_id`.",
                        "Make sure enough of the specified `remote_fees_id` asset is included in the given list",
                        "of `assets`. `remote_fees_id` should be enough to pay for `weight_limit`. If more weight",
                        "is needed than `weight_limit`, then the operation will fail and the sent assets may be",
                        "at risk.",
                        "",
                        "`remote_fees_id` may use different transfer type than rest of `assets` and can be",
                        "specified through `fees_transfer_type`.",
                        "",
                        "The caller needs to specify what should happen to the transferred assets once they reach",
                        "the `dest` chain. This is done through the `custom_xcm_on_dest` parameter, which",
                        "contains the instructions to execute on `dest` as a final step.",
                        "  This is usually as simple as:",
                        "  `Xcm(vec![DepositAsset { assets: Wild(AllCounted(assets.len())), beneficiary }])`,",
                        "  but could be something more exotic like sending the `assets` even further.",
                        "",
                        "- `origin`: Must be capable of withdrawing the `assets` and executing XCM.",
                        "- `dest`: Destination context for the assets. Will typically be `[Parent,",
                        "  Parachain(..)]` to send from parachain to parachain, or `[Parachain(..)]` to send from",
                        "  relay to parachain, or `(parents: 2, (GlobalConsensus(..), ..))` to send from",
                        "  parachain across a bridge to another ecosystem destination.",
                        "- `assets`: The assets to be withdrawn. This should include the assets used to pay the",
                        "  fee on the `dest` (and possibly reserve) chains.",
                        "- `assets_transfer_type`: The XCM `TransferType` used to transfer the `assets`.",
                        "- `remote_fees_id`: One of the included `assets` to be used to pay fees.",
                        "- `fees_transfer_type`: The XCM `TransferType` used to transfer the `fees` assets.",
                        "- `custom_xcm_on_dest`: The XCM to be executed on `dest` chain as the last step of the",
                        "  transfer, which also determines what happens to the assets on the destination chain.",
                        "- `weight_limit`: The remote-side weight limit, if any, for the XCM fee purchase."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains a variant per dispatchable extrinsic that this pallet has."
              ]
            }
          },
          {
            "id": 308,
            "type": {
              "path": [
                "xcm",
                "VersionedXcm"
              ],
              "params": [
                {
                  "name": "RuntimeCall",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "V2",
                      "fields": [
                        {
                          "type": 309,
                          "typeName": "v2::Xcm<RuntimeCall>"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "V3",
                      "fields": [
                        {
                          "type": 317,
                          "typeName": "v3::Xcm<RuntimeCall>"
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "V4",
                      "fields": [
                        {
                          "type": 67,
                          "typeName": "v4::Xcm<RuntimeCall>"
                        }
                      ],
                      "index": 4
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 309,
            "type": {
              "path": [
                "xcm",
                "v2",
                "Xcm"
              ],
              "params": [
                {
                  "name": "RuntimeCall",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 310,
                      "typeName": "Vec<Instruction<RuntimeCall>>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 310,
            "type": {
              "def": {
                "sequence": {
                  "type": 311
                }
              }
            }
          },
          {
            "id": 311,
            "type": {
              "path": [
                "xcm",
                "v2",
                "Instruction"
              ],
              "params": [
                {
                  "name": "RuntimeCall",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "WithdrawAsset",
                      "fields": [
                        {
                          "type": 96,
                          "typeName": "MultiAssets"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "ReserveAssetDeposited",
                      "fields": [
                        {
                          "type": 96,
                          "typeName": "MultiAssets"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "ReceiveTeleportedAsset",
                      "fields": [
                        {
                          "type": 96,
                          "typeName": "MultiAssets"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "QueryResponse",
                      "fields": [
                        {
                          "name": "query_id",
                          "type": 11,
                          "typeName": "QueryId"
                        },
                        {
                          "name": "response",
                          "type": 282,
                          "typeName": "Response"
                        },
                        {
                          "name": "max_weight",
                          "type": 11,
                          "typeName": "u64"
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "TransferAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 96,
                          "typeName": "MultiAssets"
                        },
                        {
                          "name": "beneficiary",
                          "type": 100,
                          "typeName": "MultiLocation"
                        }
                      ],
                      "index": 4
                    },
                    {
                      "name": "TransferReserveAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 96,
                          "typeName": "MultiAssets"
                        },
                        {
                          "name": "dest",
                          "type": 100,
                          "typeName": "MultiLocation"
                        },
                        {
                          "name": "xcm",
                          "type": 309,
                          "typeName": "Xcm<()>"
                        }
                      ],
                      "index": 5
                    },
                    {
                      "name": "Transact",
                      "fields": [
                        {
                          "name": "origin_type",
                          "type": 312,
                          "typeName": "OriginKind"
                        },
                        {
                          "name": "require_weight_at_most",
                          "type": 11,
                          "typeName": "u64"
                        },
                        {
                          "name": "call",
                          "type": 89,
                          "typeName": "DoubleEncoded<RuntimeCall>"
                        }
                      ],
                      "index": 6
                    },
                    {
                      "name": "HrmpNewChannelOpenRequest",
                      "fields": [
                        {
                          "name": "sender",
                          "type": 40,
                          "typeName": "u32"
                        },
                        {
                          "name": "max_message_size",
                          "type": 40,
                          "typeName": "u32"
                        },
                        {
                          "name": "max_capacity",
                          "type": 40,
                          "typeName": "u32"
                        }
                      ],
                      "index": 7
                    },
                    {
                      "name": "HrmpChannelAccepted",
                      "fields": [
                        {
                          "name": "recipient",
                          "type": 40,
                          "typeName": "u32"
                        }
                      ],
                      "index": 8
                    },
                    {
                      "name": "HrmpChannelClosing",
                      "fields": [
                        {
                          "name": "initiator",
                          "type": 40,
                          "typeName": "u32"
                        },
                        {
                          "name": "sender",
                          "type": 40,
                          "typeName": "u32"
                        },
                        {
                          "name": "recipient",
                          "type": 40,
                          "typeName": "u32"
                        }
                      ],
                      "index": 9
                    },
                    {
                      "name": "ClearOrigin",
                      "index": 10
                    },
                    {
                      "name": "DescendOrigin",
                      "fields": [
                        {
                          "type": 101,
                          "typeName": "InteriorMultiLocation"
                        }
                      ],
                      "index": 11
                    },
                    {
                      "name": "ReportError",
                      "fields": [
                        {
                          "name": "query_id",
                          "type": 11,
                          "typeName": "QueryId"
                        },
                        {
                          "name": "dest",
                          "type": 100,
                          "typeName": "MultiLocation"
                        },
                        {
                          "name": "max_response_weight",
                          "type": 11,
                          "typeName": "u64"
                        }
                      ],
                      "index": 12
                    },
                    {
                      "name": "DepositAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 313,
                          "typeName": "MultiAssetFilter"
                        },
                        {
                          "name": "max_assets",
                          "type": 40,
                          "typeName": "u32"
                        },
                        {
                          "name": "beneficiary",
                          "type": 100,
                          "typeName": "MultiLocation"
                        }
                      ],
                      "index": 13
                    },
                    {
                      "name": "DepositReserveAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 313,
                          "typeName": "MultiAssetFilter"
                        },
                        {
                          "name": "max_assets",
                          "type": 40,
                          "typeName": "u32"
                        },
                        {
                          "name": "dest",
                          "type": 100,
                          "typeName": "MultiLocation"
                        },
                        {
                          "name": "xcm",
                          "type": 309,
                          "typeName": "Xcm<()>"
                        }
                      ],
                      "index": 14
                    },
                    {
                      "name": "ExchangeAsset",
                      "fields": [
                        {
                          "name": "give",
                          "type": 313,
                          "typeName": "MultiAssetFilter"
                        },
                        {
                          "name": "receive",
                          "type": 96,
                          "typeName": "MultiAssets"
                        }
                      ],
                      "index": 15
                    },
                    {
                      "name": "InitiateReserveWithdraw",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 313,
                          "typeName": "MultiAssetFilter"
                        },
                        {
                          "name": "reserve",
                          "type": 100,
                          "typeName": "MultiLocation"
                        },
                        {
                          "name": "xcm",
                          "type": 309,
                          "typeName": "Xcm<()>"
                        }
                      ],
                      "index": 16
                    },
                    {
                      "name": "InitiateTeleport",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 313,
                          "typeName": "MultiAssetFilter"
                        },
                        {
                          "name": "dest",
                          "type": 100,
                          "typeName": "MultiLocation"
                        },
                        {
                          "name": "xcm",
                          "type": 309,
                          "typeName": "Xcm<()>"
                        }
                      ],
                      "index": 17
                    },
                    {
                      "name": "QueryHolding",
                      "fields": [
                        {
                          "name": "query_id",
                          "type": 11,
                          "typeName": "QueryId"
                        },
                        {
                          "name": "dest",
                          "type": 100,
                          "typeName": "MultiLocation"
                        },
                        {
                          "name": "assets",
                          "type": 313,
                          "typeName": "MultiAssetFilter"
                        },
                        {
                          "name": "max_response_weight",
                          "type": 11,
                          "typeName": "u64"
                        }
                      ],
                      "index": 18
                    },
                    {
                      "name": "BuyExecution",
                      "fields": [
                        {
                          "name": "fees",
                          "type": 98,
                          "typeName": "MultiAsset"
                        },
                        {
                          "name": "weight_limit",
                          "type": 316,
                          "typeName": "WeightLimit"
                        }
                      ],
                      "index": 19
                    },
                    {
                      "name": "RefundSurplus",
                      "index": 20
                    },
                    {
                      "name": "SetErrorHandler",
                      "fields": [
                        {
                          "type": 309,
                          "typeName": "Xcm<RuntimeCall>"
                        }
                      ],
                      "index": 21
                    },
                    {
                      "name": "SetAppendix",
                      "fields": [
                        {
                          "type": 309,
                          "typeName": "Xcm<RuntimeCall>"
                        }
                      ],
                      "index": 22
                    },
                    {
                      "name": "ClearError",
                      "index": 23
                    },
                    {
                      "name": "ClaimAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 96,
                          "typeName": "MultiAssets"
                        },
                        {
                          "name": "ticket",
                          "type": 100,
                          "typeName": "MultiLocation"
                        }
                      ],
                      "index": 24
                    },
                    {
                      "name": "Trap",
                      "fields": [
                        {
                          "type": 11,
                          "typeName": "u64"
                        }
                      ],
                      "index": 25
                    },
                    {
                      "name": "SubscribeVersion",
                      "fields": [
                        {
                          "name": "query_id",
                          "type": 11,
                          "typeName": "QueryId"
                        },
                        {
                          "name": "max_response_weight",
                          "type": 11,
                          "typeName": "u64"
                        }
                      ],
                      "index": 26
                    },
                    {
                      "name": "UnsubscribeVersion",
                      "index": 27
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 312,
            "type": {
              "path": [
                "xcm",
                "v2",
                "OriginKind"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Native",
                      "index": 0
                    },
                    {
                      "name": "SovereignAccount",
                      "index": 1
                    },
                    {
                      "name": "Superuser",
                      "index": 2
                    },
                    {
                      "name": "Xcm",
                      "index": 3
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 313,
            "type": {
              "path": [
                "xcm",
                "v2",
                "multiasset",
                "MultiAssetFilter"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Definite",
                      "fields": [
                        {
                          "type": 96,
                          "typeName": "MultiAssets"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Wild",
                      "fields": [
                        {
                          "type": 314,
                          "typeName": "WildMultiAsset"
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 314,
            "type": {
              "path": [
                "xcm",
                "v2",
                "multiasset",
                "WildMultiAsset"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "All",
                      "index": 0
                    },
                    {
                      "name": "AllOf",
                      "fields": [
                        {
                          "name": "id",
                          "type": 99,
                          "typeName": "AssetId"
                        },
                        {
                          "name": "fun",
                          "type": 315,
                          "typeName": "WildFungibility"
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 315,
            "type": {
              "path": [
                "xcm",
                "v2",
                "multiasset",
                "WildFungibility"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Fungible",
                      "index": 0
                    },
                    {
                      "name": "NonFungible",
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 316,
            "type": {
              "path": [
                "xcm",
                "v2",
                "WeightLimit"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Unlimited",
                      "index": 0
                    },
                    {
                      "name": "Limited",
                      "fields": [
                        {
                          "type": 11,
                          "typeName": "u64"
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 317,
            "type": {
              "path": [
                "xcm",
                "v3",
                "Xcm"
              ],
              "params": [
                {
                  "name": "Call",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 318,
                      "typeName": "Vec<Instruction<Call>>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 318,
            "type": {
              "def": {
                "sequence": {
                  "type": 319
                }
              }
            }
          },
          {
            "id": 319,
            "type": {
              "path": [
                "xcm",
                "v3",
                "Instruction"
              ],
              "params": [
                {
                  "name": "Call",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "WithdrawAsset",
                      "fields": [
                        {
                          "type": 109,
                          "typeName": "MultiAssets"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "ReserveAssetDeposited",
                      "fields": [
                        {
                          "type": 109,
                          "typeName": "MultiAssets"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "ReceiveTeleportedAsset",
                      "fields": [
                        {
                          "type": 109,
                          "typeName": "MultiAssets"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "QueryResponse",
                      "fields": [
                        {
                          "name": "query_id",
                          "type": 11,
                          "typeName": "QueryId"
                        },
                        {
                          "name": "response",
                          "type": 286,
                          "typeName": "Response"
                        },
                        {
                          "name": "max_weight",
                          "type": 10,
                          "typeName": "Weight"
                        },
                        {
                          "name": "querier",
                          "type": 320,
                          "typeName": "Option<MultiLocation>"
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "TransferAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 109,
                          "typeName": "MultiAssets"
                        },
                        {
                          "name": "beneficiary",
                          "type": 37,
                          "typeName": "MultiLocation"
                        }
                      ],
                      "index": 4
                    },
                    {
                      "name": "TransferReserveAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 109,
                          "typeName": "MultiAssets"
                        },
                        {
                          "name": "dest",
                          "type": 37,
                          "typeName": "MultiLocation"
                        },
                        {
                          "name": "xcm",
                          "type": 317,
                          "typeName": "Xcm<()>"
                        }
                      ],
                      "index": 5
                    },
                    {
                      "name": "Transact",
                      "fields": [
                        {
                          "name": "origin_kind",
                          "type": 88,
                          "typeName": "OriginKind"
                        },
                        {
                          "name": "require_weight_at_most",
                          "type": 10,
                          "typeName": "Weight"
                        },
                        {
                          "name": "call",
                          "type": 89,
                          "typeName": "DoubleEncoded<Call>"
                        }
                      ],
                      "index": 6
                    },
                    {
                      "name": "HrmpNewChannelOpenRequest",
                      "fields": [
                        {
                          "name": "sender",
                          "type": 40,
                          "typeName": "u32"
                        },
                        {
                          "name": "max_message_size",
                          "type": 40,
                          "typeName": "u32"
                        },
                        {
                          "name": "max_capacity",
                          "type": 40,
                          "typeName": "u32"
                        }
                      ],
                      "index": 7
                    },
                    {
                      "name": "HrmpChannelAccepted",
                      "fields": [
                        {
                          "name": "recipient",
                          "type": 40,
                          "typeName": "u32"
                        }
                      ],
                      "index": 8
                    },
                    {
                      "name": "HrmpChannelClosing",
                      "fields": [
                        {
                          "name": "initiator",
                          "type": 40,
                          "typeName": "u32"
                        },
                        {
                          "name": "sender",
                          "type": 40,
                          "typeName": "u32"
                        },
                        {
                          "name": "recipient",
                          "type": 40,
                          "typeName": "u32"
                        }
                      ],
                      "index": 9
                    },
                    {
                      "name": "ClearOrigin",
                      "index": 10
                    },
                    {
                      "name": "DescendOrigin",
                      "fields": [
                        {
                          "type": 38,
                          "typeName": "InteriorMultiLocation"
                        }
                      ],
                      "index": 11
                    },
                    {
                      "name": "ReportError",
                      "fields": [
                        {
                          "type": 321,
                          "typeName": "QueryResponseInfo"
                        }
                      ],
                      "index": 12
                    },
                    {
                      "name": "DepositAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 322,
                          "typeName": "MultiAssetFilter"
                        },
                        {
                          "name": "beneficiary",
                          "type": 37,
                          "typeName": "MultiLocation"
                        }
                      ],
                      "index": 13
                    },
                    {
                      "name": "DepositReserveAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 322,
                          "typeName": "MultiAssetFilter"
                        },
                        {
                          "name": "dest",
                          "type": 37,
                          "typeName": "MultiLocation"
                        },
                        {
                          "name": "xcm",
                          "type": 317,
                          "typeName": "Xcm<()>"
                        }
                      ],
                      "index": 14
                    },
                    {
                      "name": "ExchangeAsset",
                      "fields": [
                        {
                          "name": "give",
                          "type": 322,
                          "typeName": "MultiAssetFilter"
                        },
                        {
                          "name": "want",
                          "type": 109,
                          "typeName": "MultiAssets"
                        },
                        {
                          "name": "maximal",
                          "type": 8,
                          "typeName": "bool"
                        }
                      ],
                      "index": 15
                    },
                    {
                      "name": "InitiateReserveWithdraw",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 322,
                          "typeName": "MultiAssetFilter"
                        },
                        {
                          "name": "reserve",
                          "type": 37,
                          "typeName": "MultiLocation"
                        },
                        {
                          "name": "xcm",
                          "type": 317,
                          "typeName": "Xcm<()>"
                        }
                      ],
                      "index": 16
                    },
                    {
                      "name": "InitiateTeleport",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 322,
                          "typeName": "MultiAssetFilter"
                        },
                        {
                          "name": "dest",
                          "type": 37,
                          "typeName": "MultiLocation"
                        },
                        {
                          "name": "xcm",
                          "type": 317,
                          "typeName": "Xcm<()>"
                        }
                      ],
                      "index": 17
                    },
                    {
                      "name": "ReportHolding",
                      "fields": [
                        {
                          "name": "response_info",
                          "type": 321,
                          "typeName": "QueryResponseInfo"
                        },
                        {
                          "name": "assets",
                          "type": 322,
                          "typeName": "MultiAssetFilter"
                        }
                      ],
                      "index": 18
                    },
                    {
                      "name": "BuyExecution",
                      "fields": [
                        {
                          "name": "fees",
                          "type": 111,
                          "typeName": "MultiAsset"
                        },
                        {
                          "name": "weight_limit",
                          "type": 94,
                          "typeName": "WeightLimit"
                        }
                      ],
                      "index": 19
                    },
                    {
                      "name": "RefundSurplus",
                      "index": 20
                    },
                    {
                      "name": "SetErrorHandler",
                      "fields": [
                        {
                          "type": 317,
                          "typeName": "Xcm<Call>"
                        }
                      ],
                      "index": 21
                    },
                    {
                      "name": "SetAppendix",
                      "fields": [
                        {
                          "type": 317,
                          "typeName": "Xcm<Call>"
                        }
                      ],
                      "index": 22
                    },
                    {
                      "name": "ClearError",
                      "index": 23
                    },
                    {
                      "name": "ClaimAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 109,
                          "typeName": "MultiAssets"
                        },
                        {
                          "name": "ticket",
                          "type": 37,
                          "typeName": "MultiLocation"
                        }
                      ],
                      "index": 24
                    },
                    {
                      "name": "Trap",
                      "fields": [
                        {
                          "type": 11,
                          "typeName": "u64"
                        }
                      ],
                      "index": 25
                    },
                    {
                      "name": "SubscribeVersion",
                      "fields": [
                        {
                          "name": "query_id",
                          "type": 11,
                          "typeName": "QueryId"
                        },
                        {
                          "name": "max_response_weight",
                          "type": 10,
                          "typeName": "Weight"
                        }
                      ],
                      "index": 26
                    },
                    {
                      "name": "UnsubscribeVersion",
                      "index": 27
                    },
                    {
                      "name": "BurnAsset",
                      "fields": [
                        {
                          "type": 109,
                          "typeName": "MultiAssets"
                        }
                      ],
                      "index": 28
                    },
                    {
                      "name": "ExpectAsset",
                      "fields": [
                        {
                          "type": 109,
                          "typeName": "MultiAssets"
                        }
                      ],
                      "index": 29
                    },
                    {
                      "name": "ExpectOrigin",
                      "fields": [
                        {
                          "type": 320,
                          "typeName": "Option<MultiLocation>"
                        }
                      ],
                      "index": 30
                    },
                    {
                      "name": "ExpectError",
                      "fields": [
                        {
                          "type": 79,
                          "typeName": "Option<(u32, Error)>"
                        }
                      ],
                      "index": 31
                    },
                    {
                      "name": "ExpectTransactStatus",
                      "fields": [
                        {
                          "type": 85,
                          "typeName": "MaybeErrorCode"
                        }
                      ],
                      "index": 32
                    },
                    {
                      "name": "QueryPallet",
                      "fields": [
                        {
                          "name": "module_name",
                          "type": 14,
                          "typeName": "Vec<u8>"
                        },
                        {
                          "name": "response_info",
                          "type": 321,
                          "typeName": "QueryResponseInfo"
                        }
                      ],
                      "index": 33
                    },
                    {
                      "name": "ExpectPallet",
                      "fields": [
                        {
                          "name": "index",
                          "type": 40,
                          "typeName": "u32"
                        },
                        {
                          "name": "name",
                          "type": 14,
                          "typeName": "Vec<u8>"
                        },
                        {
                          "name": "module_name",
                          "type": 14,
                          "typeName": "Vec<u8>"
                        },
                        {
                          "name": "crate_major",
                          "type": 40,
                          "typeName": "u32"
                        },
                        {
                          "name": "min_crate_minor",
                          "type": 40,
                          "typeName": "u32"
                        }
                      ],
                      "index": 34
                    },
                    {
                      "name": "ReportTransactStatus",
                      "fields": [
                        {
                          "type": 321,
                          "typeName": "QueryResponseInfo"
                        }
                      ],
                      "index": 35
                    },
                    {
                      "name": "ClearTransactStatus",
                      "index": 36
                    },
                    {
                      "name": "UniversalOrigin",
                      "fields": [
                        {
                          "type": 39,
                          "typeName": "Junction"
                        }
                      ],
                      "index": 37
                    },
                    {
                      "name": "ExportMessage",
                      "fields": [
                        {
                          "name": "network",
                          "type": 42,
                          "typeName": "NetworkId"
                        },
                        {
                          "name": "destination",
                          "type": 38,
                          "typeName": "InteriorMultiLocation"
                        },
                        {
                          "name": "xcm",
                          "type": 317,
                          "typeName": "Xcm<()>"
                        }
                      ],
                      "index": 38
                    },
                    {
                      "name": "LockAsset",
                      "fields": [
                        {
                          "name": "asset",
                          "type": 111,
                          "typeName": "MultiAsset"
                        },
                        {
                          "name": "unlocker",
                          "type": 37,
                          "typeName": "MultiLocation"
                        }
                      ],
                      "index": 39
                    },
                    {
                      "name": "UnlockAsset",
                      "fields": [
                        {
                          "name": "asset",
                          "type": 111,
                          "typeName": "MultiAsset"
                        },
                        {
                          "name": "target",
                          "type": 37,
                          "typeName": "MultiLocation"
                        }
                      ],
                      "index": 40
                    },
                    {
                      "name": "NoteUnlockable",
                      "fields": [
                        {
                          "name": "asset",
                          "type": 111,
                          "typeName": "MultiAsset"
                        },
                        {
                          "name": "owner",
                          "type": 37,
                          "typeName": "MultiLocation"
                        }
                      ],
                      "index": 41
                    },
                    {
                      "name": "RequestUnlock",
                      "fields": [
                        {
                          "name": "asset",
                          "type": 111,
                          "typeName": "MultiAsset"
                        },
                        {
                          "name": "locker",
                          "type": 37,
                          "typeName": "MultiLocation"
                        }
                      ],
                      "index": 42
                    },
                    {
                      "name": "SetFeesMode",
                      "fields": [
                        {
                          "name": "jit_withdraw",
                          "type": 8,
                          "typeName": "bool"
                        }
                      ],
                      "index": 43
                    },
                    {
                      "name": "SetTopic",
                      "fields": [
                        {
                          "type": 1,
                          "typeName": "[u8; 32]"
                        }
                      ],
                      "index": 44
                    },
                    {
                      "name": "ClearTopic",
                      "index": 45
                    },
                    {
                      "name": "AliasOrigin",
                      "fields": [
                        {
                          "type": 37,
                          "typeName": "MultiLocation"
                        }
                      ],
                      "index": 46
                    },
                    {
                      "name": "UnpaidExecution",
                      "fields": [
                        {
                          "name": "weight_limit",
                          "type": 94,
                          "typeName": "WeightLimit"
                        },
                        {
                          "name": "check_origin",
                          "type": 320,
                          "typeName": "Option<MultiLocation>"
                        }
                      ],
                      "index": 47
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 320,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 37
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 37
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 321,
            "type": {
              "path": [
                "xcm",
                "v3",
                "QueryResponseInfo"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "destination",
                      "type": 37,
                      "typeName": "MultiLocation"
                    },
                    {
                      "name": "query_id",
                      "type": 11,
                      "typeName": "QueryId"
                    },
                    {
                      "name": "max_weight",
                      "type": 10,
                      "typeName": "Weight"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 322,
            "type": {
              "path": [
                "xcm",
                "v3",
                "multiasset",
                "MultiAssetFilter"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Definite",
                      "fields": [
                        {
                          "type": 109,
                          "typeName": "MultiAssets"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Wild",
                      "fields": [
                        {
                          "type": 323,
                          "typeName": "WildMultiAsset"
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 323,
            "type": {
              "path": [
                "xcm",
                "v3",
                "multiasset",
                "WildMultiAsset"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "All",
                      "index": 0
                    },
                    {
                      "name": "AllOf",
                      "fields": [
                        {
                          "name": "id",
                          "type": 112,
                          "typeName": "AssetId"
                        },
                        {
                          "name": "fun",
                          "type": 324,
                          "typeName": "WildFungibility"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "AllCounted",
                      "fields": [
                        {
                          "type": 40,
                          "typeName": "u32"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "AllOfCounted",
                      "fields": [
                        {
                          "name": "id",
                          "type": 112,
                          "typeName": "AssetId"
                        },
                        {
                          "name": "fun",
                          "type": 324,
                          "typeName": "WildFungibility"
                        },
                        {
                          "name": "count",
                          "type": 40,
                          "typeName": "u32"
                        }
                      ],
                      "index": 3
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 324,
            "type": {
              "path": [
                "xcm",
                "v3",
                "multiasset",
                "WildFungibility"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Fungible",
                      "index": 0
                    },
                    {
                      "name": "NonFungible",
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 325,
            "type": {
              "path": [
                "xcm",
                "VersionedXcm"
              ],
              "params": [
                {
                  "name": "RuntimeCall",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "V2",
                      "fields": [
                        {
                          "type": 326,
                          "typeName": "v2::Xcm<RuntimeCall>"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "V3",
                      "fields": [
                        {
                          "type": 330,
                          "typeName": "v3::Xcm<RuntimeCall>"
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "V4",
                      "fields": [
                        {
                          "type": 333,
                          "typeName": "v4::Xcm<RuntimeCall>"
                        }
                      ],
                      "index": 4
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 326,
            "type": {
              "path": [
                "xcm",
                "v2",
                "Xcm"
              ],
              "params": [
                {
                  "name": "RuntimeCall",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 327,
                      "typeName": "Vec<Instruction<RuntimeCall>>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 327,
            "type": {
              "def": {
                "sequence": {
                  "type": 328
                }
              }
            }
          },
          {
            "id": 328,
            "type": {
              "path": [
                "xcm",
                "v2",
                "Instruction"
              ],
              "params": [
                {
                  "name": "RuntimeCall",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "WithdrawAsset",
                      "fields": [
                        {
                          "type": 96,
                          "typeName": "MultiAssets"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "ReserveAssetDeposited",
                      "fields": [
                        {
                          "type": 96,
                          "typeName": "MultiAssets"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "ReceiveTeleportedAsset",
                      "fields": [
                        {
                          "type": 96,
                          "typeName": "MultiAssets"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "QueryResponse",
                      "fields": [
                        {
                          "name": "query_id",
                          "type": 11,
                          "typeName": "QueryId"
                        },
                        {
                          "name": "response",
                          "type": 282,
                          "typeName": "Response"
                        },
                        {
                          "name": "max_weight",
                          "type": 11,
                          "typeName": "u64"
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "TransferAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 96,
                          "typeName": "MultiAssets"
                        },
                        {
                          "name": "beneficiary",
                          "type": 100,
                          "typeName": "MultiLocation"
                        }
                      ],
                      "index": 4
                    },
                    {
                      "name": "TransferReserveAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 96,
                          "typeName": "MultiAssets"
                        },
                        {
                          "name": "dest",
                          "type": 100,
                          "typeName": "MultiLocation"
                        },
                        {
                          "name": "xcm",
                          "type": 309,
                          "typeName": "Xcm<()>"
                        }
                      ],
                      "index": 5
                    },
                    {
                      "name": "Transact",
                      "fields": [
                        {
                          "name": "origin_type",
                          "type": 312,
                          "typeName": "OriginKind"
                        },
                        {
                          "name": "require_weight_at_most",
                          "type": 11,
                          "typeName": "u64"
                        },
                        {
                          "name": "call",
                          "type": 329,
                          "typeName": "DoubleEncoded<RuntimeCall>"
                        }
                      ],
                      "index": 6
                    },
                    {
                      "name": "HrmpNewChannelOpenRequest",
                      "fields": [
                        {
                          "name": "sender",
                          "type": 40,
                          "typeName": "u32"
                        },
                        {
                          "name": "max_message_size",
                          "type": 40,
                          "typeName": "u32"
                        },
                        {
                          "name": "max_capacity",
                          "type": 40,
                          "typeName": "u32"
                        }
                      ],
                      "index": 7
                    },
                    {
                      "name": "HrmpChannelAccepted",
                      "fields": [
                        {
                          "name": "recipient",
                          "type": 40,
                          "typeName": "u32"
                        }
                      ],
                      "index": 8
                    },
                    {
                      "name": "HrmpChannelClosing",
                      "fields": [
                        {
                          "name": "initiator",
                          "type": 40,
                          "typeName": "u32"
                        },
                        {
                          "name": "sender",
                          "type": 40,
                          "typeName": "u32"
                        },
                        {
                          "name": "recipient",
                          "type": 40,
                          "typeName": "u32"
                        }
                      ],
                      "index": 9
                    },
                    {
                      "name": "ClearOrigin",
                      "index": 10
                    },
                    {
                      "name": "DescendOrigin",
                      "fields": [
                        {
                          "type": 101,
                          "typeName": "InteriorMultiLocation"
                        }
                      ],
                      "index": 11
                    },
                    {
                      "name": "ReportError",
                      "fields": [
                        {
                          "name": "query_id",
                          "type": 11,
                          "typeName": "QueryId"
                        },
                        {
                          "name": "dest",
                          "type": 100,
                          "typeName": "MultiLocation"
                        },
                        {
                          "name": "max_response_weight",
                          "type": 11,
                          "typeName": "u64"
                        }
                      ],
                      "index": 12
                    },
                    {
                      "name": "DepositAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 313,
                          "typeName": "MultiAssetFilter"
                        },
                        {
                          "name": "max_assets",
                          "type": 40,
                          "typeName": "u32"
                        },
                        {
                          "name": "beneficiary",
                          "type": 100,
                          "typeName": "MultiLocation"
                        }
                      ],
                      "index": 13
                    },
                    {
                      "name": "DepositReserveAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 313,
                          "typeName": "MultiAssetFilter"
                        },
                        {
                          "name": "max_assets",
                          "type": 40,
                          "typeName": "u32"
                        },
                        {
                          "name": "dest",
                          "type": 100,
                          "typeName": "MultiLocation"
                        },
                        {
                          "name": "xcm",
                          "type": 309,
                          "typeName": "Xcm<()>"
                        }
                      ],
                      "index": 14
                    },
                    {
                      "name": "ExchangeAsset",
                      "fields": [
                        {
                          "name": "give",
                          "type": 313,
                          "typeName": "MultiAssetFilter"
                        },
                        {
                          "name": "receive",
                          "type": 96,
                          "typeName": "MultiAssets"
                        }
                      ],
                      "index": 15
                    },
                    {
                      "name": "InitiateReserveWithdraw",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 313,
                          "typeName": "MultiAssetFilter"
                        },
                        {
                          "name": "reserve",
                          "type": 100,
                          "typeName": "MultiLocation"
                        },
                        {
                          "name": "xcm",
                          "type": 309,
                          "typeName": "Xcm<()>"
                        }
                      ],
                      "index": 16
                    },
                    {
                      "name": "InitiateTeleport",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 313,
                          "typeName": "MultiAssetFilter"
                        },
                        {
                          "name": "dest",
                          "type": 100,
                          "typeName": "MultiLocation"
                        },
                        {
                          "name": "xcm",
                          "type": 309,
                          "typeName": "Xcm<()>"
                        }
                      ],
                      "index": 17
                    },
                    {
                      "name": "QueryHolding",
                      "fields": [
                        {
                          "name": "query_id",
                          "type": 11,
                          "typeName": "QueryId"
                        },
                        {
                          "name": "dest",
                          "type": 100,
                          "typeName": "MultiLocation"
                        },
                        {
                          "name": "assets",
                          "type": 313,
                          "typeName": "MultiAssetFilter"
                        },
                        {
                          "name": "max_response_weight",
                          "type": 11,
                          "typeName": "u64"
                        }
                      ],
                      "index": 18
                    },
                    {
                      "name": "BuyExecution",
                      "fields": [
                        {
                          "name": "fees",
                          "type": 98,
                          "typeName": "MultiAsset"
                        },
                        {
                          "name": "weight_limit",
                          "type": 316,
                          "typeName": "WeightLimit"
                        }
                      ],
                      "index": 19
                    },
                    {
                      "name": "RefundSurplus",
                      "index": 20
                    },
                    {
                      "name": "SetErrorHandler",
                      "fields": [
                        {
                          "type": 326,
                          "typeName": "Xcm<RuntimeCall>"
                        }
                      ],
                      "index": 21
                    },
                    {
                      "name": "SetAppendix",
                      "fields": [
                        {
                          "type": 326,
                          "typeName": "Xcm<RuntimeCall>"
                        }
                      ],
                      "index": 22
                    },
                    {
                      "name": "ClearError",
                      "index": 23
                    },
                    {
                      "name": "ClaimAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 96,
                          "typeName": "MultiAssets"
                        },
                        {
                          "name": "ticket",
                          "type": 100,
                          "typeName": "MultiLocation"
                        }
                      ],
                      "index": 24
                    },
                    {
                      "name": "Trap",
                      "fields": [
                        {
                          "type": 11,
                          "typeName": "u64"
                        }
                      ],
                      "index": 25
                    },
                    {
                      "name": "SubscribeVersion",
                      "fields": [
                        {
                          "name": "query_id",
                          "type": 11,
                          "typeName": "QueryId"
                        },
                        {
                          "name": "max_response_weight",
                          "type": 11,
                          "typeName": "u64"
                        }
                      ],
                      "index": 26
                    },
                    {
                      "name": "UnsubscribeVersion",
                      "index": 27
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 329,
            "type": {
              "path": [
                "xcm",
                "double_encoded",
                "DoubleEncoded"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "encoded",
                      "type": 14,
                      "typeName": "Vec<u8>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 330,
            "type": {
              "path": [
                "xcm",
                "v3",
                "Xcm"
              ],
              "params": [
                {
                  "name": "Call",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 331,
                      "typeName": "Vec<Instruction<Call>>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 331,
            "type": {
              "def": {
                "sequence": {
                  "type": 332
                }
              }
            }
          },
          {
            "id": 332,
            "type": {
              "path": [
                "xcm",
                "v3",
                "Instruction"
              ],
              "params": [
                {
                  "name": "Call",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "WithdrawAsset",
                      "fields": [
                        {
                          "type": 109,
                          "typeName": "MultiAssets"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "ReserveAssetDeposited",
                      "fields": [
                        {
                          "type": 109,
                          "typeName": "MultiAssets"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "ReceiveTeleportedAsset",
                      "fields": [
                        {
                          "type": 109,
                          "typeName": "MultiAssets"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "QueryResponse",
                      "fields": [
                        {
                          "name": "query_id",
                          "type": 11,
                          "typeName": "QueryId"
                        },
                        {
                          "name": "response",
                          "type": 286,
                          "typeName": "Response"
                        },
                        {
                          "name": "max_weight",
                          "type": 10,
                          "typeName": "Weight"
                        },
                        {
                          "name": "querier",
                          "type": 320,
                          "typeName": "Option<MultiLocation>"
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "TransferAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 109,
                          "typeName": "MultiAssets"
                        },
                        {
                          "name": "beneficiary",
                          "type": 37,
                          "typeName": "MultiLocation"
                        }
                      ],
                      "index": 4
                    },
                    {
                      "name": "TransferReserveAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 109,
                          "typeName": "MultiAssets"
                        },
                        {
                          "name": "dest",
                          "type": 37,
                          "typeName": "MultiLocation"
                        },
                        {
                          "name": "xcm",
                          "type": 317,
                          "typeName": "Xcm<()>"
                        }
                      ],
                      "index": 5
                    },
                    {
                      "name": "Transact",
                      "fields": [
                        {
                          "name": "origin_kind",
                          "type": 88,
                          "typeName": "OriginKind"
                        },
                        {
                          "name": "require_weight_at_most",
                          "type": 10,
                          "typeName": "Weight"
                        },
                        {
                          "name": "call",
                          "type": 329,
                          "typeName": "DoubleEncoded<Call>"
                        }
                      ],
                      "index": 6
                    },
                    {
                      "name": "HrmpNewChannelOpenRequest",
                      "fields": [
                        {
                          "name": "sender",
                          "type": 40,
                          "typeName": "u32"
                        },
                        {
                          "name": "max_message_size",
                          "type": 40,
                          "typeName": "u32"
                        },
                        {
                          "name": "max_capacity",
                          "type": 40,
                          "typeName": "u32"
                        }
                      ],
                      "index": 7
                    },
                    {
                      "name": "HrmpChannelAccepted",
                      "fields": [
                        {
                          "name": "recipient",
                          "type": 40,
                          "typeName": "u32"
                        }
                      ],
                      "index": 8
                    },
                    {
                      "name": "HrmpChannelClosing",
                      "fields": [
                        {
                          "name": "initiator",
                          "type": 40,
                          "typeName": "u32"
                        },
                        {
                          "name": "sender",
                          "type": 40,
                          "typeName": "u32"
                        },
                        {
                          "name": "recipient",
                          "type": 40,
                          "typeName": "u32"
                        }
                      ],
                      "index": 9
                    },
                    {
                      "name": "ClearOrigin",
                      "index": 10
                    },
                    {
                      "name": "DescendOrigin",
                      "fields": [
                        {
                          "type": 38,
                          "typeName": "InteriorMultiLocation"
                        }
                      ],
                      "index": 11
                    },
                    {
                      "name": "ReportError",
                      "fields": [
                        {
                          "type": 321,
                          "typeName": "QueryResponseInfo"
                        }
                      ],
                      "index": 12
                    },
                    {
                      "name": "DepositAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 322,
                          "typeName": "MultiAssetFilter"
                        },
                        {
                          "name": "beneficiary",
                          "type": 37,
                          "typeName": "MultiLocation"
                        }
                      ],
                      "index": 13
                    },
                    {
                      "name": "DepositReserveAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 322,
                          "typeName": "MultiAssetFilter"
                        },
                        {
                          "name": "dest",
                          "type": 37,
                          "typeName": "MultiLocation"
                        },
                        {
                          "name": "xcm",
                          "type": 317,
                          "typeName": "Xcm<()>"
                        }
                      ],
                      "index": 14
                    },
                    {
                      "name": "ExchangeAsset",
                      "fields": [
                        {
                          "name": "give",
                          "type": 322,
                          "typeName": "MultiAssetFilter"
                        },
                        {
                          "name": "want",
                          "type": 109,
                          "typeName": "MultiAssets"
                        },
                        {
                          "name": "maximal",
                          "type": 8,
                          "typeName": "bool"
                        }
                      ],
                      "index": 15
                    },
                    {
                      "name": "InitiateReserveWithdraw",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 322,
                          "typeName": "MultiAssetFilter"
                        },
                        {
                          "name": "reserve",
                          "type": 37,
                          "typeName": "MultiLocation"
                        },
                        {
                          "name": "xcm",
                          "type": 317,
                          "typeName": "Xcm<()>"
                        }
                      ],
                      "index": 16
                    },
                    {
                      "name": "InitiateTeleport",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 322,
                          "typeName": "MultiAssetFilter"
                        },
                        {
                          "name": "dest",
                          "type": 37,
                          "typeName": "MultiLocation"
                        },
                        {
                          "name": "xcm",
                          "type": 317,
                          "typeName": "Xcm<()>"
                        }
                      ],
                      "index": 17
                    },
                    {
                      "name": "ReportHolding",
                      "fields": [
                        {
                          "name": "response_info",
                          "type": 321,
                          "typeName": "QueryResponseInfo"
                        },
                        {
                          "name": "assets",
                          "type": 322,
                          "typeName": "MultiAssetFilter"
                        }
                      ],
                      "index": 18
                    },
                    {
                      "name": "BuyExecution",
                      "fields": [
                        {
                          "name": "fees",
                          "type": 111,
                          "typeName": "MultiAsset"
                        },
                        {
                          "name": "weight_limit",
                          "type": 94,
                          "typeName": "WeightLimit"
                        }
                      ],
                      "index": 19
                    },
                    {
                      "name": "RefundSurplus",
                      "index": 20
                    },
                    {
                      "name": "SetErrorHandler",
                      "fields": [
                        {
                          "type": 330,
                          "typeName": "Xcm<Call>"
                        }
                      ],
                      "index": 21
                    },
                    {
                      "name": "SetAppendix",
                      "fields": [
                        {
                          "type": 330,
                          "typeName": "Xcm<Call>"
                        }
                      ],
                      "index": 22
                    },
                    {
                      "name": "ClearError",
                      "index": 23
                    },
                    {
                      "name": "ClaimAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 109,
                          "typeName": "MultiAssets"
                        },
                        {
                          "name": "ticket",
                          "type": 37,
                          "typeName": "MultiLocation"
                        }
                      ],
                      "index": 24
                    },
                    {
                      "name": "Trap",
                      "fields": [
                        {
                          "type": 11,
                          "typeName": "u64"
                        }
                      ],
                      "index": 25
                    },
                    {
                      "name": "SubscribeVersion",
                      "fields": [
                        {
                          "name": "query_id",
                          "type": 11,
                          "typeName": "QueryId"
                        },
                        {
                          "name": "max_response_weight",
                          "type": 10,
                          "typeName": "Weight"
                        }
                      ],
                      "index": 26
                    },
                    {
                      "name": "UnsubscribeVersion",
                      "index": 27
                    },
                    {
                      "name": "BurnAsset",
                      "fields": [
                        {
                          "type": 109,
                          "typeName": "MultiAssets"
                        }
                      ],
                      "index": 28
                    },
                    {
                      "name": "ExpectAsset",
                      "fields": [
                        {
                          "type": 109,
                          "typeName": "MultiAssets"
                        }
                      ],
                      "index": 29
                    },
                    {
                      "name": "ExpectOrigin",
                      "fields": [
                        {
                          "type": 320,
                          "typeName": "Option<MultiLocation>"
                        }
                      ],
                      "index": 30
                    },
                    {
                      "name": "ExpectError",
                      "fields": [
                        {
                          "type": 79,
                          "typeName": "Option<(u32, Error)>"
                        }
                      ],
                      "index": 31
                    },
                    {
                      "name": "ExpectTransactStatus",
                      "fields": [
                        {
                          "type": 85,
                          "typeName": "MaybeErrorCode"
                        }
                      ],
                      "index": 32
                    },
                    {
                      "name": "QueryPallet",
                      "fields": [
                        {
                          "name": "module_name",
                          "type": 14,
                          "typeName": "Vec<u8>"
                        },
                        {
                          "name": "response_info",
                          "type": 321,
                          "typeName": "QueryResponseInfo"
                        }
                      ],
                      "index": 33
                    },
                    {
                      "name": "ExpectPallet",
                      "fields": [
                        {
                          "name": "index",
                          "type": 40,
                          "typeName": "u32"
                        },
                        {
                          "name": "name",
                          "type": 14,
                          "typeName": "Vec<u8>"
                        },
                        {
                          "name": "module_name",
                          "type": 14,
                          "typeName": "Vec<u8>"
                        },
                        {
                          "name": "crate_major",
                          "type": 40,
                          "typeName": "u32"
                        },
                        {
                          "name": "min_crate_minor",
                          "type": 40,
                          "typeName": "u32"
                        }
                      ],
                      "index": 34
                    },
                    {
                      "name": "ReportTransactStatus",
                      "fields": [
                        {
                          "type": 321,
                          "typeName": "QueryResponseInfo"
                        }
                      ],
                      "index": 35
                    },
                    {
                      "name": "ClearTransactStatus",
                      "index": 36
                    },
                    {
                      "name": "UniversalOrigin",
                      "fields": [
                        {
                          "type": 39,
                          "typeName": "Junction"
                        }
                      ],
                      "index": 37
                    },
                    {
                      "name": "ExportMessage",
                      "fields": [
                        {
                          "name": "network",
                          "type": 42,
                          "typeName": "NetworkId"
                        },
                        {
                          "name": "destination",
                          "type": 38,
                          "typeName": "InteriorMultiLocation"
                        },
                        {
                          "name": "xcm",
                          "type": 317,
                          "typeName": "Xcm<()>"
                        }
                      ],
                      "index": 38
                    },
                    {
                      "name": "LockAsset",
                      "fields": [
                        {
                          "name": "asset",
                          "type": 111,
                          "typeName": "MultiAsset"
                        },
                        {
                          "name": "unlocker",
                          "type": 37,
                          "typeName": "MultiLocation"
                        }
                      ],
                      "index": 39
                    },
                    {
                      "name": "UnlockAsset",
                      "fields": [
                        {
                          "name": "asset",
                          "type": 111,
                          "typeName": "MultiAsset"
                        },
                        {
                          "name": "target",
                          "type": 37,
                          "typeName": "MultiLocation"
                        }
                      ],
                      "index": 40
                    },
                    {
                      "name": "NoteUnlockable",
                      "fields": [
                        {
                          "name": "asset",
                          "type": 111,
                          "typeName": "MultiAsset"
                        },
                        {
                          "name": "owner",
                          "type": 37,
                          "typeName": "MultiLocation"
                        }
                      ],
                      "index": 41
                    },
                    {
                      "name": "RequestUnlock",
                      "fields": [
                        {
                          "name": "asset",
                          "type": 111,
                          "typeName": "MultiAsset"
                        },
                        {
                          "name": "locker",
                          "type": 37,
                          "typeName": "MultiLocation"
                        }
                      ],
                      "index": 42
                    },
                    {
                      "name": "SetFeesMode",
                      "fields": [
                        {
                          "name": "jit_withdraw",
                          "type": 8,
                          "typeName": "bool"
                        }
                      ],
                      "index": 43
                    },
                    {
                      "name": "SetTopic",
                      "fields": [
                        {
                          "type": 1,
                          "typeName": "[u8; 32]"
                        }
                      ],
                      "index": 44
                    },
                    {
                      "name": "ClearTopic",
                      "index": 45
                    },
                    {
                      "name": "AliasOrigin",
                      "fields": [
                        {
                          "type": 37,
                          "typeName": "MultiLocation"
                        }
                      ],
                      "index": 46
                    },
                    {
                      "name": "UnpaidExecution",
                      "fields": [
                        {
                          "name": "weight_limit",
                          "type": 94,
                          "typeName": "WeightLimit"
                        },
                        {
                          "name": "check_origin",
                          "type": 320,
                          "typeName": "Option<MultiLocation>"
                        }
                      ],
                      "index": 47
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 333,
            "type": {
              "path": [
                "staging_xcm",
                "v4",
                "Xcm"
              ],
              "params": [
                {
                  "name": "Call",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 334,
                      "typeName": "Vec<Instruction<Call>>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 334,
            "type": {
              "def": {
                "sequence": {
                  "type": 335
                }
              }
            }
          },
          {
            "id": 335,
            "type": {
              "path": [
                "staging_xcm",
                "v4",
                "Instruction"
              ],
              "params": [
                {
                  "name": "Call",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "WithdrawAsset",
                      "fields": [
                        {
                          "type": 70,
                          "typeName": "Assets"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "ReserveAssetDeposited",
                      "fields": [
                        {
                          "type": 70,
                          "typeName": "Assets"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "ReceiveTeleportedAsset",
                      "fields": [
                        {
                          "type": 70,
                          "typeName": "Assets"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "QueryResponse",
                      "fields": [
                        {
                          "name": "query_id",
                          "type": 11,
                          "typeName": "QueryId"
                        },
                        {
                          "name": "response",
                          "type": 78,
                          "typeName": "Response"
                        },
                        {
                          "name": "max_weight",
                          "type": 10,
                          "typeName": "Weight"
                        },
                        {
                          "name": "querier",
                          "type": 87,
                          "typeName": "Option<Location>"
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "TransferAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 70,
                          "typeName": "Assets"
                        },
                        {
                          "name": "beneficiary",
                          "type": 54,
                          "typeName": "Location"
                        }
                      ],
                      "index": 4
                    },
                    {
                      "name": "TransferReserveAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 70,
                          "typeName": "Assets"
                        },
                        {
                          "name": "dest",
                          "type": 54,
                          "typeName": "Location"
                        },
                        {
                          "name": "xcm",
                          "type": 67,
                          "typeName": "Xcm<()>"
                        }
                      ],
                      "index": 5
                    },
                    {
                      "name": "Transact",
                      "fields": [
                        {
                          "name": "origin_kind",
                          "type": 88,
                          "typeName": "OriginKind"
                        },
                        {
                          "name": "require_weight_at_most",
                          "type": 10,
                          "typeName": "Weight"
                        },
                        {
                          "name": "call",
                          "type": 329,
                          "typeName": "DoubleEncoded<Call>"
                        }
                      ],
                      "index": 6
                    },
                    {
                      "name": "HrmpNewChannelOpenRequest",
                      "fields": [
                        {
                          "name": "sender",
                          "type": 40,
                          "typeName": "u32"
                        },
                        {
                          "name": "max_message_size",
                          "type": 40,
                          "typeName": "u32"
                        },
                        {
                          "name": "max_capacity",
                          "type": 40,
                          "typeName": "u32"
                        }
                      ],
                      "index": 7
                    },
                    {
                      "name": "HrmpChannelAccepted",
                      "fields": [
                        {
                          "name": "recipient",
                          "type": 40,
                          "typeName": "u32"
                        }
                      ],
                      "index": 8
                    },
                    {
                      "name": "HrmpChannelClosing",
                      "fields": [
                        {
                          "name": "initiator",
                          "type": 40,
                          "typeName": "u32"
                        },
                        {
                          "name": "sender",
                          "type": 40,
                          "typeName": "u32"
                        },
                        {
                          "name": "recipient",
                          "type": 40,
                          "typeName": "u32"
                        }
                      ],
                      "index": 9
                    },
                    {
                      "name": "ClearOrigin",
                      "index": 10
                    },
                    {
                      "name": "DescendOrigin",
                      "fields": [
                        {
                          "type": 55,
                          "typeName": "InteriorLocation"
                        }
                      ],
                      "index": 11
                    },
                    {
                      "name": "ReportError",
                      "fields": [
                        {
                          "type": 90,
                          "typeName": "QueryResponseInfo"
                        }
                      ],
                      "index": 12
                    },
                    {
                      "name": "DepositAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 91,
                          "typeName": "AssetFilter"
                        },
                        {
                          "name": "beneficiary",
                          "type": 54,
                          "typeName": "Location"
                        }
                      ],
                      "index": 13
                    },
                    {
                      "name": "DepositReserveAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 91,
                          "typeName": "AssetFilter"
                        },
                        {
                          "name": "dest",
                          "type": 54,
                          "typeName": "Location"
                        },
                        {
                          "name": "xcm",
                          "type": 67,
                          "typeName": "Xcm<()>"
                        }
                      ],
                      "index": 14
                    },
                    {
                      "name": "ExchangeAsset",
                      "fields": [
                        {
                          "name": "give",
                          "type": 91,
                          "typeName": "AssetFilter"
                        },
                        {
                          "name": "want",
                          "type": 70,
                          "typeName": "Assets"
                        },
                        {
                          "name": "maximal",
                          "type": 8,
                          "typeName": "bool"
                        }
                      ],
                      "index": 15
                    },
                    {
                      "name": "InitiateReserveWithdraw",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 91,
                          "typeName": "AssetFilter"
                        },
                        {
                          "name": "reserve",
                          "type": 54,
                          "typeName": "Location"
                        },
                        {
                          "name": "xcm",
                          "type": 67,
                          "typeName": "Xcm<()>"
                        }
                      ],
                      "index": 16
                    },
                    {
                      "name": "InitiateTeleport",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 91,
                          "typeName": "AssetFilter"
                        },
                        {
                          "name": "dest",
                          "type": 54,
                          "typeName": "Location"
                        },
                        {
                          "name": "xcm",
                          "type": 67,
                          "typeName": "Xcm<()>"
                        }
                      ],
                      "index": 17
                    },
                    {
                      "name": "ReportHolding",
                      "fields": [
                        {
                          "name": "response_info",
                          "type": 90,
                          "typeName": "QueryResponseInfo"
                        },
                        {
                          "name": "assets",
                          "type": 91,
                          "typeName": "AssetFilter"
                        }
                      ],
                      "index": 18
                    },
                    {
                      "name": "BuyExecution",
                      "fields": [
                        {
                          "name": "fees",
                          "type": 72,
                          "typeName": "Asset"
                        },
                        {
                          "name": "weight_limit",
                          "type": 94,
                          "typeName": "WeightLimit"
                        }
                      ],
                      "index": 19
                    },
                    {
                      "name": "RefundSurplus",
                      "index": 20
                    },
                    {
                      "name": "SetErrorHandler",
                      "fields": [
                        {
                          "type": 333,
                          "typeName": "Xcm<Call>"
                        }
                      ],
                      "index": 21
                    },
                    {
                      "name": "SetAppendix",
                      "fields": [
                        {
                          "type": 333,
                          "typeName": "Xcm<Call>"
                        }
                      ],
                      "index": 22
                    },
                    {
                      "name": "ClearError",
                      "index": 23
                    },
                    {
                      "name": "ClaimAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 70,
                          "typeName": "Assets"
                        },
                        {
                          "name": "ticket",
                          "type": 54,
                          "typeName": "Location"
                        }
                      ],
                      "index": 24
                    },
                    {
                      "name": "Trap",
                      "fields": [
                        {
                          "type": 11,
                          "typeName": "u64"
                        }
                      ],
                      "index": 25
                    },
                    {
                      "name": "SubscribeVersion",
                      "fields": [
                        {
                          "name": "query_id",
                          "type": 11,
                          "typeName": "QueryId"
                        },
                        {
                          "name": "max_response_weight",
                          "type": 10,
                          "typeName": "Weight"
                        }
                      ],
                      "index": 26
                    },
                    {
                      "name": "UnsubscribeVersion",
                      "index": 27
                    },
                    {
                      "name": "BurnAsset",
                      "fields": [
                        {
                          "type": 70,
                          "typeName": "Assets"
                        }
                      ],
                      "index": 28
                    },
                    {
                      "name": "ExpectAsset",
                      "fields": [
                        {
                          "type": 70,
                          "typeName": "Assets"
                        }
                      ],
                      "index": 29
                    },
                    {
                      "name": "ExpectOrigin",
                      "fields": [
                        {
                          "type": 87,
                          "typeName": "Option<Location>"
                        }
                      ],
                      "index": 30
                    },
                    {
                      "name": "ExpectError",
                      "fields": [
                        {
                          "type": 79,
                          "typeName": "Option<(u32, Error)>"
                        }
                      ],
                      "index": 31
                    },
                    {
                      "name": "ExpectTransactStatus",
                      "fields": [
                        {
                          "type": 85,
                          "typeName": "MaybeErrorCode"
                        }
                      ],
                      "index": 32
                    },
                    {
                      "name": "QueryPallet",
                      "fields": [
                        {
                          "name": "module_name",
                          "type": 14,
                          "typeName": "Vec<u8>"
                        },
                        {
                          "name": "response_info",
                          "type": 90,
                          "typeName": "QueryResponseInfo"
                        }
                      ],
                      "index": 33
                    },
                    {
                      "name": "ExpectPallet",
                      "fields": [
                        {
                          "name": "index",
                          "type": 40,
                          "typeName": "u32"
                        },
                        {
                          "name": "name",
                          "type": 14,
                          "typeName": "Vec<u8>"
                        },
                        {
                          "name": "module_name",
                          "type": 14,
                          "typeName": "Vec<u8>"
                        },
                        {
                          "name": "crate_major",
                          "type": 40,
                          "typeName": "u32"
                        },
                        {
                          "name": "min_crate_minor",
                          "type": 40,
                          "typeName": "u32"
                        }
                      ],
                      "index": 34
                    },
                    {
                      "name": "ReportTransactStatus",
                      "fields": [
                        {
                          "type": 90,
                          "typeName": "QueryResponseInfo"
                        }
                      ],
                      "index": 35
                    },
                    {
                      "name": "ClearTransactStatus",
                      "index": 36
                    },
                    {
                      "name": "UniversalOrigin",
                      "fields": [
                        {
                          "type": 57,
                          "typeName": "Junction"
                        }
                      ],
                      "index": 37
                    },
                    {
                      "name": "ExportMessage",
                      "fields": [
                        {
                          "name": "network",
                          "type": 59,
                          "typeName": "NetworkId"
                        },
                        {
                          "name": "destination",
                          "type": 55,
                          "typeName": "InteriorLocation"
                        },
                        {
                          "name": "xcm",
                          "type": 67,
                          "typeName": "Xcm<()>"
                        }
                      ],
                      "index": 38
                    },
                    {
                      "name": "LockAsset",
                      "fields": [
                        {
                          "name": "asset",
                          "type": 72,
                          "typeName": "Asset"
                        },
                        {
                          "name": "unlocker",
                          "type": 54,
                          "typeName": "Location"
                        }
                      ],
                      "index": 39
                    },
                    {
                      "name": "UnlockAsset",
                      "fields": [
                        {
                          "name": "asset",
                          "type": 72,
                          "typeName": "Asset"
                        },
                        {
                          "name": "target",
                          "type": 54,
                          "typeName": "Location"
                        }
                      ],
                      "index": 40
                    },
                    {
                      "name": "NoteUnlockable",
                      "fields": [
                        {
                          "name": "asset",
                          "type": 72,
                          "typeName": "Asset"
                        },
                        {
                          "name": "owner",
                          "type": 54,
                          "typeName": "Location"
                        }
                      ],
                      "index": 41
                    },
                    {
                      "name": "RequestUnlock",
                      "fields": [
                        {
                          "name": "asset",
                          "type": 72,
                          "typeName": "Asset"
                        },
                        {
                          "name": "locker",
                          "type": 54,
                          "typeName": "Location"
                        }
                      ],
                      "index": 42
                    },
                    {
                      "name": "SetFeesMode",
                      "fields": [
                        {
                          "name": "jit_withdraw",
                          "type": 8,
                          "typeName": "bool"
                        }
                      ],
                      "index": 43
                    },
                    {
                      "name": "SetTopic",
                      "fields": [
                        {
                          "type": 1,
                          "typeName": "[u8; 32]"
                        }
                      ],
                      "index": 44
                    },
                    {
                      "name": "ClearTopic",
                      "index": 45
                    },
                    {
                      "name": "AliasOrigin",
                      "fields": [
                        {
                          "type": 54,
                          "typeName": "Location"
                        }
                      ],
                      "index": 46
                    },
                    {
                      "name": "UnpaidExecution",
                      "fields": [
                        {
                          "name": "weight_limit",
                          "type": 94,
                          "typeName": "WeightLimit"
                        },
                        {
                          "name": "check_origin",
                          "type": 87,
                          "typeName": "Option<Location>"
                        }
                      ],
                      "index": 47
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 336,
            "type": {
              "path": [
                "staging_xcm_executor",
                "traits",
                "asset_transfer",
                "TransferType"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Teleport",
                      "index": 0
                    },
                    {
                      "name": "LocalReserve",
                      "index": 1
                    },
                    {
                      "name": "DestinationReserve",
                      "index": 2
                    },
                    {
                      "name": "RemoteReserve",
                      "fields": [
                        {
                          "type": 115,
                          "typeName": "VersionedLocation"
                        }
                      ],
                      "index": 3
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 337,
            "type": {
              "path": [
                "pallet_xcm",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Unreachable",
                      "index": 0,
                      "docs": [
                        "The desired destination was unreachable, generally because there is a no way of routing",
                        "to it."
                      ]
                    },
                    {
                      "name": "SendFailure",
                      "index": 1,
                      "docs": [
                        "There was some other issue (i.e. not to do with routing) in sending the message.",
                        "Perhaps a lack of space for buffering the message."
                      ]
                    },
                    {
                      "name": "Filtered",
                      "index": 2,
                      "docs": [
                        "The message execution fails the filter."
                      ]
                    },
                    {
                      "name": "UnweighableMessage",
                      "index": 3,
                      "docs": [
                        "The message's weight could not be determined."
                      ]
                    },
                    {
                      "name": "DestinationNotInvertible",
                      "index": 4,
                      "docs": [
                        "The destination `Location` provided cannot be inverted."
                      ]
                    },
                    {
                      "name": "Empty",
                      "index": 5,
                      "docs": [
                        "The assets to be sent are empty."
                      ]
                    },
                    {
                      "name": "CannotReanchor",
                      "index": 6,
                      "docs": [
                        "Could not re-anchor the assets to declare the fees for the destination chain."
                      ]
                    },
                    {
                      "name": "TooManyAssets",
                      "index": 7,
                      "docs": [
                        "Too many assets have been attempted for transfer."
                      ]
                    },
                    {
                      "name": "InvalidOrigin",
                      "index": 8,
                      "docs": [
                        "Origin is invalid for sending."
                      ]
                    },
                    {
                      "name": "BadVersion",
                      "index": 9,
                      "docs": [
                        "The version of the `Versioned` value used is not able to be interpreted."
                      ]
                    },
                    {
                      "name": "BadLocation",
                      "index": 10,
                      "docs": [
                        "The given location could not be used (e.g. because it cannot be expressed in the",
                        "desired version of XCM)."
                      ]
                    },
                    {
                      "name": "NoSubscription",
                      "index": 11,
                      "docs": [
                        "The referenced subscription could not be found."
                      ]
                    },
                    {
                      "name": "AlreadySubscribed",
                      "index": 12,
                      "docs": [
                        "The location is invalid since it already has a subscription from us."
                      ]
                    },
                    {
                      "name": "CannotCheckOutTeleport",
                      "index": 13,
                      "docs": [
                        "Could not check-out the assets for teleportation to the destination chain."
                      ]
                    },
                    {
                      "name": "LowBalance",
                      "index": 14,
                      "docs": [
                        "The owner does not own (all) of the asset that they wish to do the operation on."
                      ]
                    },
                    {
                      "name": "TooManyLocks",
                      "index": 15,
                      "docs": [
                        "The asset owner has too many locks on the asset."
                      ]
                    },
                    {
                      "name": "AccountNotSovereign",
                      "index": 16,
                      "docs": [
                        "The given account is not an identifiable sovereign account for any location."
                      ]
                    },
                    {
                      "name": "FeesNotMet",
                      "index": 17,
                      "docs": [
                        "The operation required fees to be paid which the initiator could not meet."
                      ]
                    },
                    {
                      "name": "LockNotFound",
                      "index": 18,
                      "docs": [
                        "A remote lock with the corresponding data could not be found."
                      ]
                    },
                    {
                      "name": "InUse",
                      "index": 19,
                      "docs": [
                        "The unlock operation cannot succeed because there are still consumers of the lock."
                      ]
                    },
                    {
                      "name": "InvalidAssetUnknownReserve",
                      "index": 21,
                      "docs": [
                        "Invalid asset, reserve chain could not be determined for it."
                      ]
                    },
                    {
                      "name": "InvalidAssetUnsupportedReserve",
                      "index": 22,
                      "docs": [
                        "Invalid asset, do not support remote asset reserves with different fees reserves."
                      ]
                    },
                    {
                      "name": "TooManyReserves",
                      "index": 23,
                      "docs": [
                        "Too many assets with different reserve locations have been attempted for transfer."
                      ]
                    },
                    {
                      "name": "LocalExecutionIncomplete",
                      "index": 24,
                      "docs": [
                        "Local XCM execution incomplete."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "The `Error` enum of this pallet."
              ]
            }
          },
          {
            "id": 338,
            "type": {
              "path": [
                "cumulus_pallet_xcm",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {}
              },
              "docs": [
                "Contains a variant per dispatchable extrinsic that this pallet has."
              ]
            }
          },
          {
            "id": 339,
            "type": {
              "path": [
                "bp_xcm_bridge_hub_router",
                "BridgeState"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "delivery_fee_factor",
                      "type": 212,
                      "typeName": "FixedU128"
                    },
                    {
                      "name": "is_congested",
                      "type": 8,
                      "typeName": "bool"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 340,
            "type": {
              "path": [
                "pallet_xcm_bridge_hub_router",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "report_bridge_status",
                      "fields": [
                        {
                          "name": "bridge_id",
                          "type": 13,
                          "typeName": "H256"
                        },
                        {
                          "name": "is_congested",
                          "type": 8,
                          "typeName": "bool"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Notification about congested bridge queue."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains a variant per dispatchable extrinsic that this pallet has."
              ]
            }
          },
          {
            "id": 341,
            "type": {
              "path": [
                "pallet_message_queue",
                "BookState"
              ],
              "params": [
                {
                  "name": "MessageOrigin",
                  "type": 118
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "begin",
                      "type": 4,
                      "typeName": "PageIndex"
                    },
                    {
                      "name": "end",
                      "type": 4,
                      "typeName": "PageIndex"
                    },
                    {
                      "name": "count",
                      "type": 4,
                      "typeName": "PageIndex"
                    },
                    {
                      "name": "ready_neighbours",
                      "type": 342,
                      "typeName": "Option<Neighbours<MessageOrigin>>"
                    },
                    {
                      "name": "message_count",
                      "type": 12,
                      "typeName": "u64"
                    },
                    {
                      "name": "size",
                      "type": 12,
                      "typeName": "u64"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 342,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 343
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 343
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 343,
            "type": {
              "path": [
                "pallet_message_queue",
                "Neighbours"
              ],
              "params": [
                {
                  "name": "MessageOrigin",
                  "type": 118
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "prev",
                      "type": 118,
                      "typeName": "MessageOrigin"
                    },
                    {
                      "name": "next",
                      "type": 118,
                      "typeName": "MessageOrigin"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 344,
            "type": {
              "def": {
                "tuple": [
                  118,
                  4
                ]
              }
            }
          },
          {
            "id": 345,
            "type": {
              "path": [
                "pallet_message_queue",
                "Page"
              ],
              "params": [
                {
                  "name": "Size",
                  "type": 4
                },
                {
                  "name": "HeapSize",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "remaining",
                      "type": 4,
                      "typeName": "Size"
                    },
                    {
                      "name": "remaining_size",
                      "type": 4,
                      "typeName": "Size"
                    },
                    {
                      "name": "first_index",
                      "type": 4,
                      "typeName": "Size"
                    },
                    {
                      "name": "first",
                      "type": 4,
                      "typeName": "Size"
                    },
                    {
                      "name": "last",
                      "type": 4,
                      "typeName": "Size"
                    },
                    {
                      "name": "heap",
                      "type": 346,
                      "typeName": "BoundedVec<u8, IntoU32<HeapSize, Size>>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 346,
            "type": {
              "path": [
                "bounded_collections",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 2
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 14,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 347,
            "type": {
              "path": [
                "pallet_message_queue",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "reap_page",
                      "fields": [
                        {
                          "name": "message_origin",
                          "type": 118,
                          "typeName": "MessageOriginOf<T>"
                        },
                        {
                          "name": "page_index",
                          "type": 4,
                          "typeName": "PageIndex"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Remove a page which has no more messages remaining to be processed or is stale."
                      ]
                    },
                    {
                      "name": "execute_overweight",
                      "fields": [
                        {
                          "name": "message_origin",
                          "type": 118,
                          "typeName": "MessageOriginOf<T>"
                        },
                        {
                          "name": "page",
                          "type": 4,
                          "typeName": "PageIndex"
                        },
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "T::Size"
                        },
                        {
                          "name": "weight_limit",
                          "type": 10,
                          "typeName": "Weight"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Execute an overweight message.",
                        "",
                        "Temporary processing errors will be propagated whereas permanent errors are treated",
                        "as success condition.",
                        "",
                        "- `origin`: Must be `Signed`.",
                        "- `message_origin`: The origin from which the message to be executed arrived.",
                        "- `page`: The page in the queue in which the message to be executed is sitting.",
                        "- `index`: The index into the queue of the message to be executed.",
                        "- `weight_limit`: The maximum amount of weight allowed to be consumed in the execution",
                        "  of the message.",
                        "",
                        "Benchmark complexity considerations: O(index + weight_limit)."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains a variant per dispatchable extrinsic that this pallet has."
              ]
            }
          },
          {
            "id": 348,
            "type": {
              "path": [
                "pallet_message_queue",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "NotReapable",
                      "index": 0,
                      "docs": [
                        "Page is not reapable because it has items remaining to be processed and is not old",
                        "enough."
                      ]
                    },
                    {
                      "name": "NoPage",
                      "index": 1,
                      "docs": [
                        "Page to be reaped does not exist."
                      ]
                    },
                    {
                      "name": "NoMessage",
                      "index": 2,
                      "docs": [
                        "The referenced message could not be found."
                      ]
                    },
                    {
                      "name": "AlreadyProcessed",
                      "index": 3,
                      "docs": [
                        "The message was already processed and cannot be processed again."
                      ]
                    },
                    {
                      "name": "Queued",
                      "index": 4,
                      "docs": [
                        "The message is queued for future execution."
                      ]
                    },
                    {
                      "name": "InsufficientWeight",
                      "index": 5,
                      "docs": [
                        "There is temporarily not enough weight to continue servicing messages."
                      ]
                    },
                    {
                      "name": "TemporarilyUnprocessable",
                      "index": 6,
                      "docs": [
                        "This message is temporarily unprocessable.",
                        "",
                        "Such errors are expected, but not guaranteed, to resolve themselves eventually through",
                        "retrying."
                      ]
                    },
                    {
                      "name": "QueuePaused",
                      "index": 7,
                      "docs": [
                        "The queue is paused and no message can be executed from it.",
                        "",
                        "This can change at any time and may resolve in the future by re-trying."
                      ]
                    },
                    {
                      "name": "RecursiveDisallowed",
                      "index": 8,
                      "docs": [
                        "Another call is in progress and needs to finish before this call can happen."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "The `Error` enum of this pallet."
              ]
            }
          },
          {
            "id": 349,
            "type": {
              "path": [
                "pallet_utility",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "batch",
                      "fields": [
                        {
                          "name": "calls",
                          "type": 350,
                          "typeName": "Vec<<T as Config>::RuntimeCall>"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Send a batch of dispatch calls.",
                        "",
                        "May be called from any origin except `None`.",
                        "",
                        "- `calls`: The calls to be dispatched from the same origin. The number of call must not",
                        "  exceed the constant: `batched_calls_limit` (available in constant metadata).",
                        "",
                        "If origin is root then the calls are dispatched without checking origin filter. (This",
                        "includes bypassing `frame_system::Config::BaseCallFilter`).",
                        "",
                        "## Complexity",
                        "- O(C) where C is the number of calls to be batched.",
                        "",
                        "This will return `Ok` in all circumstances. To determine the success of the batch, an",
                        "event is deposited. If a call failed and the batch was interrupted, then the",
                        "`BatchInterrupted` event is deposited, along with the number of successful calls made",
                        "and the error of the failed call. If all were successful, then the `BatchCompleted`",
                        "event is deposited."
                      ]
                    },
                    {
                      "name": "as_derivative",
                      "fields": [
                        {
                          "name": "index",
                          "type": 128,
                          "typeName": "u16"
                        },
                        {
                          "name": "call",
                          "type": 351,
                          "typeName": "Box<<T as Config>::RuntimeCall>"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Send a call through an indexed pseudonym of the sender.",
                        "",
                        "Filter from origin are passed along. The call will be dispatched with an origin which",
                        "use the same filter as the origin of this call.",
                        "",
                        "NOTE: If you need to ensure that any account-based filtering is not honored (i.e.",
                        "because you expect `proxy` to have been used prior in the call stack and you do not want",
                        "the call restrictions to apply to any sub-accounts), then use `as_multi_threshold_1`",
                        "in the Multisig pallet instead.",
                        "",
                        "NOTE: Prior to version *12, this was called `as_limited_sub`.",
                        "",
                        "The dispatch origin for this call must be _Signed_."
                      ]
                    },
                    {
                      "name": "batch_all",
                      "fields": [
                        {
                          "name": "calls",
                          "type": 350,
                          "typeName": "Vec<<T as Config>::RuntimeCall>"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Send a batch of dispatch calls and atomically execute them.",
                        "The whole transaction will rollback and fail if any of the calls failed.",
                        "",
                        "May be called from any origin except `None`.",
                        "",
                        "- `calls`: The calls to be dispatched from the same origin. The number of call must not",
                        "  exceed the constant: `batched_calls_limit` (available in constant metadata).",
                        "",
                        "If origin is root then the calls are dispatched without checking origin filter. (This",
                        "includes bypassing `frame_system::Config::BaseCallFilter`).",
                        "",
                        "## Complexity",
                        "- O(C) where C is the number of calls to be batched."
                      ]
                    },
                    {
                      "name": "dispatch_as",
                      "fields": [
                        {
                          "name": "as_origin",
                          "type": 394,
                          "typeName": "Box<T::PalletsOrigin>"
                        },
                        {
                          "name": "call",
                          "type": 351,
                          "typeName": "Box<<T as Config>::RuntimeCall>"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Dispatches a function call with a provided origin.",
                        "",
                        "The dispatch origin for this call must be _Root_.",
                        "",
                        "## Complexity",
                        "- O(1)."
                      ]
                    },
                    {
                      "name": "force_batch",
                      "fields": [
                        {
                          "name": "calls",
                          "type": 350,
                          "typeName": "Vec<<T as Config>::RuntimeCall>"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Send a batch of dispatch calls.",
                        "Unlike `batch`, it allows errors and won't interrupt.",
                        "",
                        "May be called from any origin except `None`.",
                        "",
                        "- `calls`: The calls to be dispatched from the same origin. The number of call must not",
                        "  exceed the constant: `batched_calls_limit` (available in constant metadata).",
                        "",
                        "If origin is root then the calls are dispatch without checking origin filter. (This",
                        "includes bypassing `frame_system::Config::BaseCallFilter`).",
                        "",
                        "## Complexity",
                        "- O(C) where C is the number of calls to be batched."
                      ]
                    },
                    {
                      "name": "with_weight",
                      "fields": [
                        {
                          "name": "call",
                          "type": 351,
                          "typeName": "Box<<T as Config>::RuntimeCall>"
                        },
                        {
                          "name": "weight",
                          "type": 10,
                          "typeName": "Weight"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Dispatch a function call with a specified weight.",
                        "",
                        "This function does not check the weight of the call, and instead allows the",
                        "Root origin to specify the weight of the call.",
                        "",
                        "The dispatch origin for this call must be _Root_."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains a variant per dispatchable extrinsic that this pallet has."
              ]
            }
          },
          {
            "id": 350,
            "type": {
              "def": {
                "sequence": {
                  "type": 351
                }
              }
            }
          },
          {
            "id": 351,
            "type": {
              "path": [
                "asset_hub_westend_runtime",
                "RuntimeCall"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "System",
                      "fields": [
                        {
                          "type": 166,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<System, Runtime>"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "ParachainSystem",
                      "fields": [
                        {
                          "type": 213,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<ParachainSystem, Runtime>"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "Timestamp",
                      "fields": [
                        {
                          "type": 223,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Timestamp, Runtime>"
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "ParachainInfo",
                      "fields": [
                        {
                          "type": 224,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<ParachainInfo, Runtime>"
                        }
                      ],
                      "index": 4
                    },
                    {
                      "name": "Balances",
                      "fields": [
                        {
                          "type": 241,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Balances, Runtime>"
                        }
                      ],
                      "index": 10
                    },
                    {
                      "name": "CollatorSelection",
                      "fields": [
                        {
                          "type": 251,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<CollatorSelection, Runtime>"
                        }
                      ],
                      "index": 21
                    },
                    {
                      "name": "Session",
                      "fields": [
                        {
                          "type": 259,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Session, Runtime>"
                        }
                      ],
                      "index": 22
                    },
                    {
                      "name": "XcmpQueue",
                      "fields": [
                        {
                          "type": 275,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<XcmpQueue, Runtime>"
                        }
                      ],
                      "index": 30
                    },
                    {
                      "name": "PolkadotXcm",
                      "fields": [
                        {
                          "type": 307,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<PolkadotXcm, Runtime>"
                        }
                      ],
                      "index": 31
                    },
                    {
                      "name": "CumulusXcm",
                      "fields": [
                        {
                          "type": 338,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<CumulusXcm, Runtime>"
                        }
                      ],
                      "index": 32
                    },
                    {
                      "name": "ToRococoXcmRouter",
                      "fields": [
                        {
                          "type": 340,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<ToRococoXcmRouter, Runtime>"
                        }
                      ],
                      "index": 34
                    },
                    {
                      "name": "MessageQueue",
                      "fields": [
                        {
                          "type": 347,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<MessageQueue, Runtime>"
                        }
                      ],
                      "index": 35
                    },
                    {
                      "name": "Utility",
                      "fields": [
                        {
                          "type": 349,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Utility, Runtime>"
                        }
                      ],
                      "index": 40
                    },
                    {
                      "name": "Multisig",
                      "fields": [
                        {
                          "type": 352,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Multisig, Runtime>"
                        }
                      ],
                      "index": 41
                    },
                    {
                      "name": "Proxy",
                      "fields": [
                        {
                          "type": 354,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Proxy, Runtime>"
                        }
                      ],
                      "index": 42
                    },
                    {
                      "name": "Assets",
                      "fields": [
                        {
                          "type": 356,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Assets, Runtime>"
                        }
                      ],
                      "index": 50
                    },
                    {
                      "name": "Uniques",
                      "fields": [
                        {
                          "type": 357,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Uniques, Runtime>"
                        }
                      ],
                      "index": 51
                    },
                    {
                      "name": "Nfts",
                      "fields": [
                        {
                          "type": 361,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Nfts, Runtime>"
                        }
                      ],
                      "index": 52
                    },
                    {
                      "name": "ForeignAssets",
                      "fields": [
                        {
                          "type": 382,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<ForeignAssets, Runtime>"
                        }
                      ],
                      "index": 53
                    },
                    {
                      "name": "NftFractionalization",
                      "fields": [
                        {
                          "type": 383,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<NftFractionalization, Runtime>"
                        }
                      ],
                      "index": 54
                    },
                    {
                      "name": "PoolAssets",
                      "fields": [
                        {
                          "type": 384,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<PoolAssets, Runtime>"
                        }
                      ],
                      "index": 55
                    },
                    {
                      "name": "AssetConversion",
                      "fields": [
                        {
                          "type": 385,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<AssetConversion, Runtime>"
                        }
                      ],
                      "index": 56
                    },
                    {
                      "name": "StateTrieMigration",
                      "fields": [
                        {
                          "type": 387,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<StateTrieMigration, Runtime>"
                        }
                      ],
                      "index": 70
                    },
                    {
                      "name": "AssetConversionMigration",
                      "fields": [
                        {
                          "type": 393,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<AssetConversionMigration, Runtime>"
                        }
                      ],
                      "index": 200
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 352,
            "type": {
              "path": [
                "pallet_multisig",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "as_multi_threshold_1",
                      "fields": [
                        {
                          "name": "other_signatories",
                          "type": 48,
                          "typeName": "Vec<T::AccountId>"
                        },
                        {
                          "name": "call",
                          "type": 351,
                          "typeName": "Box<<T as Config>::RuntimeCall>"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Immediately dispatch a multi-signature call using a single approval from the caller.",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "- `other_signatories`: The accounts (other than the sender) who are part of the",
                        "multi-signature, but do not participate in the approval process.",
                        "- `call`: The call to be executed.",
                        "",
                        "Result is equivalent to the dispatched result.",
                        "",
                        "## Complexity",
                        "O(Z + C) where Z is the length of the call and C its execution weight."
                      ]
                    },
                    {
                      "name": "as_multi",
                      "fields": [
                        {
                          "name": "threshold",
                          "type": 128,
                          "typeName": "u16"
                        },
                        {
                          "name": "other_signatories",
                          "type": 48,
                          "typeName": "Vec<T::AccountId>"
                        },
                        {
                          "name": "maybe_timepoint",
                          "type": 353,
                          "typeName": "Option<Timepoint<BlockNumberFor<T>>>"
                        },
                        {
                          "name": "call",
                          "type": 351,
                          "typeName": "Box<<T as Config>::RuntimeCall>"
                        },
                        {
                          "name": "max_weight",
                          "type": 10,
                          "typeName": "Weight"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Register approval for a dispatch to be made from a deterministic composite account if",
                        "approved by a total of `threshold - 1` of `other_signatories`.",
                        "",
                        "If there are enough, then dispatch the call.",
                        "",
                        "Payment: `DepositBase` will be reserved if this is the first approval, plus",
                        "`threshold` times `DepositFactor`. It is returned once this dispatch happens or",
                        "is cancelled.",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "- `threshold`: The total number of approvals for this dispatch before it is executed.",
                        "- `other_signatories`: The accounts (other than the sender) who can approve this",
                        "dispatch. May not be empty.",
                        "- `maybe_timepoint`: If this is the first approval, then this must be `None`. If it is",
                        "not the first approval, then it must be `Some`, with the timepoint (block number and",
                        "transaction index) of the first approval transaction.",
                        "- `call`: The call to be executed.",
                        "",
                        "NOTE: Unless this is the final approval, you will generally want to use",
                        "`approve_as_multi` instead, since it only requires a hash of the call.",
                        "",
                        "Result is equivalent to the dispatched result if `threshold` is exactly `1`. Otherwise",
                        "on success, result is `Ok` and the result from the interior call, if it was executed,",
                        "may be found in the deposited `MultisigExecuted` event.",
                        "",
                        "## Complexity",
                        "- `O(S + Z + Call)`.",
                        "- Up to one balance-reserve or unreserve operation.",
                        "- One passthrough operation, one insert, both `O(S)` where `S` is the number of",
                        "  signatories. `S` is capped by `MaxSignatories`, with weight being proportional.",
                        "- One call encode & hash, both of complexity `O(Z)` where `Z` is tx-len.",
                        "- One encode & hash, both of complexity `O(S)`.",
                        "- Up to one binary search and insert (`O(logS + S)`).",
                        "- I/O: 1 read `O(S)`, up to 1 mutate `O(S)`. Up to one remove.",
                        "- One event.",
                        "- The weight of the `call`.",
                        "- Storage: inserts one item, value size bounded by `MaxSignatories`, with a deposit",
                        "  taken for its lifetime of `DepositBase + threshold * DepositFactor`."
                      ]
                    },
                    {
                      "name": "approve_as_multi",
                      "fields": [
                        {
                          "name": "threshold",
                          "type": 128,
                          "typeName": "u16"
                        },
                        {
                          "name": "other_signatories",
                          "type": 48,
                          "typeName": "Vec<T::AccountId>"
                        },
                        {
                          "name": "maybe_timepoint",
                          "type": 353,
                          "typeName": "Option<Timepoint<BlockNumberFor<T>>>"
                        },
                        {
                          "name": "call_hash",
                          "type": 1,
                          "typeName": "[u8; 32]"
                        },
                        {
                          "name": "max_weight",
                          "type": 10,
                          "typeName": "Weight"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Register approval for a dispatch to be made from a deterministic composite account if",
                        "approved by a total of `threshold - 1` of `other_signatories`.",
                        "",
                        "Payment: `DepositBase` will be reserved if this is the first approval, plus",
                        "`threshold` times `DepositFactor`. It is returned once this dispatch happens or",
                        "is cancelled.",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "- `threshold`: The total number of approvals for this dispatch before it is executed.",
                        "- `other_signatories`: The accounts (other than the sender) who can approve this",
                        "dispatch. May not be empty.",
                        "- `maybe_timepoint`: If this is the first approval, then this must be `None`. If it is",
                        "not the first approval, then it must be `Some`, with the timepoint (block number and",
                        "transaction index) of the first approval transaction.",
                        "- `call_hash`: The hash of the call to be executed.",
                        "",
                        "NOTE: If this is the final approval, you will want to use `as_multi` instead.",
                        "",
                        "## Complexity",
                        "- `O(S)`.",
                        "- Up to one balance-reserve or unreserve operation.",
                        "- One passthrough operation, one insert, both `O(S)` where `S` is the number of",
                        "  signatories. `S` is capped by `MaxSignatories`, with weight being proportional.",
                        "- One encode & hash, both of complexity `O(S)`.",
                        "- Up to one binary search and insert (`O(logS + S)`).",
                        "- I/O: 1 read `O(S)`, up to 1 mutate `O(S)`. Up to one remove.",
                        "- One event.",
                        "- Storage: inserts one item, value size bounded by `MaxSignatories`, with a deposit",
                        "  taken for its lifetime of `DepositBase + threshold * DepositFactor`."
                      ]
                    },
                    {
                      "name": "cancel_as_multi",
                      "fields": [
                        {
                          "name": "threshold",
                          "type": 128,
                          "typeName": "u16"
                        },
                        {
                          "name": "other_signatories",
                          "type": 48,
                          "typeName": "Vec<T::AccountId>"
                        },
                        {
                          "name": "timepoint",
                          "type": 125,
                          "typeName": "Timepoint<BlockNumberFor<T>>"
                        },
                        {
                          "name": "call_hash",
                          "type": 1,
                          "typeName": "[u8; 32]"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Cancel a pre-existing, on-going multisig transaction. Any deposit reserved previously",
                        "for this operation will be unreserved on success.",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "- `threshold`: The total number of approvals for this dispatch before it is executed.",
                        "- `other_signatories`: The accounts (other than the sender) who can approve this",
                        "dispatch. May not be empty.",
                        "- `timepoint`: The timepoint (block number and transaction index) of the first approval",
                        "transaction for this dispatch.",
                        "- `call_hash`: The hash of the call to be executed.",
                        "",
                        "## Complexity",
                        "- `O(S)`.",
                        "- Up to one balance-reserve or unreserve operation.",
                        "- One passthrough operation, one insert, both `O(S)` where `S` is the number of",
                        "  signatories. `S` is capped by `MaxSignatories`, with weight being proportional.",
                        "- One encode & hash, both of complexity `O(S)`.",
                        "- One event.",
                        "- I/O: 1 read `O(S)`, one remove.",
                        "- Storage: removes one item."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains a variant per dispatchable extrinsic that this pallet has."
              ]
            }
          },
          {
            "id": 353,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 125
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 125
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 354,
            "type": {
              "path": [
                "pallet_proxy",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "proxy",
                      "fields": [
                        {
                          "name": "real",
                          "type": 242,
                          "typeName": "AccountIdLookupOf<T>"
                        },
                        {
                          "name": "force_proxy_type",
                          "type": 355,
                          "typeName": "Option<T::ProxyType>"
                        },
                        {
                          "name": "call",
                          "type": 351,
                          "typeName": "Box<<T as Config>::RuntimeCall>"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Dispatch the given `call` from an account that the sender is authorised for through",
                        "`add_proxy`.",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "Parameters:",
                        "- `real`: The account that the proxy will make a call on behalf of.",
                        "- `force_proxy_type`: Specify the exact proxy type to be used and checked for this call.",
                        "- `call`: The call to be made by the `real` account."
                      ]
                    },
                    {
                      "name": "add_proxy",
                      "fields": [
                        {
                          "name": "delegate",
                          "type": 242,
                          "typeName": "AccountIdLookupOf<T>"
                        },
                        {
                          "name": "proxy_type",
                          "type": 127,
                          "typeName": "T::ProxyType"
                        },
                        {
                          "name": "delay",
                          "type": 4,
                          "typeName": "BlockNumberFor<T>"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Register a proxy account for the sender that is able to make calls on its behalf.",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "Parameters:",
                        "- `proxy`: The account that the `caller` would like to make a proxy.",
                        "- `proxy_type`: The permissions allowed for this proxy account.",
                        "- `delay`: The announcement period required of the initial proxy. Will generally be",
                        "zero."
                      ]
                    },
                    {
                      "name": "remove_proxy",
                      "fields": [
                        {
                          "name": "delegate",
                          "type": 242,
                          "typeName": "AccountIdLookupOf<T>"
                        },
                        {
                          "name": "proxy_type",
                          "type": 127,
                          "typeName": "T::ProxyType"
                        },
                        {
                          "name": "delay",
                          "type": 4,
                          "typeName": "BlockNumberFor<T>"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Unregister a proxy account for the sender.",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "Parameters:",
                        "- `proxy`: The account that the `caller` would like to remove as a proxy.",
                        "- `proxy_type`: The permissions currently enabled for the removed proxy account."
                      ]
                    },
                    {
                      "name": "remove_proxies",
                      "index": 3,
                      "docs": [
                        "Unregister all proxy accounts for the sender.",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "WARNING: This may be called on accounts created by `pure`, however if done, then",
                        "the unreserved fees will be inaccessible. **All access to this account will be lost.**"
                      ]
                    },
                    {
                      "name": "create_pure",
                      "fields": [
                        {
                          "name": "proxy_type",
                          "type": 127,
                          "typeName": "T::ProxyType"
                        },
                        {
                          "name": "delay",
                          "type": 4,
                          "typeName": "BlockNumberFor<T>"
                        },
                        {
                          "name": "index",
                          "type": 128,
                          "typeName": "u16"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Spawn a fresh new account that is guaranteed to be otherwise inaccessible, and",
                        "initialize it with a proxy of `proxy_type` for `origin` sender.",
                        "",
                        "Requires a `Signed` origin.",
                        "",
                        "- `proxy_type`: The type of the proxy that the sender will be registered as over the",
                        "new account. This will almost always be the most permissive `ProxyType` possible to",
                        "allow for maximum flexibility.",
                        "- `index`: A disambiguation index, in case this is called multiple times in the same",
                        "transaction (e.g. with `utility::batch`). Unless you're using `batch` you probably just",
                        "want to use `0`.",
                        "- `delay`: The announcement period required of the initial proxy. Will generally be",
                        "zero.",
                        "",
                        "Fails with `Duplicate` if this has already been called in this transaction, from the",
                        "same sender, with the same parameters.",
                        "",
                        "Fails if there are insufficient funds to pay for deposit."
                      ]
                    },
                    {
                      "name": "kill_pure",
                      "fields": [
                        {
                          "name": "spawner",
                          "type": 242,
                          "typeName": "AccountIdLookupOf<T>"
                        },
                        {
                          "name": "proxy_type",
                          "type": 127,
                          "typeName": "T::ProxyType"
                        },
                        {
                          "name": "index",
                          "type": 128,
                          "typeName": "u16"
                        },
                        {
                          "name": "height",
                          "type": 40,
                          "typeName": "BlockNumberFor<T>"
                        },
                        {
                          "name": "ext_index",
                          "type": 40,
                          "typeName": "u32"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Removes a previously spawned pure proxy.",
                        "",
                        "WARNING: **All access to this account will be lost.** Any funds held in it will be",
                        "inaccessible.",
                        "",
                        "Requires a `Signed` origin, and the sender account must have been created by a call to",
                        "`pure` with corresponding parameters.",
                        "",
                        "- `spawner`: The account that originally called `pure` to create this account.",
                        "- `index`: The disambiguation index originally passed to `pure`. Probably `0`.",
                        "- `proxy_type`: The proxy type originally passed to `pure`.",
                        "- `height`: The height of the chain when the call to `pure` was processed.",
                        "- `ext_index`: The extrinsic index in which the call to `pure` was processed.",
                        "",
                        "Fails with `NoPermission` in case the caller is not a previously created pure",
                        "account whose `pure` call has corresponding parameters."
                      ]
                    },
                    {
                      "name": "announce",
                      "fields": [
                        {
                          "name": "real",
                          "type": 242,
                          "typeName": "AccountIdLookupOf<T>"
                        },
                        {
                          "name": "call_hash",
                          "type": 13,
                          "typeName": "CallHashOf<T>"
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "Publish the hash of a proxy-call that will be made in the future.",
                        "",
                        "This must be called some number of blocks before the corresponding `proxy` is attempted",
                        "if the delay associated with the proxy relationship is greater than zero.",
                        "",
                        "No more than `MaxPending` announcements may be made at any one time.",
                        "",
                        "This will take a deposit of `AnnouncementDepositFactor` as well as",
                        "`AnnouncementDepositBase` if there are no other pending announcements.",
                        "",
                        "The dispatch origin for this call must be _Signed_ and a proxy of `real`.",
                        "",
                        "Parameters:",
                        "- `real`: The account that the proxy will make a call on behalf of.",
                        "- `call_hash`: The hash of the call to be made by the `real` account."
                      ]
                    },
                    {
                      "name": "remove_announcement",
                      "fields": [
                        {
                          "name": "real",
                          "type": 242,
                          "typeName": "AccountIdLookupOf<T>"
                        },
                        {
                          "name": "call_hash",
                          "type": 13,
                          "typeName": "CallHashOf<T>"
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "Remove a given announcement.",
                        "",
                        "May be called by a proxy account to remove a call they previously announced and return",
                        "the deposit.",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "Parameters:",
                        "- `real`: The account that the proxy will make a call on behalf of.",
                        "- `call_hash`: The hash of the call to be made by the `real` account."
                      ]
                    },
                    {
                      "name": "reject_announcement",
                      "fields": [
                        {
                          "name": "delegate",
                          "type": 242,
                          "typeName": "AccountIdLookupOf<T>"
                        },
                        {
                          "name": "call_hash",
                          "type": 13,
                          "typeName": "CallHashOf<T>"
                        }
                      ],
                      "index": 8,
                      "docs": [
                        "Remove the given announcement of a delegate.",
                        "",
                        "May be called by a target (proxied) account to remove a call that one of their delegates",
                        "(`delegate`) has announced they want to execute. The deposit is returned.",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "Parameters:",
                        "- `delegate`: The account that previously announced the call.",
                        "- `call_hash`: The hash of the call to be made."
                      ]
                    },
                    {
                      "name": "proxy_announced",
                      "fields": [
                        {
                          "name": "delegate",
                          "type": 242,
                          "typeName": "AccountIdLookupOf<T>"
                        },
                        {
                          "name": "real",
                          "type": 242,
                          "typeName": "AccountIdLookupOf<T>"
                        },
                        {
                          "name": "force_proxy_type",
                          "type": 355,
                          "typeName": "Option<T::ProxyType>"
                        },
                        {
                          "name": "call",
                          "type": 351,
                          "typeName": "Box<<T as Config>::RuntimeCall>"
                        }
                      ],
                      "index": 9,
                      "docs": [
                        "Dispatch the given `call` from an account that the sender is authorized for through",
                        "`add_proxy`.",
                        "",
                        "Removes any corresponding announcement(s).",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "Parameters:",
                        "- `real`: The account that the proxy will make a call on behalf of.",
                        "- `force_proxy_type`: Specify the exact proxy type to be used and checked for this call.",
                        "- `call`: The call to be made by the `real` account."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains a variant per dispatchable extrinsic that this pallet has."
              ]
            }
          },
          {
            "id": 355,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 127
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 127
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 356,
            "type": {
              "path": [
                "pallet_assets",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "create",
                      "fields": [
                        {
                          "name": "id",
                          "type": 40,
                          "typeName": "T::AssetIdParameter"
                        },
                        {
                          "name": "admin",
                          "type": 242,
                          "typeName": "AccountIdLookupOf<T>"
                        },
                        {
                          "name": "min_balance",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Issue a new class of fungible assets from a public origin.",
                        "",
                        "This new asset class has no assets initially and its owner is the origin.",
                        "",
                        "The origin must conform to the configured `CreateOrigin` and have sufficient funds free.",
                        "",
                        "Funds of sender are reserved by `AssetDeposit`.",
                        "",
                        "Parameters:",
                        "- `id`: The identifier of the new asset. This must not be currently in use to identify",
                        "an existing asset. If [`NextAssetId`] is set, then this must be equal to it.",
                        "- `admin`: The admin of this class of assets. The admin is the initial address of each",
                        "member of the asset class's admin team.",
                        "- `min_balance`: The minimum balance of this new asset that any single account must",
                        "have. If an account's balance is reduced below this, then it collapses to zero.",
                        "",
                        "Emits `Created` event when successful.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "force_create",
                      "fields": [
                        {
                          "name": "id",
                          "type": 40,
                          "typeName": "T::AssetIdParameter"
                        },
                        {
                          "name": "owner",
                          "type": 242,
                          "typeName": "AccountIdLookupOf<T>"
                        },
                        {
                          "name": "is_sufficient",
                          "type": 8,
                          "typeName": "bool"
                        },
                        {
                          "name": "min_balance",
                          "type": 44,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Issue a new class of fungible assets from a privileged origin.",
                        "",
                        "This new asset class has no assets initially.",
                        "",
                        "The origin must conform to `ForceOrigin`.",
                        "",
                        "Unlike `create`, no funds are reserved.",
                        "",
                        "- `id`: The identifier of the new asset. This must not be currently in use to identify",
                        "an existing asset. If [`NextAssetId`] is set, then this must be equal to it.",
                        "- `owner`: The owner of this class of assets. The owner has full superuser permissions",
                        "over this asset, but may later change and configure the permissions using",
                        "`transfer_ownership` and `set_team`.",
                        "- `min_balance`: The minimum balance of this new asset that any single account must",
                        "have. If an account's balance is reduced below this, then it collapses to zero.",
                        "",
                        "Emits `ForceCreated` event when successful.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "start_destroy",
                      "fields": [
                        {
                          "name": "id",
                          "type": 40,
                          "typeName": "T::AssetIdParameter"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Start the process of destroying a fungible asset class.",
                        "",
                        "`start_destroy` is the first in a series of extrinsics that should be called, to allow",
                        "destruction of an asset class.",
                        "",
                        "The origin must conform to `ForceOrigin` or must be `Signed` by the asset's `owner`.",
                        "",
                        "- `id`: The identifier of the asset to be destroyed. This must identify an existing",
                        "  asset.",
                        "",
                        "The asset class must be frozen before calling `start_destroy`."
                      ]
                    },
                    {
                      "name": "destroy_accounts",
                      "fields": [
                        {
                          "name": "id",
                          "type": 40,
                          "typeName": "T::AssetIdParameter"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Destroy all accounts associated with a given asset.",
                        "",
                        "`destroy_accounts` should only be called after `start_destroy` has been called, and the",
                        "asset is in a `Destroying` state.",
                        "",
                        "Due to weight restrictions, this function may need to be called multiple times to fully",
                        "destroy all accounts. It will destroy `RemoveItemsLimit` accounts at a time.",
                        "",
                        "- `id`: The identifier of the asset to be destroyed. This must identify an existing",
                        "  asset.",
                        "",
                        "Each call emits the `Event::DestroyedAccounts` event."
                      ]
                    },
                    {
                      "name": "destroy_approvals",
                      "fields": [
                        {
                          "name": "id",
                          "type": 40,
                          "typeName": "T::AssetIdParameter"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Destroy all approvals associated with a given asset up to the max (T::RemoveItemsLimit).",
                        "",
                        "`destroy_approvals` should only be called after `start_destroy` has been called, and the",
                        "asset is in a `Destroying` state.",
                        "",
                        "Due to weight restrictions, this function may need to be called multiple times to fully",
                        "destroy all approvals. It will destroy `RemoveItemsLimit` approvals at a time.",
                        "",
                        "- `id`: The identifier of the asset to be destroyed. This must identify an existing",
                        "  asset.",
                        "",
                        "Each call emits the `Event::DestroyedApprovals` event."
                      ]
                    },
                    {
                      "name": "finish_destroy",
                      "fields": [
                        {
                          "name": "id",
                          "type": 40,
                          "typeName": "T::AssetIdParameter"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Complete destroying asset and unreserve currency.",
                        "",
                        "`finish_destroy` should only be called after `start_destroy` has been called, and the",
                        "asset is in a `Destroying` state. All accounts or approvals should be destroyed before",
                        "hand.",
                        "",
                        "- `id`: The identifier of the asset to be destroyed. This must identify an existing",
                        "  asset.",
                        "",
                        "Each successful call emits the `Event::Destroyed` event."
                      ]
                    },
                    {
                      "name": "mint",
                      "fields": [
                        {
                          "name": "id",
                          "type": 40,
                          "typeName": "T::AssetIdParameter"
                        },
                        {
                          "name": "beneficiary",
                          "type": 242,
                          "typeName": "AccountIdLookupOf<T>"
                        },
                        {
                          "name": "amount",
                          "type": 44,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "Mint assets of a particular class.",
                        "",
                        "The origin must be Signed and the sender must be the Issuer of the asset `id`.",
                        "",
                        "- `id`: The identifier of the asset to have some amount minted.",
                        "- `beneficiary`: The account to be credited with the minted assets.",
                        "- `amount`: The amount of the asset to be minted.",
                        "",
                        "Emits `Issued` event when successful.",
                        "",
                        "Weight: `O(1)`",
                        "Modes: Pre-existing balance of `beneficiary`; Account pre-existence of `beneficiary`."
                      ]
                    },
                    {
                      "name": "burn",
                      "fields": [
                        {
                          "name": "id",
                          "type": 40,
                          "typeName": "T::AssetIdParameter"
                        },
                        {
                          "name": "who",
                          "type": 242,
                          "typeName": "AccountIdLookupOf<T>"
                        },
                        {
                          "name": "amount",
                          "type": 44,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "Reduce the balance of `who` by as much as possible up to `amount` assets of `id`.",
                        "",
                        "Origin must be Signed and the sender should be the Manager of the asset `id`.",
                        "",
                        "Bails with `NoAccount` if the `who` is already dead.",
                        "",
                        "- `id`: The identifier of the asset to have some amount burned.",
                        "- `who`: The account to be debited from.",
                        "- `amount`: The maximum amount by which `who`'s balance should be reduced.",
                        "",
                        "Emits `Burned` with the actual amount burned. If this takes the balance to below the",
                        "minimum for the asset, then the amount burned is increased to take it to zero.",
                        "",
                        "Weight: `O(1)`",
                        "Modes: Post-existence of `who`; Pre & post Zombie-status of `who`."
                      ]
                    },
                    {
                      "name": "transfer",
                      "fields": [
                        {
                          "name": "id",
                          "type": 40,
                          "typeName": "T::AssetIdParameter"
                        },
                        {
                          "name": "target",
                          "type": 242,
                          "typeName": "AccountIdLookupOf<T>"
                        },
                        {
                          "name": "amount",
                          "type": 44,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 8,
                      "docs": [
                        "Move some assets from the sender account to another.",
                        "",
                        "Origin must be Signed.",
                        "",
                        "- `id`: The identifier of the asset to have some amount transferred.",
                        "- `target`: The account to be credited.",
                        "- `amount`: The amount by which the sender's balance of assets should be reduced and",
                        "`target`'s balance increased. The amount actually transferred may be slightly greater in",
                        "the case that the transfer would otherwise take the sender balance above zero but below",
                        "the minimum balance. Must be greater than zero.",
                        "",
                        "Emits `Transferred` with the actual amount transferred. If this takes the source balance",
                        "to below the minimum for the asset, then the amount transferred is increased to take it",
                        "to zero.",
                        "",
                        "Weight: `O(1)`",
                        "Modes: Pre-existence of `target`; Post-existence of sender; Account pre-existence of",
                        "`target`."
                      ]
                    },
                    {
                      "name": "transfer_keep_alive",
                      "fields": [
                        {
                          "name": "id",
                          "type": 40,
                          "typeName": "T::AssetIdParameter"
                        },
                        {
                          "name": "target",
                          "type": 242,
                          "typeName": "AccountIdLookupOf<T>"
                        },
                        {
                          "name": "amount",
                          "type": 44,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 9,
                      "docs": [
                        "Move some assets from the sender account to another, keeping the sender account alive.",
                        "",
                        "Origin must be Signed.",
                        "",
                        "- `id`: The identifier of the asset to have some amount transferred.",
                        "- `target`: The account to be credited.",
                        "- `amount`: The amount by which the sender's balance of assets should be reduced and",
                        "`target`'s balance increased. The amount actually transferred may be slightly greater in",
                        "the case that the transfer would otherwise take the sender balance above zero but below",
                        "the minimum balance. Must be greater than zero.",
                        "",
                        "Emits `Transferred` with the actual amount transferred. If this takes the source balance",
                        "to below the minimum for the asset, then the amount transferred is increased to take it",
                        "to zero.",
                        "",
                        "Weight: `O(1)`",
                        "Modes: Pre-existence of `target`; Post-existence of sender; Account pre-existence of",
                        "`target`."
                      ]
                    },
                    {
                      "name": "force_transfer",
                      "fields": [
                        {
                          "name": "id",
                          "type": 40,
                          "typeName": "T::AssetIdParameter"
                        },
                        {
                          "name": "source",
                          "type": 242,
                          "typeName": "AccountIdLookupOf<T>"
                        },
                        {
                          "name": "dest",
                          "type": 242,
                          "typeName": "AccountIdLookupOf<T>"
                        },
                        {
                          "name": "amount",
                          "type": 44,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 10,
                      "docs": [
                        "Move some assets from one account to another.",
                        "",
                        "Origin must be Signed and the sender should be the Admin of the asset `id`.",
                        "",
                        "- `id`: The identifier of the asset to have some amount transferred.",
                        "- `source`: The account to be debited.",
                        "- `dest`: The account to be credited.",
                        "- `amount`: The amount by which the `source`'s balance of assets should be reduced and",
                        "`dest`'s balance increased. The amount actually transferred may be slightly greater in",
                        "the case that the transfer would otherwise take the `source` balance above zero but",
                        "below the minimum balance. Must be greater than zero.",
                        "",
                        "Emits `Transferred` with the actual amount transferred. If this takes the source balance",
                        "to below the minimum for the asset, then the amount transferred is increased to take it",
                        "to zero.",
                        "",
                        "Weight: `O(1)`",
                        "Modes: Pre-existence of `dest`; Post-existence of `source`; Account pre-existence of",
                        "`dest`."
                      ]
                    },
                    {
                      "name": "freeze",
                      "fields": [
                        {
                          "name": "id",
                          "type": 40,
                          "typeName": "T::AssetIdParameter"
                        },
                        {
                          "name": "who",
                          "type": 242,
                          "typeName": "AccountIdLookupOf<T>"
                        }
                      ],
                      "index": 11,
                      "docs": [
                        "Disallow further unprivileged transfers of an asset `id` from an account `who`. `who`",
                        "must already exist as an entry in `Account`s of the asset. If you want to freeze an",
                        "account that does not have an entry, use `touch_other` first.",
                        "",
                        "Origin must be Signed and the sender should be the Freezer of the asset `id`.",
                        "",
                        "- `id`: The identifier of the asset to be frozen.",
                        "- `who`: The account to be frozen.",
                        "",
                        "Emits `Frozen`.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "thaw",
                      "fields": [
                        {
                          "name": "id",
                          "type": 40,
                          "typeName": "T::AssetIdParameter"
                        },
                        {
                          "name": "who",
                          "type": 242,
                          "typeName": "AccountIdLookupOf<T>"
                        }
                      ],
                      "index": 12,
                      "docs": [
                        "Allow unprivileged transfers to and from an account again.",
                        "",
                        "Origin must be Signed and the sender should be the Admin of the asset `id`.",
                        "",
                        "- `id`: The identifier of the asset to be frozen.",
                        "- `who`: The account to be unfrozen.",
                        "",
                        "Emits `Thawed`.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "freeze_asset",
                      "fields": [
                        {
                          "name": "id",
                          "type": 40,
                          "typeName": "T::AssetIdParameter"
                        }
                      ],
                      "index": 13,
                      "docs": [
                        "Disallow further unprivileged transfers for the asset class.",
                        "",
                        "Origin must be Signed and the sender should be the Freezer of the asset `id`.",
                        "",
                        "- `id`: The identifier of the asset to be frozen.",
                        "",
                        "Emits `Frozen`.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "thaw_asset",
                      "fields": [
                        {
                          "name": "id",
                          "type": 40,
                          "typeName": "T::AssetIdParameter"
                        }
                      ],
                      "index": 14,
                      "docs": [
                        "Allow unprivileged transfers for the asset again.",
                        "",
                        "Origin must be Signed and the sender should be the Admin of the asset `id`.",
                        "",
                        "- `id`: The identifier of the asset to be thawed.",
                        "",
                        "Emits `Thawed`.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "transfer_ownership",
                      "fields": [
                        {
                          "name": "id",
                          "type": 40,
                          "typeName": "T::AssetIdParameter"
                        },
                        {
                          "name": "owner",
                          "type": 242,
                          "typeName": "AccountIdLookupOf<T>"
                        }
                      ],
                      "index": 15,
                      "docs": [
                        "Change the Owner of an asset.",
                        "",
                        "Origin must be Signed and the sender should be the Owner of the asset `id`.",
                        "",
                        "- `id`: The identifier of the asset.",
                        "- `owner`: The new Owner of this asset.",
                        "",
                        "Emits `OwnerChanged`.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "set_team",
                      "fields": [
                        {
                          "name": "id",
                          "type": 40,
                          "typeName": "T::AssetIdParameter"
                        },
                        {
                          "name": "issuer",
                          "type": 242,
                          "typeName": "AccountIdLookupOf<T>"
                        },
                        {
                          "name": "admin",
                          "type": 242,
                          "typeName": "AccountIdLookupOf<T>"
                        },
                        {
                          "name": "freezer",
                          "type": 242,
                          "typeName": "AccountIdLookupOf<T>"
                        }
                      ],
                      "index": 16,
                      "docs": [
                        "Change the Issuer, Admin and Freezer of an asset.",
                        "",
                        "Origin must be Signed and the sender should be the Owner of the asset `id`.",
                        "",
                        "- `id`: The identifier of the asset to be frozen.",
                        "- `issuer`: The new Issuer of this asset.",
                        "- `admin`: The new Admin of this asset.",
                        "- `freezer`: The new Freezer of this asset.",
                        "",
                        "Emits `TeamChanged`.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "set_metadata",
                      "fields": [
                        {
                          "name": "id",
                          "type": 40,
                          "typeName": "T::AssetIdParameter"
                        },
                        {
                          "name": "name",
                          "type": 14,
                          "typeName": "Vec<u8>"
                        },
                        {
                          "name": "symbol",
                          "type": 14,
                          "typeName": "Vec<u8>"
                        },
                        {
                          "name": "decimals",
                          "type": 2,
                          "typeName": "u8"
                        }
                      ],
                      "index": 17,
                      "docs": [
                        "Set the metadata for an asset.",
                        "",
                        "Origin must be Signed and the sender should be the Owner of the asset `id`.",
                        "",
                        "Funds of sender are reserved according to the formula:",
                        "`MetadataDepositBase + MetadataDepositPerByte * (name.len + symbol.len)` taking into",
                        "account any already reserved funds.",
                        "",
                        "- `id`: The identifier of the asset to update.",
                        "- `name`: The user friendly name of this asset. Limited in length by `StringLimit`.",
                        "- `symbol`: The exchange symbol for this asset. Limited in length by `StringLimit`.",
                        "- `decimals`: The number of decimals this asset uses to represent one unit.",
                        "",
                        "Emits `MetadataSet`.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "clear_metadata",
                      "fields": [
                        {
                          "name": "id",
                          "type": 40,
                          "typeName": "T::AssetIdParameter"
                        }
                      ],
                      "index": 18,
                      "docs": [
                        "Clear the metadata for an asset.",
                        "",
                        "Origin must be Signed and the sender should be the Owner of the asset `id`.",
                        "",
                        "Any deposit is freed for the asset owner.",
                        "",
                        "- `id`: The identifier of the asset to clear.",
                        "",
                        "Emits `MetadataCleared`.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "force_set_metadata",
                      "fields": [
                        {
                          "name": "id",
                          "type": 40,
                          "typeName": "T::AssetIdParameter"
                        },
                        {
                          "name": "name",
                          "type": 14,
                          "typeName": "Vec<u8>"
                        },
                        {
                          "name": "symbol",
                          "type": 14,
                          "typeName": "Vec<u8>"
                        },
                        {
                          "name": "decimals",
                          "type": 2,
                          "typeName": "u8"
                        },
                        {
                          "name": "is_frozen",
                          "type": 8,
                          "typeName": "bool"
                        }
                      ],
                      "index": 19,
                      "docs": [
                        "Force the metadata for an asset to some value.",
                        "",
                        "Origin must be ForceOrigin.",
                        "",
                        "Any deposit is left alone.",
                        "",
                        "- `id`: The identifier of the asset to update.",
                        "- `name`: The user friendly name of this asset. Limited in length by `StringLimit`.",
                        "- `symbol`: The exchange symbol for this asset. Limited in length by `StringLimit`.",
                        "- `decimals`: The number of decimals this asset uses to represent one unit.",
                        "",
                        "Emits `MetadataSet`.",
                        "",
                        "Weight: `O(N + S)` where N and S are the length of the name and symbol respectively."
                      ]
                    },
                    {
                      "name": "force_clear_metadata",
                      "fields": [
                        {
                          "name": "id",
                          "type": 40,
                          "typeName": "T::AssetIdParameter"
                        }
                      ],
                      "index": 20,
                      "docs": [
                        "Clear the metadata for an asset.",
                        "",
                        "Origin must be ForceOrigin.",
                        "",
                        "Any deposit is returned.",
                        "",
                        "- `id`: The identifier of the asset to clear.",
                        "",
                        "Emits `MetadataCleared`.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "force_asset_status",
                      "fields": [
                        {
                          "name": "id",
                          "type": 40,
                          "typeName": "T::AssetIdParameter"
                        },
                        {
                          "name": "owner",
                          "type": 242,
                          "typeName": "AccountIdLookupOf<T>"
                        },
                        {
                          "name": "issuer",
                          "type": 242,
                          "typeName": "AccountIdLookupOf<T>"
                        },
                        {
                          "name": "admin",
                          "type": 242,
                          "typeName": "AccountIdLookupOf<T>"
                        },
                        {
                          "name": "freezer",
                          "type": 242,
                          "typeName": "AccountIdLookupOf<T>"
                        },
                        {
                          "name": "min_balance",
                          "type": 44,
                          "typeName": "T::Balance"
                        },
                        {
                          "name": "is_sufficient",
                          "type": 8,
                          "typeName": "bool"
                        },
                        {
                          "name": "is_frozen",
                          "type": 8,
                          "typeName": "bool"
                        }
                      ],
                      "index": 21,
                      "docs": [
                        "Alter the attributes of a given asset.",
                        "",
                        "Origin must be `ForceOrigin`.",
                        "",
                        "- `id`: The identifier of the asset.",
                        "- `owner`: The new Owner of this asset.",
                        "- `issuer`: The new Issuer of this asset.",
                        "- `admin`: The new Admin of this asset.",
                        "- `freezer`: The new Freezer of this asset.",
                        "- `min_balance`: The minimum balance of this new asset that any single account must",
                        "have. If an account's balance is reduced below this, then it collapses to zero.",
                        "- `is_sufficient`: Whether a non-zero balance of this asset is deposit of sufficient",
                        "value to account for the state bloat associated with its balance storage. If set to",
                        "`true`, then non-zero balances may be stored without a `consumer` reference (and thus",
                        "an ED in the Balances pallet or whatever else is used to control user-account state",
                        "growth).",
                        "- `is_frozen`: Whether this asset class is frozen except for permissioned/admin",
                        "instructions.",
                        "",
                        "Emits `AssetStatusChanged` with the identity of the asset.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "approve_transfer",
                      "fields": [
                        {
                          "name": "id",
                          "type": 40,
                          "typeName": "T::AssetIdParameter"
                        },
                        {
                          "name": "delegate",
                          "type": 242,
                          "typeName": "AccountIdLookupOf<T>"
                        },
                        {
                          "name": "amount",
                          "type": 44,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 22,
                      "docs": [
                        "Approve an amount of asset for transfer by a delegated third-party account.",
                        "",
                        "Origin must be Signed.",
                        "",
                        "Ensures that `ApprovalDeposit` worth of `Currency` is reserved from signing account",
                        "for the purpose of holding the approval. If some non-zero amount of assets is already",
                        "approved from signing account to `delegate`, then it is topped up or unreserved to",
                        "meet the right value.",
                        "",
                        "NOTE: The signing account does not need to own `amount` of assets at the point of",
                        "making this call.",
                        "",
                        "- `id`: The identifier of the asset.",
                        "- `delegate`: The account to delegate permission to transfer asset.",
                        "- `amount`: The amount of asset that may be transferred by `delegate`. If there is",
                        "already an approval in place, then this acts additively.",
                        "",
                        "Emits `ApprovedTransfer` on success.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "cancel_approval",
                      "fields": [
                        {
                          "name": "id",
                          "type": 40,
                          "typeName": "T::AssetIdParameter"
                        },
                        {
                          "name": "delegate",
                          "type": 242,
                          "typeName": "AccountIdLookupOf<T>"
                        }
                      ],
                      "index": 23,
                      "docs": [
                        "Cancel all of some asset approved for delegated transfer by a third-party account.",
                        "",
                        "Origin must be Signed and there must be an approval in place between signer and",
                        "`delegate`.",
                        "",
                        "Unreserves any deposit previously reserved by `approve_transfer` for the approval.",
                        "",
                        "- `id`: The identifier of the asset.",
                        "- `delegate`: The account delegated permission to transfer asset.",
                        "",
                        "Emits `ApprovalCancelled` on success.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "force_cancel_approval",
                      "fields": [
                        {
                          "name": "id",
                          "type": 40,
                          "typeName": "T::AssetIdParameter"
                        },
                        {
                          "name": "owner",
                          "type": 242,
                          "typeName": "AccountIdLookupOf<T>"
                        },
                        {
                          "name": "delegate",
                          "type": 242,
                          "typeName": "AccountIdLookupOf<T>"
                        }
                      ],
                      "index": 24,
                      "docs": [
                        "Cancel all of some asset approved for delegated transfer by a third-party account.",
                        "",
                        "Origin must be either ForceOrigin or Signed origin with the signer being the Admin",
                        "account of the asset `id`.",
                        "",
                        "Unreserves any deposit previously reserved by `approve_transfer` for the approval.",
                        "",
                        "- `id`: The identifier of the asset.",
                        "- `delegate`: The account delegated permission to transfer asset.",
                        "",
                        "Emits `ApprovalCancelled` on success.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "transfer_approved",
                      "fields": [
                        {
                          "name": "id",
                          "type": 40,
                          "typeName": "T::AssetIdParameter"
                        },
                        {
                          "name": "owner",
                          "type": 242,
                          "typeName": "AccountIdLookupOf<T>"
                        },
                        {
                          "name": "destination",
                          "type": 242,
                          "typeName": "AccountIdLookupOf<T>"
                        },
                        {
                          "name": "amount",
                          "type": 44,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 25,
                      "docs": [
                        "Transfer some asset balance from a previously delegated account to some third-party",
                        "account.",
                        "",
                        "Origin must be Signed and there must be an approval in place by the `owner` to the",
                        "signer.",
                        "",
                        "If the entire amount approved for transfer is transferred, then any deposit previously",
                        "reserved by `approve_transfer` is unreserved.",
                        "",
                        "- `id`: The identifier of the asset.",
                        "- `owner`: The account which previously approved for a transfer of at least `amount` and",
                        "from which the asset balance will be withdrawn.",
                        "- `destination`: The account to which the asset balance of `amount` will be transferred.",
                        "- `amount`: The amount of assets to transfer.",
                        "",
                        "Emits `TransferredApproved` on success.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "touch",
                      "fields": [
                        {
                          "name": "id",
                          "type": 40,
                          "typeName": "T::AssetIdParameter"
                        }
                      ],
                      "index": 26,
                      "docs": [
                        "Create an asset account for non-provider assets.",
                        "",
                        "A deposit will be taken from the signer account.",
                        "",
                        "- `origin`: Must be Signed; the signer account must have sufficient funds for a deposit",
                        "  to be taken.",
                        "- `id`: The identifier of the asset for the account to be created.",
                        "",
                        "Emits `Touched` event when successful."
                      ]
                    },
                    {
                      "name": "refund",
                      "fields": [
                        {
                          "name": "id",
                          "type": 40,
                          "typeName": "T::AssetIdParameter"
                        },
                        {
                          "name": "allow_burn",
                          "type": 8,
                          "typeName": "bool"
                        }
                      ],
                      "index": 27,
                      "docs": [
                        "Return the deposit (if any) of an asset account or a consumer reference (if any) of an",
                        "account.",
                        "",
                        "The origin must be Signed.",
                        "",
                        "- `id`: The identifier of the asset for which the caller would like the deposit",
                        "  refunded.",
                        "- `allow_burn`: If `true` then assets may be destroyed in order to complete the refund.",
                        "",
                        "Emits `Refunded` event when successful."
                      ]
                    },
                    {
                      "name": "set_min_balance",
                      "fields": [
                        {
                          "name": "id",
                          "type": 40,
                          "typeName": "T::AssetIdParameter"
                        },
                        {
                          "name": "min_balance",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 28,
                      "docs": [
                        "Sets the minimum balance of an asset.",
                        "",
                        "Only works if there aren't any accounts that are holding the asset or if",
                        "the new value of `min_balance` is less than the old one.",
                        "",
                        "Origin must be Signed and the sender has to be the Owner of the",
                        "asset `id`.",
                        "",
                        "- `id`: The identifier of the asset.",
                        "- `min_balance`: The new value of `min_balance`.",
                        "",
                        "Emits `AssetMinBalanceChanged` event when successful."
                      ]
                    },
                    {
                      "name": "touch_other",
                      "fields": [
                        {
                          "name": "id",
                          "type": 40,
                          "typeName": "T::AssetIdParameter"
                        },
                        {
                          "name": "who",
                          "type": 242,
                          "typeName": "AccountIdLookupOf<T>"
                        }
                      ],
                      "index": 29,
                      "docs": [
                        "Create an asset account for `who`.",
                        "",
                        "A deposit will be taken from the signer account.",
                        "",
                        "- `origin`: Must be Signed by `Freezer` or `Admin` of the asset `id`; the signer account",
                        "  must have sufficient funds for a deposit to be taken.",
                        "- `id`: The identifier of the asset for the account to be created.",
                        "- `who`: The account to be created.",
                        "",
                        "Emits `Touched` event when successful."
                      ]
                    },
                    {
                      "name": "refund_other",
                      "fields": [
                        {
                          "name": "id",
                          "type": 40,
                          "typeName": "T::AssetIdParameter"
                        },
                        {
                          "name": "who",
                          "type": 242,
                          "typeName": "AccountIdLookupOf<T>"
                        }
                      ],
                      "index": 30,
                      "docs": [
                        "Return the deposit (if any) of a target asset account. Useful if you are the depositor.",
                        "",
                        "The origin must be Signed and either the account owner, depositor, or asset `Admin`. In",
                        "order to burn a non-zero balance of the asset, the caller must be the account and should",
                        "use `refund`.",
                        "",
                        "- `id`: The identifier of the asset for the account holding a deposit.",
                        "- `who`: The account to refund.",
                        "",
                        "Emits `Refunded` event when successful."
                      ]
                    },
                    {
                      "name": "block",
                      "fields": [
                        {
                          "name": "id",
                          "type": 40,
                          "typeName": "T::AssetIdParameter"
                        },
                        {
                          "name": "who",
                          "type": 242,
                          "typeName": "AccountIdLookupOf<T>"
                        }
                      ],
                      "index": 31,
                      "docs": [
                        "Disallow further unprivileged transfers of an asset `id` to and from an account `who`.",
                        "",
                        "Origin must be Signed and the sender should be the Freezer of the asset `id`.",
                        "",
                        "- `id`: The identifier of the account's asset.",
                        "- `who`: The account to be unblocked.",
                        "",
                        "Emits `Blocked`.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains a variant per dispatchable extrinsic that this pallet has."
              ]
            }
          },
          {
            "id": 357,
            "type": {
              "path": [
                "pallet_uniques",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "create",
                      "fields": [
                        {
                          "name": "collection",
                          "type": 4,
                          "typeName": "T::CollectionId"
                        },
                        {
                          "name": "admin",
                          "type": 242,
                          "typeName": "AccountIdLookupOf<T>"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Issue a new collection of non-fungible items from a public origin.",
                        "",
                        "This new collection has no items initially and its owner is the origin.",
                        "",
                        "The origin must conform to the configured `CreateOrigin` and have sufficient funds free.",
                        "",
                        "`ItemDeposit` funds of sender are reserved.",
                        "",
                        "Parameters:",
                        "- `collection`: The identifier of the new collection. This must not be currently in use.",
                        "- `admin`: The admin of this collection. The admin is the initial address of each",
                        "member of the collection's admin team.",
                        "",
                        "Emits `Created` event when successful.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "force_create",
                      "fields": [
                        {
                          "name": "collection",
                          "type": 4,
                          "typeName": "T::CollectionId"
                        },
                        {
                          "name": "owner",
                          "type": 242,
                          "typeName": "AccountIdLookupOf<T>"
                        },
                        {
                          "name": "free_holding",
                          "type": 8,
                          "typeName": "bool"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Issue a new collection of non-fungible items from a privileged origin.",
                        "",
                        "This new collection has no items initially.",
                        "",
                        "The origin must conform to `ForceOrigin`.",
                        "",
                        "Unlike `create`, no funds are reserved.",
                        "",
                        "- `collection`: The identifier of the new item. This must not be currently in use.",
                        "- `owner`: The owner of this collection of items. The owner has full superuser",
                        "  permissions",
                        "over this item, but may later change and configure the permissions using",
                        "`transfer_ownership` and `set_team`.",
                        "",
                        "Emits `ForceCreated` event when successful.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "destroy",
                      "fields": [
                        {
                          "name": "collection",
                          "type": 4,
                          "typeName": "T::CollectionId"
                        },
                        {
                          "name": "witness",
                          "type": 358,
                          "typeName": "DestroyWitness"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Destroy a collection of fungible items.",
                        "",
                        "The origin must conform to `ForceOrigin` or must be `Signed` and the sender must be the",
                        "owner of the `collection`.",
                        "",
                        "- `collection`: The identifier of the collection to be destroyed.",
                        "- `witness`: Information on the items minted in the collection. This must be",
                        "correct.",
                        "",
                        "Emits `Destroyed` event when successful.",
                        "",
                        "Weight: `O(n + m)` where:",
                        "- `n = witness.items`",
                        "- `m = witness.item_metadatas`",
                        "- `a = witness.attributes`"
                      ]
                    },
                    {
                      "name": "mint",
                      "fields": [
                        {
                          "name": "collection",
                          "type": 4,
                          "typeName": "T::CollectionId"
                        },
                        {
                          "name": "item",
                          "type": 4,
                          "typeName": "T::ItemId"
                        },
                        {
                          "name": "owner",
                          "type": 242,
                          "typeName": "AccountIdLookupOf<T>"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Mint an item of a particular collection.",
                        "",
                        "The origin must be Signed and the sender must be the Issuer of the `collection`.",
                        "",
                        "- `collection`: The collection of the item to be minted.",
                        "- `item`: The item value of the item to be minted.",
                        "- `beneficiary`: The initial owner of the minted item.",
                        "",
                        "Emits `Issued` event when successful.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "burn",
                      "fields": [
                        {
                          "name": "collection",
                          "type": 4,
                          "typeName": "T::CollectionId"
                        },
                        {
                          "name": "item",
                          "type": 4,
                          "typeName": "T::ItemId"
                        },
                        {
                          "name": "check_owner",
                          "type": 359,
                          "typeName": "Option<AccountIdLookupOf<T>>"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Destroy a single item.",
                        "",
                        "Origin must be Signed and the signing account must be either:",
                        "- the Admin of the `collection`;",
                        "- the Owner of the `item`;",
                        "",
                        "- `collection`: The collection of the item to be burned.",
                        "- `item`: The item of the item to be burned.",
                        "- `check_owner`: If `Some` then the operation will fail with `WrongOwner` unless the",
                        "  item is owned by this value.",
                        "",
                        "Emits `Burned` with the actual amount burned.",
                        "",
                        "Weight: `O(1)`",
                        "Modes: `check_owner.is_some()`."
                      ]
                    },
                    {
                      "name": "transfer",
                      "fields": [
                        {
                          "name": "collection",
                          "type": 4,
                          "typeName": "T::CollectionId"
                        },
                        {
                          "name": "item",
                          "type": 4,
                          "typeName": "T::ItemId"
                        },
                        {
                          "name": "dest",
                          "type": 242,
                          "typeName": "AccountIdLookupOf<T>"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Move an item from the sender account to another.",
                        "",
                        "This resets the approved account of the item.",
                        "",
                        "Origin must be Signed and the signing account must be either:",
                        "- the Admin of the `collection`;",
                        "- the Owner of the `item`;",
                        "- the approved delegate for the `item` (in this case, the approval is reset).",
                        "",
                        "Arguments:",
                        "- `collection`: The collection of the item to be transferred.",
                        "- `item`: The item of the item to be transferred.",
                        "- `dest`: The account to receive ownership of the item.",
                        "",
                        "Emits `Transferred`.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "redeposit",
                      "fields": [
                        {
                          "name": "collection",
                          "type": 4,
                          "typeName": "T::CollectionId"
                        },
                        {
                          "name": "items",
                          "type": 132,
                          "typeName": "Vec<T::ItemId>"
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "Reevaluate the deposits on some items.",
                        "",
                        "Origin must be Signed and the sender should be the Owner of the `collection`.",
                        "",
                        "- `collection`: The collection to be frozen.",
                        "- `items`: The items of the collection whose deposits will be reevaluated.",
                        "",
                        "NOTE: This exists as a best-effort function. Any items which are unknown or",
                        "in the case that the owner account does not have reservable funds to pay for a",
                        "deposit increase are ignored. Generally the owner isn't going to call this on items",
                        "whose existing deposit is less than the refreshed deposit as it would only cost them,",
                        "so it's of little consequence.",
                        "",
                        "It will still return an error in the case that the collection is unknown of the signer",
                        "is not permitted to call it.",
                        "",
                        "Weight: `O(items.len())`"
                      ]
                    },
                    {
                      "name": "freeze",
                      "fields": [
                        {
                          "name": "collection",
                          "type": 4,
                          "typeName": "T::CollectionId"
                        },
                        {
                          "name": "item",
                          "type": 4,
                          "typeName": "T::ItemId"
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "Disallow further unprivileged transfer of an item.",
                        "",
                        "Origin must be Signed and the sender should be the Freezer of the `collection`.",
                        "",
                        "- `collection`: The collection of the item to be frozen.",
                        "- `item`: The item of the item to be frozen.",
                        "",
                        "Emits `Frozen`.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "thaw",
                      "fields": [
                        {
                          "name": "collection",
                          "type": 4,
                          "typeName": "T::CollectionId"
                        },
                        {
                          "name": "item",
                          "type": 4,
                          "typeName": "T::ItemId"
                        }
                      ],
                      "index": 8,
                      "docs": [
                        "Re-allow unprivileged transfer of an item.",
                        "",
                        "Origin must be Signed and the sender should be the Freezer of the `collection`.",
                        "",
                        "- `collection`: The collection of the item to be thawed.",
                        "- `item`: The item of the item to be thawed.",
                        "",
                        "Emits `Thawed`.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "freeze_collection",
                      "fields": [
                        {
                          "name": "collection",
                          "type": 4,
                          "typeName": "T::CollectionId"
                        }
                      ],
                      "index": 9,
                      "docs": [
                        "Disallow further unprivileged transfers for a whole collection.",
                        "",
                        "Origin must be Signed and the sender should be the Freezer of the `collection`.",
                        "",
                        "- `collection`: The collection to be frozen.",
                        "",
                        "Emits `CollectionFrozen`.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "thaw_collection",
                      "fields": [
                        {
                          "name": "collection",
                          "type": 4,
                          "typeName": "T::CollectionId"
                        }
                      ],
                      "index": 10,
                      "docs": [
                        "Re-allow unprivileged transfers for a whole collection.",
                        "",
                        "Origin must be Signed and the sender should be the Admin of the `collection`.",
                        "",
                        "- `collection`: The collection to be thawed.",
                        "",
                        "Emits `CollectionThawed`.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "transfer_ownership",
                      "fields": [
                        {
                          "name": "collection",
                          "type": 4,
                          "typeName": "T::CollectionId"
                        },
                        {
                          "name": "new_owner",
                          "type": 242,
                          "typeName": "AccountIdLookupOf<T>"
                        }
                      ],
                      "index": 11,
                      "docs": [
                        "Change the Owner of a collection.",
                        "",
                        "Origin must be Signed and the sender should be the Owner of the `collection`.",
                        "",
                        "- `collection`: The collection whose owner should be changed.",
                        "- `owner`: The new Owner of this collection. They must have called",
                        "  `set_accept_ownership` with `collection` in order for this operation to succeed.",
                        "",
                        "Emits `OwnerChanged`.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "set_team",
                      "fields": [
                        {
                          "name": "collection",
                          "type": 4,
                          "typeName": "T::CollectionId"
                        },
                        {
                          "name": "issuer",
                          "type": 242,
                          "typeName": "AccountIdLookupOf<T>"
                        },
                        {
                          "name": "admin",
                          "type": 242,
                          "typeName": "AccountIdLookupOf<T>"
                        },
                        {
                          "name": "freezer",
                          "type": 242,
                          "typeName": "AccountIdLookupOf<T>"
                        }
                      ],
                      "index": 12,
                      "docs": [
                        "Change the Issuer, Admin and Freezer of a collection.",
                        "",
                        "Origin must be Signed and the sender should be the Owner of the `collection`.",
                        "",
                        "- `collection`: The collection whose team should be changed.",
                        "- `issuer`: The new Issuer of this collection.",
                        "- `admin`: The new Admin of this collection.",
                        "- `freezer`: The new Freezer of this collection.",
                        "",
                        "Emits `TeamChanged`.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "approve_transfer",
                      "fields": [
                        {
                          "name": "collection",
                          "type": 4,
                          "typeName": "T::CollectionId"
                        },
                        {
                          "name": "item",
                          "type": 4,
                          "typeName": "T::ItemId"
                        },
                        {
                          "name": "delegate",
                          "type": 242,
                          "typeName": "AccountIdLookupOf<T>"
                        }
                      ],
                      "index": 13,
                      "docs": [
                        "Approve an item to be transferred by a delegated third-party account.",
                        "",
                        "The origin must conform to `ForceOrigin` or must be `Signed` and the sender must be",
                        "either the owner of the `item` or the admin of the collection.",
                        "",
                        "- `collection`: The collection of the item to be approved for delegated transfer.",
                        "- `item`: The item of the item to be approved for delegated transfer.",
                        "- `delegate`: The account to delegate permission to transfer the item.",
                        "",
                        "Important NOTE: The `approved` account gets reset after each transfer.",
                        "",
                        "Emits `ApprovedTransfer` on success.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "cancel_approval",
                      "fields": [
                        {
                          "name": "collection",
                          "type": 4,
                          "typeName": "T::CollectionId"
                        },
                        {
                          "name": "item",
                          "type": 4,
                          "typeName": "T::ItemId"
                        },
                        {
                          "name": "maybe_check_delegate",
                          "type": 359,
                          "typeName": "Option<AccountIdLookupOf<T>>"
                        }
                      ],
                      "index": 14,
                      "docs": [
                        "Cancel the prior approval for the transfer of an item by a delegate.",
                        "",
                        "Origin must be either:",
                        "- the `Force` origin;",
                        "- `Signed` with the signer being the Admin of the `collection`;",
                        "- `Signed` with the signer being the Owner of the `item`;",
                        "",
                        "Arguments:",
                        "- `collection`: The collection of the item of whose approval will be cancelled.",
                        "- `item`: The item of the item of whose approval will be cancelled.",
                        "- `maybe_check_delegate`: If `Some` will ensure that the given account is the one to",
                        "  which permission of transfer is delegated.",
                        "",
                        "Emits `ApprovalCancelled` on success.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "force_item_status",
                      "fields": [
                        {
                          "name": "collection",
                          "type": 4,
                          "typeName": "T::CollectionId"
                        },
                        {
                          "name": "owner",
                          "type": 242,
                          "typeName": "AccountIdLookupOf<T>"
                        },
                        {
                          "name": "issuer",
                          "type": 242,
                          "typeName": "AccountIdLookupOf<T>"
                        },
                        {
                          "name": "admin",
                          "type": 242,
                          "typeName": "AccountIdLookupOf<T>"
                        },
                        {
                          "name": "freezer",
                          "type": 242,
                          "typeName": "AccountIdLookupOf<T>"
                        },
                        {
                          "name": "free_holding",
                          "type": 8,
                          "typeName": "bool"
                        },
                        {
                          "name": "is_frozen",
                          "type": 8,
                          "typeName": "bool"
                        }
                      ],
                      "index": 15,
                      "docs": [
                        "Alter the attributes of a given item.",
                        "",
                        "Origin must be `ForceOrigin`.",
                        "",
                        "- `collection`: The identifier of the item.",
                        "- `owner`: The new Owner of this item.",
                        "- `issuer`: The new Issuer of this item.",
                        "- `admin`: The new Admin of this item.",
                        "- `freezer`: The new Freezer of this item.",
                        "- `free_holding`: Whether a deposit is taken for holding an item of this collection.",
                        "- `is_frozen`: Whether this collection is frozen except for permissioned/admin",
                        "instructions.",
                        "",
                        "Emits `ItemStatusChanged` with the identity of the item.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "set_attribute",
                      "fields": [
                        {
                          "name": "collection",
                          "type": 4,
                          "typeName": "T::CollectionId"
                        },
                        {
                          "name": "maybe_item",
                          "type": 133,
                          "typeName": "Option<T::ItemId>"
                        },
                        {
                          "name": "key",
                          "type": 134,
                          "typeName": "BoundedVec<u8, T::KeyLimit>"
                        },
                        {
                          "name": "value",
                          "type": 135,
                          "typeName": "BoundedVec<u8, T::ValueLimit>"
                        }
                      ],
                      "index": 16,
                      "docs": [
                        "Set an attribute for a collection or item.",
                        "",
                        "Origin must be either `ForceOrigin` or Signed and the sender should be the Owner of the",
                        "`collection`.",
                        "",
                        "If the origin is Signed, then funds of signer are reserved according to the formula:",
                        "`MetadataDepositBase + DepositPerByte * (key.len + value.len)` taking into",
                        "account any already reserved funds.",
                        "",
                        "- `collection`: The identifier of the collection whose item's metadata to set.",
                        "- `maybe_item`: The identifier of the item whose metadata to set.",
                        "- `key`: The key of the attribute.",
                        "- `value`: The value to which to set the attribute.",
                        "",
                        "Emits `AttributeSet`.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "clear_attribute",
                      "fields": [
                        {
                          "name": "collection",
                          "type": 4,
                          "typeName": "T::CollectionId"
                        },
                        {
                          "name": "maybe_item",
                          "type": 133,
                          "typeName": "Option<T::ItemId>"
                        },
                        {
                          "name": "key",
                          "type": 134,
                          "typeName": "BoundedVec<u8, T::KeyLimit>"
                        }
                      ],
                      "index": 17,
                      "docs": [
                        "Clear an attribute for a collection or item.",
                        "",
                        "Origin must be either `ForceOrigin` or Signed and the sender should be the Owner of the",
                        "`collection`.",
                        "",
                        "Any deposit is freed for the collection's owner.",
                        "",
                        "- `collection`: The identifier of the collection whose item's metadata to clear.",
                        "- `maybe_item`: The identifier of the item whose metadata to clear.",
                        "- `key`: The key of the attribute.",
                        "",
                        "Emits `AttributeCleared`.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "set_metadata",
                      "fields": [
                        {
                          "name": "collection",
                          "type": 4,
                          "typeName": "T::CollectionId"
                        },
                        {
                          "name": "item",
                          "type": 4,
                          "typeName": "T::ItemId"
                        },
                        {
                          "name": "data",
                          "type": 131,
                          "typeName": "BoundedVec<u8, T::StringLimit>"
                        },
                        {
                          "name": "is_frozen",
                          "type": 8,
                          "typeName": "bool"
                        }
                      ],
                      "index": 18,
                      "docs": [
                        "Set the metadata for an item.",
                        "",
                        "Origin must be either `ForceOrigin` or Signed and the sender should be the Owner of the",
                        "`collection`.",
                        "",
                        "If the origin is Signed, then funds of signer are reserved according to the formula:",
                        "`MetadataDepositBase + DepositPerByte * data.len` taking into",
                        "account any already reserved funds.",
                        "",
                        "- `collection`: The identifier of the collection whose item's metadata to set.",
                        "- `item`: The identifier of the item whose metadata to set.",
                        "- `data`: The general information of this item. Limited in length by `StringLimit`.",
                        "- `is_frozen`: Whether the metadata should be frozen against further changes.",
                        "",
                        "Emits `MetadataSet`.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "clear_metadata",
                      "fields": [
                        {
                          "name": "collection",
                          "type": 4,
                          "typeName": "T::CollectionId"
                        },
                        {
                          "name": "item",
                          "type": 4,
                          "typeName": "T::ItemId"
                        }
                      ],
                      "index": 19,
                      "docs": [
                        "Clear the metadata for an item.",
                        "",
                        "Origin must be either `ForceOrigin` or Signed and the sender should be the Owner of the",
                        "`item`.",
                        "",
                        "Any deposit is freed for the collection's owner.",
                        "",
                        "- `collection`: The identifier of the collection whose item's metadata to clear.",
                        "- `item`: The identifier of the item whose metadata to clear.",
                        "",
                        "Emits `MetadataCleared`.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "set_collection_metadata",
                      "fields": [
                        {
                          "name": "collection",
                          "type": 4,
                          "typeName": "T::CollectionId"
                        },
                        {
                          "name": "data",
                          "type": 131,
                          "typeName": "BoundedVec<u8, T::StringLimit>"
                        },
                        {
                          "name": "is_frozen",
                          "type": 8,
                          "typeName": "bool"
                        }
                      ],
                      "index": 20,
                      "docs": [
                        "Set the metadata for a collection.",
                        "",
                        "Origin must be either `ForceOrigin` or `Signed` and the sender should be the Owner of",
                        "the `collection`.",
                        "",
                        "If the origin is `Signed`, then funds of signer are reserved according to the formula:",
                        "`MetadataDepositBase + DepositPerByte * data.len` taking into",
                        "account any already reserved funds.",
                        "",
                        "- `collection`: The identifier of the item whose metadata to update.",
                        "- `data`: The general information of this item. Limited in length by `StringLimit`.",
                        "- `is_frozen`: Whether the metadata should be frozen against further changes.",
                        "",
                        "Emits `CollectionMetadataSet`.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "clear_collection_metadata",
                      "fields": [
                        {
                          "name": "collection",
                          "type": 4,
                          "typeName": "T::CollectionId"
                        }
                      ],
                      "index": 21,
                      "docs": [
                        "Clear the metadata for a collection.",
                        "",
                        "Origin must be either `ForceOrigin` or `Signed` and the sender should be the Owner of",
                        "the `collection`.",
                        "",
                        "Any deposit is freed for the collection's owner.",
                        "",
                        "- `collection`: The identifier of the collection whose metadata to clear.",
                        "",
                        "Emits `CollectionMetadataCleared`.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "set_accept_ownership",
                      "fields": [
                        {
                          "name": "maybe_collection",
                          "type": 133,
                          "typeName": "Option<T::CollectionId>"
                        }
                      ],
                      "index": 22,
                      "docs": [
                        "Set (or reset) the acceptance of ownership for a particular account.",
                        "",
                        "Origin must be `Signed` and if `maybe_collection` is `Some`, then the signer must have a",
                        "provider reference.",
                        "",
                        "- `maybe_collection`: The identifier of the collection whose ownership the signer is",
                        "  willing to accept, or if `None`, an indication that the signer is willing to accept no",
                        "  ownership transferal.",
                        "",
                        "Emits `OwnershipAcceptanceChanged`."
                      ]
                    },
                    {
                      "name": "set_collection_max_supply",
                      "fields": [
                        {
                          "name": "collection",
                          "type": 4,
                          "typeName": "T::CollectionId"
                        },
                        {
                          "name": "max_supply",
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 23,
                      "docs": [
                        "Set the maximum amount of items a collection could have.",
                        "",
                        "Origin must be either `ForceOrigin` or `Signed` and the sender should be the Owner of",
                        "the `collection`.",
                        "",
                        "Note: This function can only succeed once per collection.",
                        "",
                        "- `collection`: The identifier of the collection to change.",
                        "- `max_supply`: The maximum amount of items a collection could have.",
                        "",
                        "Emits `CollectionMaxSupplySet` event when successful."
                      ]
                    },
                    {
                      "name": "set_price",
                      "fields": [
                        {
                          "name": "collection",
                          "type": 4,
                          "typeName": "T::CollectionId"
                        },
                        {
                          "name": "item",
                          "type": 4,
                          "typeName": "T::ItemId"
                        },
                        {
                          "name": "price",
                          "type": 360,
                          "typeName": "Option<ItemPrice<T, I>>"
                        },
                        {
                          "name": "whitelisted_buyer",
                          "type": 359,
                          "typeName": "Option<AccountIdLookupOf<T>>"
                        }
                      ],
                      "index": 24,
                      "docs": [
                        "Set (or reset) the price for an item.",
                        "",
                        "Origin must be Signed and must be the owner of the asset `item`.",
                        "",
                        "- `collection`: The collection of the item.",
                        "- `item`: The item to set the price for.",
                        "- `price`: The price for the item. Pass `None`, to reset the price.",
                        "- `buyer`: Restricts the buy operation to a specific account.",
                        "",
                        "Emits `ItemPriceSet` on success if the price is not `None`.",
                        "Emits `ItemPriceRemoved` on success if the price is `None`."
                      ]
                    },
                    {
                      "name": "buy_item",
                      "fields": [
                        {
                          "name": "collection",
                          "type": 4,
                          "typeName": "T::CollectionId"
                        },
                        {
                          "name": "item",
                          "type": 4,
                          "typeName": "T::ItemId"
                        },
                        {
                          "name": "bid_price",
                          "type": 6,
                          "typeName": "ItemPrice<T, I>"
                        }
                      ],
                      "index": 25,
                      "docs": [
                        "Allows to buy an item if it's up for sale.",
                        "",
                        "Origin must be Signed and must not be the owner of the `item`.",
                        "",
                        "- `collection`: The collection of the item.",
                        "- `item`: The item the sender wants to buy.",
                        "- `bid_price`: The price the sender is willing to pay.",
                        "",
                        "Emits `ItemBought` on success."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains a variant per dispatchable extrinsic that this pallet has."
              ]
            }
          },
          {
            "id": 358,
            "type": {
              "path": [
                "pallet_uniques",
                "types",
                "DestroyWitness"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "items",
                      "type": 40,
                      "typeName": "u32"
                    },
                    {
                      "name": "item_metadatas",
                      "type": 40,
                      "typeName": "u32"
                    },
                    {
                      "name": "attributes",
                      "type": 40,
                      "typeName": "u32"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 359,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 242
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 242
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 360,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 6
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 6
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 361,
            "type": {
              "path": [
                "pallet_nfts",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "create",
                      "fields": [
                        {
                          "name": "admin",
                          "type": 242,
                          "typeName": "AccountIdLookupOf<T>"
                        },
                        {
                          "name": "config",
                          "type": 362,
                          "typeName": "CollectionConfigFor<T, I>"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Issue a new collection of non-fungible items from a public origin.",
                        "",
                        "This new collection has no items initially and its owner is the origin.",
                        "",
                        "The origin must be Signed and the sender must have sufficient funds free.",
                        "",
                        "`CollectionDeposit` funds of sender are reserved.",
                        "",
                        "Parameters:",
                        "- `admin`: The admin of this collection. The admin is the initial address of each",
                        "member of the collection's admin team.",
                        "",
                        "Emits `Created` event when successful.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "force_create",
                      "fields": [
                        {
                          "name": "owner",
                          "type": 242,
                          "typeName": "AccountIdLookupOf<T>"
                        },
                        {
                          "name": "config",
                          "type": 362,
                          "typeName": "CollectionConfigFor<T, I>"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Issue a new collection of non-fungible items from a privileged origin.",
                        "",
                        "This new collection has no items initially.",
                        "",
                        "The origin must conform to `ForceOrigin`.",
                        "",
                        "Unlike `create`, no funds are reserved.",
                        "",
                        "- `owner`: The owner of this collection of items. The owner has full superuser",
                        "  permissions over this item, but may later change and configure the permissions using",
                        "  `transfer_ownership` and `set_team`.",
                        "",
                        "Emits `ForceCreated` event when successful.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "destroy",
                      "fields": [
                        {
                          "name": "collection",
                          "type": 4,
                          "typeName": "T::CollectionId"
                        },
                        {
                          "name": "witness",
                          "type": 369,
                          "typeName": "DestroyWitness"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Destroy a collection of fungible items.",
                        "",
                        "The origin must conform to `ForceOrigin` or must be `Signed` and the sender must be the",
                        "owner of the `collection`.",
                        "",
                        "NOTE: The collection must have 0 items to be destroyed.",
                        "",
                        "- `collection`: The identifier of the collection to be destroyed.",
                        "- `witness`: Information on the items minted in the collection. This must be",
                        "correct.",
                        "",
                        "Emits `Destroyed` event when successful.",
                        "",
                        "Weight: `O(m + c + a)` where:",
                        "- `m = witness.item_metadatas`",
                        "- `c = witness.item_configs`",
                        "- `a = witness.attributes`"
                      ]
                    },
                    {
                      "name": "mint",
                      "fields": [
                        {
                          "name": "collection",
                          "type": 4,
                          "typeName": "T::CollectionId"
                        },
                        {
                          "name": "item",
                          "type": 4,
                          "typeName": "T::ItemId"
                        },
                        {
                          "name": "mint_to",
                          "type": 242,
                          "typeName": "AccountIdLookupOf<T>"
                        },
                        {
                          "name": "witness_data",
                          "type": 370,
                          "typeName": "Option<MintWitness<T::ItemId, DepositBalanceOf<T, I>>>"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Mint an item of a particular collection.",
                        "",
                        "The origin must be Signed and the sender must comply with the `mint_settings` rules.",
                        "",
                        "- `collection`: The collection of the item to be minted.",
                        "- `item`: An identifier of the new item.",
                        "- `mint_to`: Account into which the item will be minted.",
                        "- `witness_data`: When the mint type is `HolderOf(collection_id)`, then the owned",
                        "  item_id from that collection needs to be provided within the witness data object. If",
                        "  the mint price is set, then it should be additionally confirmed in the `witness_data`.",
                        "",
                        "Note: the deposit will be taken from the `origin` and not the `owner` of the `item`.",
                        "",
                        "Emits `Issued` event when successful.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "force_mint",
                      "fields": [
                        {
                          "name": "collection",
                          "type": 4,
                          "typeName": "T::CollectionId"
                        },
                        {
                          "name": "item",
                          "type": 4,
                          "typeName": "T::ItemId"
                        },
                        {
                          "name": "mint_to",
                          "type": 242,
                          "typeName": "AccountIdLookupOf<T>"
                        },
                        {
                          "name": "item_config",
                          "type": 372,
                          "typeName": "ItemConfig"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Mint an item of a particular collection from a privileged origin.",
                        "",
                        "The origin must conform to `ForceOrigin` or must be `Signed` and the sender must be the",
                        "Issuer of the `collection`.",
                        "",
                        "- `collection`: The collection of the item to be minted.",
                        "- `item`: An identifier of the new item.",
                        "- `mint_to`: Account into which the item will be minted.",
                        "- `item_config`: A config of the new item.",
                        "",
                        "Emits `Issued` event when successful.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "burn",
                      "fields": [
                        {
                          "name": "collection",
                          "type": 4,
                          "typeName": "T::CollectionId"
                        },
                        {
                          "name": "item",
                          "type": 4,
                          "typeName": "T::ItemId"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Destroy a single item.",
                        "",
                        "The origin must conform to `ForceOrigin` or must be Signed and the signing account must",
                        "be the owner of the `item`.",
                        "",
                        "- `collection`: The collection of the item to be burned.",
                        "- `item`: The item to be burned.",
                        "",
                        "Emits `Burned`.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "transfer",
                      "fields": [
                        {
                          "name": "collection",
                          "type": 4,
                          "typeName": "T::CollectionId"
                        },
                        {
                          "name": "item",
                          "type": 4,
                          "typeName": "T::ItemId"
                        },
                        {
                          "name": "dest",
                          "type": 242,
                          "typeName": "AccountIdLookupOf<T>"
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "Move an item from the sender account to another.",
                        "",
                        "Origin must be Signed and the signing account must be either:",
                        "- the Owner of the `item`;",
                        "- the approved delegate for the `item` (in this case, the approval is reset).",
                        "",
                        "Arguments:",
                        "- `collection`: The collection of the item to be transferred.",
                        "- `item`: The item to be transferred.",
                        "- `dest`: The account to receive ownership of the item.",
                        "",
                        "Emits `Transferred`.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "redeposit",
                      "fields": [
                        {
                          "name": "collection",
                          "type": 4,
                          "typeName": "T::CollectionId"
                        },
                        {
                          "name": "items",
                          "type": 132,
                          "typeName": "Vec<T::ItemId>"
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "Re-evaluate the deposits on some items.",
                        "",
                        "Origin must be Signed and the sender should be the Owner of the `collection`.",
                        "",
                        "- `collection`: The collection of the items to be reevaluated.",
                        "- `items`: The items of the collection whose deposits will be reevaluated.",
                        "",
                        "NOTE: This exists as a best-effort function. Any items which are unknown or",
                        "in the case that the owner account does not have reservable funds to pay for a",
                        "deposit increase are ignored. Generally the owner isn't going to call this on items",
                        "whose existing deposit is less than the refreshed deposit as it would only cost them,",
                        "so it's of little consequence.",
                        "",
                        "It will still return an error in the case that the collection is unknown or the signer",
                        "is not permitted to call it.",
                        "",
                        "Weight: `O(items.len())`"
                      ]
                    },
                    {
                      "name": "lock_item_transfer",
                      "fields": [
                        {
                          "name": "collection",
                          "type": 4,
                          "typeName": "T::CollectionId"
                        },
                        {
                          "name": "item",
                          "type": 4,
                          "typeName": "T::ItemId"
                        }
                      ],
                      "index": 8,
                      "docs": [
                        "Disallow further unprivileged transfer of an item.",
                        "",
                        "Origin must be Signed and the sender should be the Freezer of the `collection`.",
                        "",
                        "- `collection`: The collection of the item to be changed.",
                        "- `item`: The item to become non-transferable.",
                        "",
                        "Emits `ItemTransferLocked`.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "unlock_item_transfer",
                      "fields": [
                        {
                          "name": "collection",
                          "type": 4,
                          "typeName": "T::CollectionId"
                        },
                        {
                          "name": "item",
                          "type": 4,
                          "typeName": "T::ItemId"
                        }
                      ],
                      "index": 9,
                      "docs": [
                        "Re-allow unprivileged transfer of an item.",
                        "",
                        "Origin must be Signed and the sender should be the Freezer of the `collection`.",
                        "",
                        "- `collection`: The collection of the item to be changed.",
                        "- `item`: The item to become transferable.",
                        "",
                        "Emits `ItemTransferUnlocked`.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "lock_collection",
                      "fields": [
                        {
                          "name": "collection",
                          "type": 4,
                          "typeName": "T::CollectionId"
                        },
                        {
                          "name": "lock_settings",
                          "type": 363,
                          "typeName": "CollectionSettings"
                        }
                      ],
                      "index": 10,
                      "docs": [
                        "Disallows specified settings for the whole collection.",
                        "",
                        "Origin must be Signed and the sender should be the Owner of the `collection`.",
                        "",
                        "- `collection`: The collection to be locked.",
                        "- `lock_settings`: The settings to be locked.",
                        "",
                        "Note: it's possible to only lock(set) the setting, but not to unset it.",
                        "",
                        "Emits `CollectionLocked`.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "transfer_ownership",
                      "fields": [
                        {
                          "name": "collection",
                          "type": 4,
                          "typeName": "T::CollectionId"
                        },
                        {
                          "name": "new_owner",
                          "type": 242,
                          "typeName": "AccountIdLookupOf<T>"
                        }
                      ],
                      "index": 11,
                      "docs": [
                        "Change the Owner of a collection.",
                        "",
                        "Origin must be Signed and the sender should be the Owner of the `collection`.",
                        "",
                        "- `collection`: The collection whose owner should be changed.",
                        "- `owner`: The new Owner of this collection. They must have called",
                        "  `set_accept_ownership` with `collection` in order for this operation to succeed.",
                        "",
                        "Emits `OwnerChanged`.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "set_team",
                      "fields": [
                        {
                          "name": "collection",
                          "type": 4,
                          "typeName": "T::CollectionId"
                        },
                        {
                          "name": "issuer",
                          "type": 359,
                          "typeName": "Option<AccountIdLookupOf<T>>"
                        },
                        {
                          "name": "admin",
                          "type": 359,
                          "typeName": "Option<AccountIdLookupOf<T>>"
                        },
                        {
                          "name": "freezer",
                          "type": 359,
                          "typeName": "Option<AccountIdLookupOf<T>>"
                        }
                      ],
                      "index": 12,
                      "docs": [
                        "Change the Issuer, Admin and Freezer of a collection.",
                        "",
                        "Origin must be either `ForceOrigin` or Signed and the sender should be the Owner of the",
                        "`collection`.",
                        "",
                        "Note: by setting the role to `None` only the `ForceOrigin` will be able to change it",
                        "after to `Some(account)`.",
                        "",
                        "- `collection`: The collection whose team should be changed.",
                        "- `issuer`: The new Issuer of this collection.",
                        "- `admin`: The new Admin of this collection.",
                        "- `freezer`: The new Freezer of this collection.",
                        "",
                        "Emits `TeamChanged`.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "force_collection_owner",
                      "fields": [
                        {
                          "name": "collection",
                          "type": 4,
                          "typeName": "T::CollectionId"
                        },
                        {
                          "name": "owner",
                          "type": 242,
                          "typeName": "AccountIdLookupOf<T>"
                        }
                      ],
                      "index": 13,
                      "docs": [
                        "Change the Owner of a collection.",
                        "",
                        "Origin must be `ForceOrigin`.",
                        "",
                        "- `collection`: The identifier of the collection.",
                        "- `owner`: The new Owner of this collection.",
                        "",
                        "Emits `OwnerChanged`.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "force_collection_config",
                      "fields": [
                        {
                          "name": "collection",
                          "type": 4,
                          "typeName": "T::CollectionId"
                        },
                        {
                          "name": "config",
                          "type": 362,
                          "typeName": "CollectionConfigFor<T, I>"
                        }
                      ],
                      "index": 14,
                      "docs": [
                        "Change the config of a collection.",
                        "",
                        "Origin must be `ForceOrigin`.",
                        "",
                        "- `collection`: The identifier of the collection.",
                        "- `config`: The new config of this collection.",
                        "",
                        "Emits `CollectionConfigChanged`.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "approve_transfer",
                      "fields": [
                        {
                          "name": "collection",
                          "type": 4,
                          "typeName": "T::CollectionId"
                        },
                        {
                          "name": "item",
                          "type": 4,
                          "typeName": "T::ItemId"
                        },
                        {
                          "name": "delegate",
                          "type": 242,
                          "typeName": "AccountIdLookupOf<T>"
                        },
                        {
                          "name": "maybe_deadline",
                          "type": 133,
                          "typeName": "Option<BlockNumberFor<T>>"
                        }
                      ],
                      "index": 15,
                      "docs": [
                        "Approve an item to be transferred by a delegated third-party account.",
                        "",
                        "Origin must be either `ForceOrigin` or Signed and the sender should be the Owner of the",
                        "`item`.",
                        "",
                        "- `collection`: The collection of the item to be approved for delegated transfer.",
                        "- `item`: The item to be approved for delegated transfer.",
                        "- `delegate`: The account to delegate permission to transfer the item.",
                        "- `maybe_deadline`: Optional deadline for the approval. Specified by providing the",
                        "\tnumber of blocks after which the approval will expire",
                        "",
                        "Emits `TransferApproved` on success.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "cancel_approval",
                      "fields": [
                        {
                          "name": "collection",
                          "type": 4,
                          "typeName": "T::CollectionId"
                        },
                        {
                          "name": "item",
                          "type": 4,
                          "typeName": "T::ItemId"
                        },
                        {
                          "name": "delegate",
                          "type": 242,
                          "typeName": "AccountIdLookupOf<T>"
                        }
                      ],
                      "index": 16,
                      "docs": [
                        "Cancel one of the transfer approvals for a specific item.",
                        "",
                        "Origin must be either:",
                        "- the `Force` origin;",
                        "- `Signed` with the signer being the Owner of the `item`;",
                        "",
                        "Arguments:",
                        "- `collection`: The collection of the item of whose approval will be cancelled.",
                        "- `item`: The item of the collection of whose approval will be cancelled.",
                        "- `delegate`: The account that is going to loose their approval.",
                        "",
                        "Emits `ApprovalCancelled` on success.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "clear_all_transfer_approvals",
                      "fields": [
                        {
                          "name": "collection",
                          "type": 4,
                          "typeName": "T::CollectionId"
                        },
                        {
                          "name": "item",
                          "type": 4,
                          "typeName": "T::ItemId"
                        }
                      ],
                      "index": 17,
                      "docs": [
                        "Cancel all the approvals of a specific item.",
                        "",
                        "Origin must be either:",
                        "- the `Force` origin;",
                        "- `Signed` with the signer being the Owner of the `item`;",
                        "",
                        "Arguments:",
                        "- `collection`: The collection of the item of whose approvals will be cleared.",
                        "- `item`: The item of the collection of whose approvals will be cleared.",
                        "",
                        "Emits `AllApprovalsCancelled` on success.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "lock_item_properties",
                      "fields": [
                        {
                          "name": "collection",
                          "type": 4,
                          "typeName": "T::CollectionId"
                        },
                        {
                          "name": "item",
                          "type": 4,
                          "typeName": "T::ItemId"
                        },
                        {
                          "name": "lock_metadata",
                          "type": 8,
                          "typeName": "bool"
                        },
                        {
                          "name": "lock_attributes",
                          "type": 8,
                          "typeName": "bool"
                        }
                      ],
                      "index": 18,
                      "docs": [
                        "Disallows changing the metadata or attributes of the item.",
                        "",
                        "Origin must be either `ForceOrigin` or Signed and the sender should be the Admin",
                        "of the `collection`.",
                        "",
                        "- `collection`: The collection if the `item`.",
                        "- `item`: An item to be locked.",
                        "- `lock_metadata`: Specifies whether the metadata should be locked.",
                        "- `lock_attributes`: Specifies whether the attributes in the `CollectionOwner` namespace",
                        "  should be locked.",
                        "",
                        "Note: `lock_attributes` affects the attributes in the `CollectionOwner` namespace only.",
                        "When the metadata or attributes are locked, it won't be possible the unlock them.",
                        "",
                        "Emits `ItemPropertiesLocked`.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "set_attribute",
                      "fields": [
                        {
                          "name": "collection",
                          "type": 4,
                          "typeName": "T::CollectionId"
                        },
                        {
                          "name": "maybe_item",
                          "type": 133,
                          "typeName": "Option<T::ItemId>"
                        },
                        {
                          "name": "namespace",
                          "type": 139,
                          "typeName": "AttributeNamespace<T::AccountId>"
                        },
                        {
                          "name": "key",
                          "type": 135,
                          "typeName": "BoundedVec<u8, T::KeyLimit>"
                        },
                        {
                          "name": "value",
                          "type": 138,
                          "typeName": "BoundedVec<u8, T::ValueLimit>"
                        }
                      ],
                      "index": 19,
                      "docs": [
                        "Set an attribute for a collection or item.",
                        "",
                        "Origin must be Signed and must conform to the namespace ruleset:",
                        "- `CollectionOwner` namespace could be modified by the `collection` Admin only;",
                        "- `ItemOwner` namespace could be modified by the `maybe_item` owner only. `maybe_item`",
                        "  should be set in that case;",
                        "- `Account(AccountId)` namespace could be modified only when the `origin` was given a",
                        "  permission to do so;",
                        "",
                        "The funds of `origin` are reserved according to the formula:",
                        "`AttributeDepositBase + DepositPerByte * (key.len + value.len)` taking into",
                        "account any already reserved funds.",
                        "",
                        "- `collection`: The identifier of the collection whose item's metadata to set.",
                        "- `maybe_item`: The identifier of the item whose metadata to set.",
                        "- `namespace`: Attribute's namespace.",
                        "- `key`: The key of the attribute.",
                        "- `value`: The value to which to set the attribute.",
                        "",
                        "Emits `AttributeSet`.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "force_set_attribute",
                      "fields": [
                        {
                          "name": "set_as",
                          "type": 136,
                          "typeName": "Option<T::AccountId>"
                        },
                        {
                          "name": "collection",
                          "type": 4,
                          "typeName": "T::CollectionId"
                        },
                        {
                          "name": "maybe_item",
                          "type": 133,
                          "typeName": "Option<T::ItemId>"
                        },
                        {
                          "name": "namespace",
                          "type": 139,
                          "typeName": "AttributeNamespace<T::AccountId>"
                        },
                        {
                          "name": "key",
                          "type": 135,
                          "typeName": "BoundedVec<u8, T::KeyLimit>"
                        },
                        {
                          "name": "value",
                          "type": 138,
                          "typeName": "BoundedVec<u8, T::ValueLimit>"
                        }
                      ],
                      "index": 20,
                      "docs": [
                        "Force-set an attribute for a collection or item.",
                        "",
                        "Origin must be `ForceOrigin`.",
                        "",
                        "If the attribute already exists and it was set by another account, the deposit",
                        "will be returned to the previous owner.",
                        "",
                        "- `set_as`: An optional owner of the attribute.",
                        "- `collection`: The identifier of the collection whose item's metadata to set.",
                        "- `maybe_item`: The identifier of the item whose metadata to set.",
                        "- `namespace`: Attribute's namespace.",
                        "- `key`: The key of the attribute.",
                        "- `value`: The value to which to set the attribute.",
                        "",
                        "Emits `AttributeSet`.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "clear_attribute",
                      "fields": [
                        {
                          "name": "collection",
                          "type": 4,
                          "typeName": "T::CollectionId"
                        },
                        {
                          "name": "maybe_item",
                          "type": 133,
                          "typeName": "Option<T::ItemId>"
                        },
                        {
                          "name": "namespace",
                          "type": 139,
                          "typeName": "AttributeNamespace<T::AccountId>"
                        },
                        {
                          "name": "key",
                          "type": 135,
                          "typeName": "BoundedVec<u8, T::KeyLimit>"
                        }
                      ],
                      "index": 21,
                      "docs": [
                        "Clear an attribute for a collection or item.",
                        "",
                        "Origin must be either `ForceOrigin` or Signed and the sender should be the Owner of the",
                        "attribute.",
                        "",
                        "Any deposit is freed for the collection's owner.",
                        "",
                        "- `collection`: The identifier of the collection whose item's metadata to clear.",
                        "- `maybe_item`: The identifier of the item whose metadata to clear.",
                        "- `namespace`: Attribute's namespace.",
                        "- `key`: The key of the attribute.",
                        "",
                        "Emits `AttributeCleared`.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "approve_item_attributes",
                      "fields": [
                        {
                          "name": "collection",
                          "type": 4,
                          "typeName": "T::CollectionId"
                        },
                        {
                          "name": "item",
                          "type": 4,
                          "typeName": "T::ItemId"
                        },
                        {
                          "name": "delegate",
                          "type": 242,
                          "typeName": "AccountIdLookupOf<T>"
                        }
                      ],
                      "index": 22,
                      "docs": [
                        "Approve item's attributes to be changed by a delegated third-party account.",
                        "",
                        "Origin must be Signed and must be an owner of the `item`.",
                        "",
                        "- `collection`: A collection of the item.",
                        "- `item`: The item that holds attributes.",
                        "- `delegate`: The account to delegate permission to change attributes of the item.",
                        "",
                        "Emits `ItemAttributesApprovalAdded` on success."
                      ]
                    },
                    {
                      "name": "cancel_item_attributes_approval",
                      "fields": [
                        {
                          "name": "collection",
                          "type": 4,
                          "typeName": "T::CollectionId"
                        },
                        {
                          "name": "item",
                          "type": 4,
                          "typeName": "T::ItemId"
                        },
                        {
                          "name": "delegate",
                          "type": 242,
                          "typeName": "AccountIdLookupOf<T>"
                        },
                        {
                          "name": "witness",
                          "type": 373,
                          "typeName": "CancelAttributesApprovalWitness"
                        }
                      ],
                      "index": 23,
                      "docs": [
                        "Cancel the previously provided approval to change item's attributes.",
                        "All the previously set attributes by the `delegate` will be removed.",
                        "",
                        "Origin must be Signed and must be an owner of the `item`.",
                        "",
                        "- `collection`: Collection that the item is contained within.",
                        "- `item`: The item that holds attributes.",
                        "- `delegate`: The previously approved account to remove.",
                        "",
                        "Emits `ItemAttributesApprovalRemoved` on success."
                      ]
                    },
                    {
                      "name": "set_metadata",
                      "fields": [
                        {
                          "name": "collection",
                          "type": 4,
                          "typeName": "T::CollectionId"
                        },
                        {
                          "name": "item",
                          "type": 4,
                          "typeName": "T::ItemId"
                        },
                        {
                          "name": "data",
                          "type": 138,
                          "typeName": "BoundedVec<u8, T::StringLimit>"
                        }
                      ],
                      "index": 24,
                      "docs": [
                        "Set the metadata for an item.",
                        "",
                        "Origin must be either `ForceOrigin` or Signed and the sender should be the Admin of the",
                        "`collection`.",
                        "",
                        "If the origin is Signed, then funds of signer are reserved according to the formula:",
                        "`MetadataDepositBase + DepositPerByte * data.len` taking into",
                        "account any already reserved funds.",
                        "",
                        "- `collection`: The identifier of the collection whose item's metadata to set.",
                        "- `item`: The identifier of the item whose metadata to set.",
                        "- `data`: The general information of this item. Limited in length by `StringLimit`.",
                        "",
                        "Emits `ItemMetadataSet`.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "clear_metadata",
                      "fields": [
                        {
                          "name": "collection",
                          "type": 4,
                          "typeName": "T::CollectionId"
                        },
                        {
                          "name": "item",
                          "type": 4,
                          "typeName": "T::ItemId"
                        }
                      ],
                      "index": 25,
                      "docs": [
                        "Clear the metadata for an item.",
                        "",
                        "Origin must be either `ForceOrigin` or Signed and the sender should be the Admin of the",
                        "`collection`.",
                        "",
                        "Any deposit is freed for the collection's owner.",
                        "",
                        "- `collection`: The identifier of the collection whose item's metadata to clear.",
                        "- `item`: The identifier of the item whose metadata to clear.",
                        "",
                        "Emits `ItemMetadataCleared`.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "set_collection_metadata",
                      "fields": [
                        {
                          "name": "collection",
                          "type": 4,
                          "typeName": "T::CollectionId"
                        },
                        {
                          "name": "data",
                          "type": 138,
                          "typeName": "BoundedVec<u8, T::StringLimit>"
                        }
                      ],
                      "index": 26,
                      "docs": [
                        "Set the metadata for a collection.",
                        "",
                        "Origin must be either `ForceOrigin` or `Signed` and the sender should be the Admin of",
                        "the `collection`.",
                        "",
                        "If the origin is `Signed`, then funds of signer are reserved according to the formula:",
                        "`MetadataDepositBase + DepositPerByte * data.len` taking into",
                        "account any already reserved funds.",
                        "",
                        "- `collection`: The identifier of the item whose metadata to update.",
                        "- `data`: The general information of this item. Limited in length by `StringLimit`.",
                        "",
                        "Emits `CollectionMetadataSet`.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "clear_collection_metadata",
                      "fields": [
                        {
                          "name": "collection",
                          "type": 4,
                          "typeName": "T::CollectionId"
                        }
                      ],
                      "index": 27,
                      "docs": [
                        "Clear the metadata for a collection.",
                        "",
                        "Origin must be either `ForceOrigin` or `Signed` and the sender should be the Admin of",
                        "the `collection`.",
                        "",
                        "Any deposit is freed for the collection's owner.",
                        "",
                        "- `collection`: The identifier of the collection whose metadata to clear.",
                        "",
                        "Emits `CollectionMetadataCleared`.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "set_accept_ownership",
                      "fields": [
                        {
                          "name": "maybe_collection",
                          "type": 133,
                          "typeName": "Option<T::CollectionId>"
                        }
                      ],
                      "index": 28,
                      "docs": [
                        "Set (or reset) the acceptance of ownership for a particular account.",
                        "",
                        "Origin must be `Signed` and if `maybe_collection` is `Some`, then the signer must have a",
                        "provider reference.",
                        "",
                        "- `maybe_collection`: The identifier of the collection whose ownership the signer is",
                        "  willing to accept, or if `None`, an indication that the signer is willing to accept no",
                        "  ownership transferal.",
                        "",
                        "Emits `OwnershipAcceptanceChanged`."
                      ]
                    },
                    {
                      "name": "set_collection_max_supply",
                      "fields": [
                        {
                          "name": "collection",
                          "type": 4,
                          "typeName": "T::CollectionId"
                        },
                        {
                          "name": "max_supply",
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 29,
                      "docs": [
                        "Set the maximum number of items a collection could have.",
                        "",
                        "Origin must be either `ForceOrigin` or `Signed` and the sender should be the Owner of",
                        "the `collection`.",
                        "",
                        "- `collection`: The identifier of the collection to change.",
                        "- `max_supply`: The maximum number of items a collection could have.",
                        "",
                        "Emits `CollectionMaxSupplySet` event when successful."
                      ]
                    },
                    {
                      "name": "update_mint_settings",
                      "fields": [
                        {
                          "name": "collection",
                          "type": 4,
                          "typeName": "T::CollectionId"
                        },
                        {
                          "name": "mint_settings",
                          "type": 365,
                          "typeName": "MintSettings<BalanceOf<T, I>, BlockNumberFor<T>, T::CollectionId>"
                        }
                      ],
                      "index": 30,
                      "docs": [
                        "Update mint settings.",
                        "",
                        "Origin must be either `ForceOrigin` or `Signed` and the sender should be the Issuer",
                        "of the `collection`.",
                        "",
                        "- `collection`: The identifier of the collection to change.",
                        "- `mint_settings`: The new mint settings.",
                        "",
                        "Emits `CollectionMintSettingsUpdated` event when successful."
                      ]
                    },
                    {
                      "name": "set_price",
                      "fields": [
                        {
                          "name": "collection",
                          "type": 4,
                          "typeName": "T::CollectionId"
                        },
                        {
                          "name": "item",
                          "type": 4,
                          "typeName": "T::ItemId"
                        },
                        {
                          "name": "price",
                          "type": 360,
                          "typeName": "Option<ItemPrice<T, I>>"
                        },
                        {
                          "name": "whitelisted_buyer",
                          "type": 359,
                          "typeName": "Option<AccountIdLookupOf<T>>"
                        }
                      ],
                      "index": 31,
                      "docs": [
                        "Set (or reset) the price for an item.",
                        "",
                        "Origin must be Signed and must be the owner of the `item`.",
                        "",
                        "- `collection`: The collection of the item.",
                        "- `item`: The item to set the price for.",
                        "- `price`: The price for the item. Pass `None`, to reset the price.",
                        "- `buyer`: Restricts the buy operation to a specific account.",
                        "",
                        "Emits `ItemPriceSet` on success if the price is not `None`.",
                        "Emits `ItemPriceRemoved` on success if the price is `None`."
                      ]
                    },
                    {
                      "name": "buy_item",
                      "fields": [
                        {
                          "name": "collection",
                          "type": 4,
                          "typeName": "T::CollectionId"
                        },
                        {
                          "name": "item",
                          "type": 4,
                          "typeName": "T::ItemId"
                        },
                        {
                          "name": "bid_price",
                          "type": 6,
                          "typeName": "ItemPrice<T, I>"
                        }
                      ],
                      "index": 32,
                      "docs": [
                        "Allows to buy an item if it's up for sale.",
                        "",
                        "Origin must be Signed and must not be the owner of the `item`.",
                        "",
                        "- `collection`: The collection of the item.",
                        "- `item`: The item the sender wants to buy.",
                        "- `bid_price`: The price the sender is willing to pay.",
                        "",
                        "Emits `ItemBought` on success."
                      ]
                    },
                    {
                      "name": "pay_tips",
                      "fields": [
                        {
                          "name": "tips",
                          "type": 374,
                          "typeName": "BoundedVec<ItemTipOf<T, I>, T::MaxTips>"
                        }
                      ],
                      "index": 33,
                      "docs": [
                        "Allows to pay the tips.",
                        "",
                        "Origin must be Signed.",
                        "",
                        "- `tips`: Tips array.",
                        "",
                        "Emits `TipSent` on every tip transfer."
                      ]
                    },
                    {
                      "name": "create_swap",
                      "fields": [
                        {
                          "name": "offered_collection",
                          "type": 4,
                          "typeName": "T::CollectionId"
                        },
                        {
                          "name": "offered_item",
                          "type": 4,
                          "typeName": "T::ItemId"
                        },
                        {
                          "name": "desired_collection",
                          "type": 4,
                          "typeName": "T::CollectionId"
                        },
                        {
                          "name": "maybe_desired_item",
                          "type": 133,
                          "typeName": "Option<T::ItemId>"
                        },
                        {
                          "name": "maybe_price",
                          "type": 140,
                          "typeName": "Option<PriceWithDirection<ItemPrice<T, I>>>"
                        },
                        {
                          "name": "duration",
                          "type": 4,
                          "typeName": "BlockNumberFor<T>"
                        }
                      ],
                      "index": 34,
                      "docs": [
                        "Register a new atomic swap, declaring an intention to send an `item` in exchange for",
                        "`desired_item` from origin to target on the current blockchain.",
                        "The target can execute the swap during the specified `duration` of blocks (if set).",
                        "Additionally, the price could be set for the desired `item`.",
                        "",
                        "Origin must be Signed and must be an owner of the `item`.",
                        "",
                        "- `collection`: The collection of the item.",
                        "- `item`: The item an owner wants to give.",
                        "- `desired_collection`: The collection of the desired item.",
                        "- `desired_item`: The desired item an owner wants to receive.",
                        "- `maybe_price`: The price an owner is willing to pay or receive for the desired `item`.",
                        "- `duration`: A deadline for the swap. Specified by providing the number of blocks",
                        "\tafter which the swap will expire.",
                        "",
                        "Emits `SwapCreated` on success."
                      ]
                    },
                    {
                      "name": "cancel_swap",
                      "fields": [
                        {
                          "name": "offered_collection",
                          "type": 4,
                          "typeName": "T::CollectionId"
                        },
                        {
                          "name": "offered_item",
                          "type": 4,
                          "typeName": "T::ItemId"
                        }
                      ],
                      "index": 35,
                      "docs": [
                        "Cancel an atomic swap.",
                        "",
                        "Origin must be Signed.",
                        "Origin must be an owner of the `item` if the deadline hasn't expired.",
                        "",
                        "- `collection`: The collection of the item.",
                        "- `item`: The item an owner wants to give.",
                        "",
                        "Emits `SwapCancelled` on success."
                      ]
                    },
                    {
                      "name": "claim_swap",
                      "fields": [
                        {
                          "name": "send_collection",
                          "type": 4,
                          "typeName": "T::CollectionId"
                        },
                        {
                          "name": "send_item",
                          "type": 4,
                          "typeName": "T::ItemId"
                        },
                        {
                          "name": "receive_collection",
                          "type": 4,
                          "typeName": "T::CollectionId"
                        },
                        {
                          "name": "receive_item",
                          "type": 4,
                          "typeName": "T::ItemId"
                        },
                        {
                          "name": "witness_price",
                          "type": 140,
                          "typeName": "Option<PriceWithDirection<ItemPrice<T, I>>>"
                        }
                      ],
                      "index": 36,
                      "docs": [
                        "Claim an atomic swap.",
                        "This method executes a pending swap, that was created by a counterpart before.",
                        "",
                        "Origin must be Signed and must be an owner of the `item`.",
                        "",
                        "- `send_collection`: The collection of the item to be sent.",
                        "- `send_item`: The item to be sent.",
                        "- `receive_collection`: The collection of the item to be received.",
                        "- `receive_item`: The item to be received.",
                        "- `witness_price`: A price that was previously agreed on.",
                        "",
                        "Emits `SwapClaimed` on success."
                      ]
                    },
                    {
                      "name": "mint_pre_signed",
                      "fields": [
                        {
                          "name": "mint_data",
                          "type": 377,
                          "typeName": "Box<PreSignedMintOf<T, I>>"
                        },
                        {
                          "name": "signature",
                          "type": 378,
                          "typeName": "T::OffchainSignature"
                        },
                        {
                          "name": "signer",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 37,
                      "docs": [
                        "Mint an item by providing the pre-signed approval.",
                        "",
                        "Origin must be Signed.",
                        "",
                        "- `mint_data`: The pre-signed approval that consists of the information about the item,",
                        "  its metadata, attributes, who can mint it (`None` for anyone) and until what block",
                        "  number.",
                        "- `signature`: The signature of the `data` object.",
                        "- `signer`: The `data` object's signer. Should be an Issuer of the collection.",
                        "",
                        "Emits `Issued` on success.",
                        "Emits `AttributeSet` if the attributes were provided.",
                        "Emits `ItemMetadataSet` if the metadata was not empty."
                      ]
                    },
                    {
                      "name": "set_attributes_pre_signed",
                      "fields": [
                        {
                          "name": "data",
                          "type": 381,
                          "typeName": "PreSignedAttributesOf<T, I>"
                        },
                        {
                          "name": "signature",
                          "type": 378,
                          "typeName": "T::OffchainSignature"
                        },
                        {
                          "name": "signer",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 38,
                      "docs": [
                        "Set attributes for an item by providing the pre-signed approval.",
                        "",
                        "Origin must be Signed and must be an owner of the `data.item`.",
                        "",
                        "- `data`: The pre-signed approval that consists of the information about the item,",
                        "  attributes to update and until what block number.",
                        "- `signature`: The signature of the `data` object.",
                        "- `signer`: The `data` object's signer. Should be an Admin of the collection for the",
                        "  `CollectionOwner` namespace.",
                        "",
                        "Emits `AttributeSet` for each provided attribute.",
                        "Emits `ItemAttributesApprovalAdded` if the approval wasn't set before.",
                        "Emits `PreSignedAttributesSet` on success."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains a variant per dispatchable extrinsic that this pallet has."
              ]
            }
          },
          {
            "id": 362,
            "type": {
              "path": [
                "pallet_nfts",
                "types",
                "CollectionConfig"
              ],
              "params": [
                {
                  "name": "Price",
                  "type": 6
                },
                {
                  "name": "BlockNumber",
                  "type": 4
                },
                {
                  "name": "CollectionId",
                  "type": 4
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "settings",
                      "type": 363,
                      "typeName": "CollectionSettings"
                    },
                    {
                      "name": "max_supply",
                      "type": 133,
                      "typeName": "Option<u32>"
                    },
                    {
                      "name": "mint_settings",
                      "type": 365,
                      "typeName": "MintSettings<Price, BlockNumber, CollectionId>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 363,
            "type": {
              "path": [
                "pallet_nfts",
                "types",
                "BitFlags"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 364
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 12,
                      "typeName": "CollectionSetting"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 364,
            "type": {
              "path": [
                "pallet_nfts",
                "types",
                "CollectionSetting"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "TransferableItems",
                      "index": 1
                    },
                    {
                      "name": "UnlockedMetadata",
                      "index": 2
                    },
                    {
                      "name": "UnlockedAttributes",
                      "index": 4
                    },
                    {
                      "name": "UnlockedMaxSupply",
                      "index": 8
                    },
                    {
                      "name": "DepositRequired",
                      "index": 16
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 365,
            "type": {
              "path": [
                "pallet_nfts",
                "types",
                "MintSettings"
              ],
              "params": [
                {
                  "name": "Price",
                  "type": 6
                },
                {
                  "name": "BlockNumber",
                  "type": 4
                },
                {
                  "name": "CollectionId",
                  "type": 4
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "mint_type",
                      "type": 366,
                      "typeName": "MintType<CollectionId>"
                    },
                    {
                      "name": "price",
                      "type": 360,
                      "typeName": "Option<Price>"
                    },
                    {
                      "name": "start_block",
                      "type": 133,
                      "typeName": "Option<BlockNumber>"
                    },
                    {
                      "name": "end_block",
                      "type": 133,
                      "typeName": "Option<BlockNumber>"
                    },
                    {
                      "name": "default_item_settings",
                      "type": 367,
                      "typeName": "ItemSettings"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 366,
            "type": {
              "path": [
                "pallet_nfts",
                "types",
                "MintType"
              ],
              "params": [
                {
                  "name": "CollectionId",
                  "type": 4
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Issuer",
                      "index": 0
                    },
                    {
                      "name": "Public",
                      "index": 1
                    },
                    {
                      "name": "HolderOf",
                      "fields": [
                        {
                          "type": 4,
                          "typeName": "CollectionId"
                        }
                      ],
                      "index": 2
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 367,
            "type": {
              "path": [
                "pallet_nfts",
                "types",
                "BitFlags"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 368
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 12,
                      "typeName": "ItemSetting"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 368,
            "type": {
              "path": [
                "pallet_nfts",
                "types",
                "ItemSetting"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Transferable",
                      "index": 1
                    },
                    {
                      "name": "UnlockedMetadata",
                      "index": 2
                    },
                    {
                      "name": "UnlockedAttributes",
                      "index": 4
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 369,
            "type": {
              "path": [
                "pallet_nfts",
                "types",
                "DestroyWitness"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "item_metadatas",
                      "type": 40,
                      "typeName": "u32"
                    },
                    {
                      "name": "item_configs",
                      "type": 40,
                      "typeName": "u32"
                    },
                    {
                      "name": "attributes",
                      "type": 40,
                      "typeName": "u32"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 370,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 371
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 371
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 371,
            "type": {
              "path": [
                "pallet_nfts",
                "types",
                "MintWitness"
              ],
              "params": [
                {
                  "name": "ItemId",
                  "type": 4
                },
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "owned_item",
                      "type": 133,
                      "typeName": "Option<ItemId>"
                    },
                    {
                      "name": "mint_price",
                      "type": 360,
                      "typeName": "Option<Balance>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 372,
            "type": {
              "path": [
                "pallet_nfts",
                "types",
                "ItemConfig"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "settings",
                      "type": 367,
                      "typeName": "ItemSettings"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 373,
            "type": {
              "path": [
                "pallet_nfts",
                "types",
                "CancelAttributesApprovalWitness"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "account_attributes",
                      "type": 4,
                      "typeName": "u32"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 374,
            "type": {
              "path": [
                "bounded_collections",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 375
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 376,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 375,
            "type": {
              "path": [
                "pallet_nfts",
                "types",
                "ItemTip"
              ],
              "params": [
                {
                  "name": "CollectionId",
                  "type": 4
                },
                {
                  "name": "ItemId",
                  "type": 4
                },
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "Amount",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "collection",
                      "type": 4,
                      "typeName": "CollectionId"
                    },
                    {
                      "name": "item",
                      "type": 4,
                      "typeName": "ItemId"
                    },
                    {
                      "name": "receiver",
                      "type": 0,
                      "typeName": "AccountId"
                    },
                    {
                      "name": "amount",
                      "type": 6,
                      "typeName": "Amount"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 376,
            "type": {
              "def": {
                "sequence": {
                  "type": 375
                }
              }
            }
          },
          {
            "id": 377,
            "type": {
              "path": [
                "pallet_nfts",
                "types",
                "PreSignedMint"
              ],
              "params": [
                {
                  "name": "CollectionId",
                  "type": 4
                },
                {
                  "name": "ItemId",
                  "type": 4
                },
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "Deadline",
                  "type": 4
                },
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "collection",
                      "type": 4,
                      "typeName": "CollectionId"
                    },
                    {
                      "name": "item",
                      "type": 4,
                      "typeName": "ItemId"
                    },
                    {
                      "name": "attributes",
                      "type": 167,
                      "typeName": "Vec<(Vec<u8>, Vec<u8>)>"
                    },
                    {
                      "name": "metadata",
                      "type": 14,
                      "typeName": "Vec<u8>"
                    },
                    {
                      "name": "only_account",
                      "type": 136,
                      "typeName": "Option<AccountId>"
                    },
                    {
                      "name": "deadline",
                      "type": 4,
                      "typeName": "Deadline"
                    },
                    {
                      "name": "mint_price",
                      "type": 360,
                      "typeName": "Option<Balance>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 378,
            "type": {
              "path": [
                "sp_runtime",
                "MultiSignature"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Ed25519",
                      "fields": [
                        {
                          "type": 379,
                          "typeName": "ed25519::Signature"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Sr25519",
                      "fields": [
                        {
                          "type": 379,
                          "typeName": "sr25519::Signature"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "Ecdsa",
                      "fields": [
                        {
                          "type": 380,
                          "typeName": "ecdsa::Signature"
                        }
                      ],
                      "index": 2
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 379,
            "type": {
              "def": {
                "array": {
                  "len": 64,
                  "type": 2
                }
              }
            }
          },
          {
            "id": 380,
            "type": {
              "def": {
                "array": {
                  "len": 65,
                  "type": 2
                }
              }
            }
          },
          {
            "id": 381,
            "type": {
              "path": [
                "pallet_nfts",
                "types",
                "PreSignedAttributes"
              ],
              "params": [
                {
                  "name": "CollectionId",
                  "type": 4
                },
                {
                  "name": "ItemId",
                  "type": 4
                },
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "Deadline",
                  "type": 4
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "collection",
                      "type": 4,
                      "typeName": "CollectionId"
                    },
                    {
                      "name": "item",
                      "type": 4,
                      "typeName": "ItemId"
                    },
                    {
                      "name": "attributes",
                      "type": 167,
                      "typeName": "Vec<(Vec<u8>, Vec<u8>)>"
                    },
                    {
                      "name": "namespace",
                      "type": 139,
                      "typeName": "AttributeNamespace<AccountId>"
                    },
                    {
                      "name": "deadline",
                      "type": 4,
                      "typeName": "Deadline"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 382,
            "type": {
              "path": [
                "pallet_assets",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "create",
                      "fields": [
                        {
                          "name": "id",
                          "type": 37,
                          "typeName": "T::AssetIdParameter"
                        },
                        {
                          "name": "admin",
                          "type": 242,
                          "typeName": "AccountIdLookupOf<T>"
                        },
                        {
                          "name": "min_balance",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Issue a new class of fungible assets from a public origin.",
                        "",
                        "This new asset class has no assets initially and its owner is the origin.",
                        "",
                        "The origin must conform to the configured `CreateOrigin` and have sufficient funds free.",
                        "",
                        "Funds of sender are reserved by `AssetDeposit`.",
                        "",
                        "Parameters:",
                        "- `id`: The identifier of the new asset. This must not be currently in use to identify",
                        "an existing asset. If [`NextAssetId`] is set, then this must be equal to it.",
                        "- `admin`: The admin of this class of assets. The admin is the initial address of each",
                        "member of the asset class's admin team.",
                        "- `min_balance`: The minimum balance of this new asset that any single account must",
                        "have. If an account's balance is reduced below this, then it collapses to zero.",
                        "",
                        "Emits `Created` event when successful.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "force_create",
                      "fields": [
                        {
                          "name": "id",
                          "type": 37,
                          "typeName": "T::AssetIdParameter"
                        },
                        {
                          "name": "owner",
                          "type": 242,
                          "typeName": "AccountIdLookupOf<T>"
                        },
                        {
                          "name": "is_sufficient",
                          "type": 8,
                          "typeName": "bool"
                        },
                        {
                          "name": "min_balance",
                          "type": 44,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Issue a new class of fungible assets from a privileged origin.",
                        "",
                        "This new asset class has no assets initially.",
                        "",
                        "The origin must conform to `ForceOrigin`.",
                        "",
                        "Unlike `create`, no funds are reserved.",
                        "",
                        "- `id`: The identifier of the new asset. This must not be currently in use to identify",
                        "an existing asset. If [`NextAssetId`] is set, then this must be equal to it.",
                        "- `owner`: The owner of this class of assets. The owner has full superuser permissions",
                        "over this asset, but may later change and configure the permissions using",
                        "`transfer_ownership` and `set_team`.",
                        "- `min_balance`: The minimum balance of this new asset that any single account must",
                        "have. If an account's balance is reduced below this, then it collapses to zero.",
                        "",
                        "Emits `ForceCreated` event when successful.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "start_destroy",
                      "fields": [
                        {
                          "name": "id",
                          "type": 37,
                          "typeName": "T::AssetIdParameter"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Start the process of destroying a fungible asset class.",
                        "",
                        "`start_destroy` is the first in a series of extrinsics that should be called, to allow",
                        "destruction of an asset class.",
                        "",
                        "The origin must conform to `ForceOrigin` or must be `Signed` by the asset's `owner`.",
                        "",
                        "- `id`: The identifier of the asset to be destroyed. This must identify an existing",
                        "  asset.",
                        "",
                        "The asset class must be frozen before calling `start_destroy`."
                      ]
                    },
                    {
                      "name": "destroy_accounts",
                      "fields": [
                        {
                          "name": "id",
                          "type": 37,
                          "typeName": "T::AssetIdParameter"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Destroy all accounts associated with a given asset.",
                        "",
                        "`destroy_accounts` should only be called after `start_destroy` has been called, and the",
                        "asset is in a `Destroying` state.",
                        "",
                        "Due to weight restrictions, this function may need to be called multiple times to fully",
                        "destroy all accounts. It will destroy `RemoveItemsLimit` accounts at a time.",
                        "",
                        "- `id`: The identifier of the asset to be destroyed. This must identify an existing",
                        "  asset.",
                        "",
                        "Each call emits the `Event::DestroyedAccounts` event."
                      ]
                    },
                    {
                      "name": "destroy_approvals",
                      "fields": [
                        {
                          "name": "id",
                          "type": 37,
                          "typeName": "T::AssetIdParameter"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Destroy all approvals associated with a given asset up to the max (T::RemoveItemsLimit).",
                        "",
                        "`destroy_approvals` should only be called after `start_destroy` has been called, and the",
                        "asset is in a `Destroying` state.",
                        "",
                        "Due to weight restrictions, this function may need to be called multiple times to fully",
                        "destroy all approvals. It will destroy `RemoveItemsLimit` approvals at a time.",
                        "",
                        "- `id`: The identifier of the asset to be destroyed. This must identify an existing",
                        "  asset.",
                        "",
                        "Each call emits the `Event::DestroyedApprovals` event."
                      ]
                    },
                    {
                      "name": "finish_destroy",
                      "fields": [
                        {
                          "name": "id",
                          "type": 37,
                          "typeName": "T::AssetIdParameter"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Complete destroying asset and unreserve currency.",
                        "",
                        "`finish_destroy` should only be called after `start_destroy` has been called, and the",
                        "asset is in a `Destroying` state. All accounts or approvals should be destroyed before",
                        "hand.",
                        "",
                        "- `id`: The identifier of the asset to be destroyed. This must identify an existing",
                        "  asset.",
                        "",
                        "Each successful call emits the `Event::Destroyed` event."
                      ]
                    },
                    {
                      "name": "mint",
                      "fields": [
                        {
                          "name": "id",
                          "type": 37,
                          "typeName": "T::AssetIdParameter"
                        },
                        {
                          "name": "beneficiary",
                          "type": 242,
                          "typeName": "AccountIdLookupOf<T>"
                        },
                        {
                          "name": "amount",
                          "type": 44,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "Mint assets of a particular class.",
                        "",
                        "The origin must be Signed and the sender must be the Issuer of the asset `id`.",
                        "",
                        "- `id`: The identifier of the asset to have some amount minted.",
                        "- `beneficiary`: The account to be credited with the minted assets.",
                        "- `amount`: The amount of the asset to be minted.",
                        "",
                        "Emits `Issued` event when successful.",
                        "",
                        "Weight: `O(1)`",
                        "Modes: Pre-existing balance of `beneficiary`; Account pre-existence of `beneficiary`."
                      ]
                    },
                    {
                      "name": "burn",
                      "fields": [
                        {
                          "name": "id",
                          "type": 37,
                          "typeName": "T::AssetIdParameter"
                        },
                        {
                          "name": "who",
                          "type": 242,
                          "typeName": "AccountIdLookupOf<T>"
                        },
                        {
                          "name": "amount",
                          "type": 44,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "Reduce the balance of `who` by as much as possible up to `amount` assets of `id`.",
                        "",
                        "Origin must be Signed and the sender should be the Manager of the asset `id`.",
                        "",
                        "Bails with `NoAccount` if the `who` is already dead.",
                        "",
                        "- `id`: The identifier of the asset to have some amount burned.",
                        "- `who`: The account to be debited from.",
                        "- `amount`: The maximum amount by which `who`'s balance should be reduced.",
                        "",
                        "Emits `Burned` with the actual amount burned. If this takes the balance to below the",
                        "minimum for the asset, then the amount burned is increased to take it to zero.",
                        "",
                        "Weight: `O(1)`",
                        "Modes: Post-existence of `who`; Pre & post Zombie-status of `who`."
                      ]
                    },
                    {
                      "name": "transfer",
                      "fields": [
                        {
                          "name": "id",
                          "type": 37,
                          "typeName": "T::AssetIdParameter"
                        },
                        {
                          "name": "target",
                          "type": 242,
                          "typeName": "AccountIdLookupOf<T>"
                        },
                        {
                          "name": "amount",
                          "type": 44,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 8,
                      "docs": [
                        "Move some assets from the sender account to another.",
                        "",
                        "Origin must be Signed.",
                        "",
                        "- `id`: The identifier of the asset to have some amount transferred.",
                        "- `target`: The account to be credited.",
                        "- `amount`: The amount by which the sender's balance of assets should be reduced and",
                        "`target`'s balance increased. The amount actually transferred may be slightly greater in",
                        "the case that the transfer would otherwise take the sender balance above zero but below",
                        "the minimum balance. Must be greater than zero.",
                        "",
                        "Emits `Transferred` with the actual amount transferred. If this takes the source balance",
                        "to below the minimum for the asset, then the amount transferred is increased to take it",
                        "to zero.",
                        "",
                        "Weight: `O(1)`",
                        "Modes: Pre-existence of `target`; Post-existence of sender; Account pre-existence of",
                        "`target`."
                      ]
                    },
                    {
                      "name": "transfer_keep_alive",
                      "fields": [
                        {
                          "name": "id",
                          "type": 37,
                          "typeName": "T::AssetIdParameter"
                        },
                        {
                          "name": "target",
                          "type": 242,
                          "typeName": "AccountIdLookupOf<T>"
                        },
                        {
                          "name": "amount",
                          "type": 44,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 9,
                      "docs": [
                        "Move some assets from the sender account to another, keeping the sender account alive.",
                        "",
                        "Origin must be Signed.",
                        "",
                        "- `id`: The identifier of the asset to have some amount transferred.",
                        "- `target`: The account to be credited.",
                        "- `amount`: The amount by which the sender's balance of assets should be reduced and",
                        "`target`'s balance increased. The amount actually transferred may be slightly greater in",
                        "the case that the transfer would otherwise take the sender balance above zero but below",
                        "the minimum balance. Must be greater than zero.",
                        "",
                        "Emits `Transferred` with the actual amount transferred. If this takes the source balance",
                        "to below the minimum for the asset, then the amount transferred is increased to take it",
                        "to zero.",
                        "",
                        "Weight: `O(1)`",
                        "Modes: Pre-existence of `target`; Post-existence of sender; Account pre-existence of",
                        "`target`."
                      ]
                    },
                    {
                      "name": "force_transfer",
                      "fields": [
                        {
                          "name": "id",
                          "type": 37,
                          "typeName": "T::AssetIdParameter"
                        },
                        {
                          "name": "source",
                          "type": 242,
                          "typeName": "AccountIdLookupOf<T>"
                        },
                        {
                          "name": "dest",
                          "type": 242,
                          "typeName": "AccountIdLookupOf<T>"
                        },
                        {
                          "name": "amount",
                          "type": 44,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 10,
                      "docs": [
                        "Move some assets from one account to another.",
                        "",
                        "Origin must be Signed and the sender should be the Admin of the asset `id`.",
                        "",
                        "- `id`: The identifier of the asset to have some amount transferred.",
                        "- `source`: The account to be debited.",
                        "- `dest`: The account to be credited.",
                        "- `amount`: The amount by which the `source`'s balance of assets should be reduced and",
                        "`dest`'s balance increased. The amount actually transferred may be slightly greater in",
                        "the case that the transfer would otherwise take the `source` balance above zero but",
                        "below the minimum balance. Must be greater than zero.",
                        "",
                        "Emits `Transferred` with the actual amount transferred. If this takes the source balance",
                        "to below the minimum for the asset, then the amount transferred is increased to take it",
                        "to zero.",
                        "",
                        "Weight: `O(1)`",
                        "Modes: Pre-existence of `dest`; Post-existence of `source`; Account pre-existence of",
                        "`dest`."
                      ]
                    },
                    {
                      "name": "freeze",
                      "fields": [
                        {
                          "name": "id",
                          "type": 37,
                          "typeName": "T::AssetIdParameter"
                        },
                        {
                          "name": "who",
                          "type": 242,
                          "typeName": "AccountIdLookupOf<T>"
                        }
                      ],
                      "index": 11,
                      "docs": [
                        "Disallow further unprivileged transfers of an asset `id` from an account `who`. `who`",
                        "must already exist as an entry in `Account`s of the asset. If you want to freeze an",
                        "account that does not have an entry, use `touch_other` first.",
                        "",
                        "Origin must be Signed and the sender should be the Freezer of the asset `id`.",
                        "",
                        "- `id`: The identifier of the asset to be frozen.",
                        "- `who`: The account to be frozen.",
                        "",
                        "Emits `Frozen`.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "thaw",
                      "fields": [
                        {
                          "name": "id",
                          "type": 37,
                          "typeName": "T::AssetIdParameter"
                        },
                        {
                          "name": "who",
                          "type": 242,
                          "typeName": "AccountIdLookupOf<T>"
                        }
                      ],
                      "index": 12,
                      "docs": [
                        "Allow unprivileged transfers to and from an account again.",
                        "",
                        "Origin must be Signed and the sender should be the Admin of the asset `id`.",
                        "",
                        "- `id`: The identifier of the asset to be frozen.",
                        "- `who`: The account to be unfrozen.",
                        "",
                        "Emits `Thawed`.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "freeze_asset",
                      "fields": [
                        {
                          "name": "id",
                          "type": 37,
                          "typeName": "T::AssetIdParameter"
                        }
                      ],
                      "index": 13,
                      "docs": [
                        "Disallow further unprivileged transfers for the asset class.",
                        "",
                        "Origin must be Signed and the sender should be the Freezer of the asset `id`.",
                        "",
                        "- `id`: The identifier of the asset to be frozen.",
                        "",
                        "Emits `Frozen`.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "thaw_asset",
                      "fields": [
                        {
                          "name": "id",
                          "type": 37,
                          "typeName": "T::AssetIdParameter"
                        }
                      ],
                      "index": 14,
                      "docs": [
                        "Allow unprivileged transfers for the asset again.",
                        "",
                        "Origin must be Signed and the sender should be the Admin of the asset `id`.",
                        "",
                        "- `id`: The identifier of the asset to be thawed.",
                        "",
                        "Emits `Thawed`.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "transfer_ownership",
                      "fields": [
                        {
                          "name": "id",
                          "type": 37,
                          "typeName": "T::AssetIdParameter"
                        },
                        {
                          "name": "owner",
                          "type": 242,
                          "typeName": "AccountIdLookupOf<T>"
                        }
                      ],
                      "index": 15,
                      "docs": [
                        "Change the Owner of an asset.",
                        "",
                        "Origin must be Signed and the sender should be the Owner of the asset `id`.",
                        "",
                        "- `id`: The identifier of the asset.",
                        "- `owner`: The new Owner of this asset.",
                        "",
                        "Emits `OwnerChanged`.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "set_team",
                      "fields": [
                        {
                          "name": "id",
                          "type": 37,
                          "typeName": "T::AssetIdParameter"
                        },
                        {
                          "name": "issuer",
                          "type": 242,
                          "typeName": "AccountIdLookupOf<T>"
                        },
                        {
                          "name": "admin",
                          "type": 242,
                          "typeName": "AccountIdLookupOf<T>"
                        },
                        {
                          "name": "freezer",
                          "type": 242,
                          "typeName": "AccountIdLookupOf<T>"
                        }
                      ],
                      "index": 16,
                      "docs": [
                        "Change the Issuer, Admin and Freezer of an asset.",
                        "",
                        "Origin must be Signed and the sender should be the Owner of the asset `id`.",
                        "",
                        "- `id`: The identifier of the asset to be frozen.",
                        "- `issuer`: The new Issuer of this asset.",
                        "- `admin`: The new Admin of this asset.",
                        "- `freezer`: The new Freezer of this asset.",
                        "",
                        "Emits `TeamChanged`.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "set_metadata",
                      "fields": [
                        {
                          "name": "id",
                          "type": 37,
                          "typeName": "T::AssetIdParameter"
                        },
                        {
                          "name": "name",
                          "type": 14,
                          "typeName": "Vec<u8>"
                        },
                        {
                          "name": "symbol",
                          "type": 14,
                          "typeName": "Vec<u8>"
                        },
                        {
                          "name": "decimals",
                          "type": 2,
                          "typeName": "u8"
                        }
                      ],
                      "index": 17,
                      "docs": [
                        "Set the metadata for an asset.",
                        "",
                        "Origin must be Signed and the sender should be the Owner of the asset `id`.",
                        "",
                        "Funds of sender are reserved according to the formula:",
                        "`MetadataDepositBase + MetadataDepositPerByte * (name.len + symbol.len)` taking into",
                        "account any already reserved funds.",
                        "",
                        "- `id`: The identifier of the asset to update.",
                        "- `name`: The user friendly name of this asset. Limited in length by `StringLimit`.",
                        "- `symbol`: The exchange symbol for this asset. Limited in length by `StringLimit`.",
                        "- `decimals`: The number of decimals this asset uses to represent one unit.",
                        "",
                        "Emits `MetadataSet`.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "clear_metadata",
                      "fields": [
                        {
                          "name": "id",
                          "type": 37,
                          "typeName": "T::AssetIdParameter"
                        }
                      ],
                      "index": 18,
                      "docs": [
                        "Clear the metadata for an asset.",
                        "",
                        "Origin must be Signed and the sender should be the Owner of the asset `id`.",
                        "",
                        "Any deposit is freed for the asset owner.",
                        "",
                        "- `id`: The identifier of the asset to clear.",
                        "",
                        "Emits `MetadataCleared`.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "force_set_metadata",
                      "fields": [
                        {
                          "name": "id",
                          "type": 37,
                          "typeName": "T::AssetIdParameter"
                        },
                        {
                          "name": "name",
                          "type": 14,
                          "typeName": "Vec<u8>"
                        },
                        {
                          "name": "symbol",
                          "type": 14,
                          "typeName": "Vec<u8>"
                        },
                        {
                          "name": "decimals",
                          "type": 2,
                          "typeName": "u8"
                        },
                        {
                          "name": "is_frozen",
                          "type": 8,
                          "typeName": "bool"
                        }
                      ],
                      "index": 19,
                      "docs": [
                        "Force the metadata for an asset to some value.",
                        "",
                        "Origin must be ForceOrigin.",
                        "",
                        "Any deposit is left alone.",
                        "",
                        "- `id`: The identifier of the asset to update.",
                        "- `name`: The user friendly name of this asset. Limited in length by `StringLimit`.",
                        "- `symbol`: The exchange symbol for this asset. Limited in length by `StringLimit`.",
                        "- `decimals`: The number of decimals this asset uses to represent one unit.",
                        "",
                        "Emits `MetadataSet`.",
                        "",
                        "Weight: `O(N + S)` where N and S are the length of the name and symbol respectively."
                      ]
                    },
                    {
                      "name": "force_clear_metadata",
                      "fields": [
                        {
                          "name": "id",
                          "type": 37,
                          "typeName": "T::AssetIdParameter"
                        }
                      ],
                      "index": 20,
                      "docs": [
                        "Clear the metadata for an asset.",
                        "",
                        "Origin must be ForceOrigin.",
                        "",
                        "Any deposit is returned.",
                        "",
                        "- `id`: The identifier of the asset to clear.",
                        "",
                        "Emits `MetadataCleared`.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "force_asset_status",
                      "fields": [
                        {
                          "name": "id",
                          "type": 37,
                          "typeName": "T::AssetIdParameter"
                        },
                        {
                          "name": "owner",
                          "type": 242,
                          "typeName": "AccountIdLookupOf<T>"
                        },
                        {
                          "name": "issuer",
                          "type": 242,
                          "typeName": "AccountIdLookupOf<T>"
                        },
                        {
                          "name": "admin",
                          "type": 242,
                          "typeName": "AccountIdLookupOf<T>"
                        },
                        {
                          "name": "freezer",
                          "type": 242,
                          "typeName": "AccountIdLookupOf<T>"
                        },
                        {
                          "name": "min_balance",
                          "type": 44,
                          "typeName": "T::Balance"
                        },
                        {
                          "name": "is_sufficient",
                          "type": 8,
                          "typeName": "bool"
                        },
                        {
                          "name": "is_frozen",
                          "type": 8,
                          "typeName": "bool"
                        }
                      ],
                      "index": 21,
                      "docs": [
                        "Alter the attributes of a given asset.",
                        "",
                        "Origin must be `ForceOrigin`.",
                        "",
                        "- `id`: The identifier of the asset.",
                        "- `owner`: The new Owner of this asset.",
                        "- `issuer`: The new Issuer of this asset.",
                        "- `admin`: The new Admin of this asset.",
                        "- `freezer`: The new Freezer of this asset.",
                        "- `min_balance`: The minimum balance of this new asset that any single account must",
                        "have. If an account's balance is reduced below this, then it collapses to zero.",
                        "- `is_sufficient`: Whether a non-zero balance of this asset is deposit of sufficient",
                        "value to account for the state bloat associated with its balance storage. If set to",
                        "`true`, then non-zero balances may be stored without a `consumer` reference (and thus",
                        "an ED in the Balances pallet or whatever else is used to control user-account state",
                        "growth).",
                        "- `is_frozen`: Whether this asset class is frozen except for permissioned/admin",
                        "instructions.",
                        "",
                        "Emits `AssetStatusChanged` with the identity of the asset.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "approve_transfer",
                      "fields": [
                        {
                          "name": "id",
                          "type": 37,
                          "typeName": "T::AssetIdParameter"
                        },
                        {
                          "name": "delegate",
                          "type": 242,
                          "typeName": "AccountIdLookupOf<T>"
                        },
                        {
                          "name": "amount",
                          "type": 44,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 22,
                      "docs": [
                        "Approve an amount of asset for transfer by a delegated third-party account.",
                        "",
                        "Origin must be Signed.",
                        "",
                        "Ensures that `ApprovalDeposit` worth of `Currency` is reserved from signing account",
                        "for the purpose of holding the approval. If some non-zero amount of assets is already",
                        "approved from signing account to `delegate`, then it is topped up or unreserved to",
                        "meet the right value.",
                        "",
                        "NOTE: The signing account does not need to own `amount` of assets at the point of",
                        "making this call.",
                        "",
                        "- `id`: The identifier of the asset.",
                        "- `delegate`: The account to delegate permission to transfer asset.",
                        "- `amount`: The amount of asset that may be transferred by `delegate`. If there is",
                        "already an approval in place, then this acts additively.",
                        "",
                        "Emits `ApprovedTransfer` on success.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "cancel_approval",
                      "fields": [
                        {
                          "name": "id",
                          "type": 37,
                          "typeName": "T::AssetIdParameter"
                        },
                        {
                          "name": "delegate",
                          "type": 242,
                          "typeName": "AccountIdLookupOf<T>"
                        }
                      ],
                      "index": 23,
                      "docs": [
                        "Cancel all of some asset approved for delegated transfer by a third-party account.",
                        "",
                        "Origin must be Signed and there must be an approval in place between signer and",
                        "`delegate`.",
                        "",
                        "Unreserves any deposit previously reserved by `approve_transfer` for the approval.",
                        "",
                        "- `id`: The identifier of the asset.",
                        "- `delegate`: The account delegated permission to transfer asset.",
                        "",
                        "Emits `ApprovalCancelled` on success.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "force_cancel_approval",
                      "fields": [
                        {
                          "name": "id",
                          "type": 37,
                          "typeName": "T::AssetIdParameter"
                        },
                        {
                          "name": "owner",
                          "type": 242,
                          "typeName": "AccountIdLookupOf<T>"
                        },
                        {
                          "name": "delegate",
                          "type": 242,
                          "typeName": "AccountIdLookupOf<T>"
                        }
                      ],
                      "index": 24,
                      "docs": [
                        "Cancel all of some asset approved for delegated transfer by a third-party account.",
                        "",
                        "Origin must be either ForceOrigin or Signed origin with the signer being the Admin",
                        "account of the asset `id`.",
                        "",
                        "Unreserves any deposit previously reserved by `approve_transfer` for the approval.",
                        "",
                        "- `id`: The identifier of the asset.",
                        "- `delegate`: The account delegated permission to transfer asset.",
                        "",
                        "Emits `ApprovalCancelled` on success.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "transfer_approved",
                      "fields": [
                        {
                          "name": "id",
                          "type": 37,
                          "typeName": "T::AssetIdParameter"
                        },
                        {
                          "name": "owner",
                          "type": 242,
                          "typeName": "AccountIdLookupOf<T>"
                        },
                        {
                          "name": "destination",
                          "type": 242,
                          "typeName": "AccountIdLookupOf<T>"
                        },
                        {
                          "name": "amount",
                          "type": 44,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 25,
                      "docs": [
                        "Transfer some asset balance from a previously delegated account to some third-party",
                        "account.",
                        "",
                        "Origin must be Signed and there must be an approval in place by the `owner` to the",
                        "signer.",
                        "",
                        "If the entire amount approved for transfer is transferred, then any deposit previously",
                        "reserved by `approve_transfer` is unreserved.",
                        "",
                        "- `id`: The identifier of the asset.",
                        "- `owner`: The account which previously approved for a transfer of at least `amount` and",
                        "from which the asset balance will be withdrawn.",
                        "- `destination`: The account to which the asset balance of `amount` will be transferred.",
                        "- `amount`: The amount of assets to transfer.",
                        "",
                        "Emits `TransferredApproved` on success.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "touch",
                      "fields": [
                        {
                          "name": "id",
                          "type": 37,
                          "typeName": "T::AssetIdParameter"
                        }
                      ],
                      "index": 26,
                      "docs": [
                        "Create an asset account for non-provider assets.",
                        "",
                        "A deposit will be taken from the signer account.",
                        "",
                        "- `origin`: Must be Signed; the signer account must have sufficient funds for a deposit",
                        "  to be taken.",
                        "- `id`: The identifier of the asset for the account to be created.",
                        "",
                        "Emits `Touched` event when successful."
                      ]
                    },
                    {
                      "name": "refund",
                      "fields": [
                        {
                          "name": "id",
                          "type": 37,
                          "typeName": "T::AssetIdParameter"
                        },
                        {
                          "name": "allow_burn",
                          "type": 8,
                          "typeName": "bool"
                        }
                      ],
                      "index": 27,
                      "docs": [
                        "Return the deposit (if any) of an asset account or a consumer reference (if any) of an",
                        "account.",
                        "",
                        "The origin must be Signed.",
                        "",
                        "- `id`: The identifier of the asset for which the caller would like the deposit",
                        "  refunded.",
                        "- `allow_burn`: If `true` then assets may be destroyed in order to complete the refund.",
                        "",
                        "Emits `Refunded` event when successful."
                      ]
                    },
                    {
                      "name": "set_min_balance",
                      "fields": [
                        {
                          "name": "id",
                          "type": 37,
                          "typeName": "T::AssetIdParameter"
                        },
                        {
                          "name": "min_balance",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 28,
                      "docs": [
                        "Sets the minimum balance of an asset.",
                        "",
                        "Only works if there aren't any accounts that are holding the asset or if",
                        "the new value of `min_balance` is less than the old one.",
                        "",
                        "Origin must be Signed and the sender has to be the Owner of the",
                        "asset `id`.",
                        "",
                        "- `id`: The identifier of the asset.",
                        "- `min_balance`: The new value of `min_balance`.",
                        "",
                        "Emits `AssetMinBalanceChanged` event when successful."
                      ]
                    },
                    {
                      "name": "touch_other",
                      "fields": [
                        {
                          "name": "id",
                          "type": 37,
                          "typeName": "T::AssetIdParameter"
                        },
                        {
                          "name": "who",
                          "type": 242,
                          "typeName": "AccountIdLookupOf<T>"
                        }
                      ],
                      "index": 29,
                      "docs": [
                        "Create an asset account for `who`.",
                        "",
                        "A deposit will be taken from the signer account.",
                        "",
                        "- `origin`: Must be Signed by `Freezer` or `Admin` of the asset `id`; the signer account",
                        "  must have sufficient funds for a deposit to be taken.",
                        "- `id`: The identifier of the asset for the account to be created.",
                        "- `who`: The account to be created.",
                        "",
                        "Emits `Touched` event when successful."
                      ]
                    },
                    {
                      "name": "refund_other",
                      "fields": [
                        {
                          "name": "id",
                          "type": 37,
                          "typeName": "T::AssetIdParameter"
                        },
                        {
                          "name": "who",
                          "type": 242,
                          "typeName": "AccountIdLookupOf<T>"
                        }
                      ],
                      "index": 30,
                      "docs": [
                        "Return the deposit (if any) of a target asset account. Useful if you are the depositor.",
                        "",
                        "The origin must be Signed and either the account owner, depositor, or asset `Admin`. In",
                        "order to burn a non-zero balance of the asset, the caller must be the account and should",
                        "use `refund`.",
                        "",
                        "- `id`: The identifier of the asset for the account holding a deposit.",
                        "- `who`: The account to refund.",
                        "",
                        "Emits `Refunded` event when successful."
                      ]
                    },
                    {
                      "name": "block",
                      "fields": [
                        {
                          "name": "id",
                          "type": 37,
                          "typeName": "T::AssetIdParameter"
                        },
                        {
                          "name": "who",
                          "type": 242,
                          "typeName": "AccountIdLookupOf<T>"
                        }
                      ],
                      "index": 31,
                      "docs": [
                        "Disallow further unprivileged transfers of an asset `id` to and from an account `who`.",
                        "",
                        "Origin must be Signed and the sender should be the Freezer of the asset `id`.",
                        "",
                        "- `id`: The identifier of the account's asset.",
                        "- `who`: The account to be unblocked.",
                        "",
                        "Emits `Blocked`.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains a variant per dispatchable extrinsic that this pallet has."
              ]
            }
          },
          {
            "id": 383,
            "type": {
              "path": [
                "pallet_nft_fractionalization",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "fractionalize",
                      "fields": [
                        {
                          "name": "nft_collection_id",
                          "type": 4,
                          "typeName": "T::NftCollectionId"
                        },
                        {
                          "name": "nft_id",
                          "type": 4,
                          "typeName": "T::NftId"
                        },
                        {
                          "name": "asset_id",
                          "type": 4,
                          "typeName": "AssetIdOf<T>"
                        },
                        {
                          "name": "beneficiary",
                          "type": 242,
                          "typeName": "AccountIdLookupOf<T>"
                        },
                        {
                          "name": "fractions",
                          "type": 6,
                          "typeName": "AssetBalanceOf<T>"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Lock the NFT and mint a new fungible asset.",
                        "",
                        "The dispatch origin for this call must be Signed.",
                        "The origin must be the owner of the NFT they are trying to lock.",
                        "",
                        "`Deposit` funds of sender are reserved.",
                        "",
                        "- `nft_collection_id`: The ID used to identify the collection of the NFT.",
                        "Is used within the context of `pallet_nfts`.",
                        "- `nft_id`: The ID used to identify the NFT within the given collection.",
                        "Is used within the context of `pallet_nfts`.",
                        "- `asset_id`: The ID of the new asset. It must not exist.",
                        "Is used within the context of `pallet_assets`.",
                        "- `beneficiary`: The account that will receive the newly created asset.",
                        "- `fractions`: The total issuance of the newly created asset class.",
                        "",
                        "Emits `NftFractionalized` event when successful."
                      ]
                    },
                    {
                      "name": "unify",
                      "fields": [
                        {
                          "name": "nft_collection_id",
                          "type": 4,
                          "typeName": "T::NftCollectionId"
                        },
                        {
                          "name": "nft_id",
                          "type": 4,
                          "typeName": "T::NftId"
                        },
                        {
                          "name": "asset_id",
                          "type": 4,
                          "typeName": "AssetIdOf<T>"
                        },
                        {
                          "name": "beneficiary",
                          "type": 242,
                          "typeName": "AccountIdLookupOf<T>"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Burn the total issuance of the fungible asset and return (unlock) the locked NFT.",
                        "",
                        "The dispatch origin for this call must be Signed.",
                        "",
                        "`Deposit` funds will be returned to `asset_creator`.",
                        "",
                        "- `nft_collection_id`: The ID used to identify the collection of the NFT.",
                        "Is used within the context of `pallet_nfts`.",
                        "- `nft_id`: The ID used to identify the NFT within the given collection.",
                        "Is used within the context of `pallet_nfts`.",
                        "- `asset_id`: The ID of the asset being returned and destroyed. Must match",
                        "the original ID of the created asset, corresponding to the NFT.",
                        "Is used within the context of `pallet_assets`.",
                        "- `beneficiary`: The account that will receive the unified NFT.",
                        "",
                        "Emits `NftUnified` event when successful."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains a variant per dispatchable extrinsic that this pallet has."
              ]
            }
          },
          {
            "id": 384,
            "type": {
              "path": [
                "pallet_assets",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "create",
                      "fields": [
                        {
                          "name": "id",
                          "type": 4,
                          "typeName": "T::AssetIdParameter"
                        },
                        {
                          "name": "admin",
                          "type": 242,
                          "typeName": "AccountIdLookupOf<T>"
                        },
                        {
                          "name": "min_balance",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Issue a new class of fungible assets from a public origin.",
                        "",
                        "This new asset class has no assets initially and its owner is the origin.",
                        "",
                        "The origin must conform to the configured `CreateOrigin` and have sufficient funds free.",
                        "",
                        "Funds of sender are reserved by `AssetDeposit`.",
                        "",
                        "Parameters:",
                        "- `id`: The identifier of the new asset. This must not be currently in use to identify",
                        "an existing asset. If [`NextAssetId`] is set, then this must be equal to it.",
                        "- `admin`: The admin of this class of assets. The admin is the initial address of each",
                        "member of the asset class's admin team.",
                        "- `min_balance`: The minimum balance of this new asset that any single account must",
                        "have. If an account's balance is reduced below this, then it collapses to zero.",
                        "",
                        "Emits `Created` event when successful.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "force_create",
                      "fields": [
                        {
                          "name": "id",
                          "type": 4,
                          "typeName": "T::AssetIdParameter"
                        },
                        {
                          "name": "owner",
                          "type": 242,
                          "typeName": "AccountIdLookupOf<T>"
                        },
                        {
                          "name": "is_sufficient",
                          "type": 8,
                          "typeName": "bool"
                        },
                        {
                          "name": "min_balance",
                          "type": 44,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Issue a new class of fungible assets from a privileged origin.",
                        "",
                        "This new asset class has no assets initially.",
                        "",
                        "The origin must conform to `ForceOrigin`.",
                        "",
                        "Unlike `create`, no funds are reserved.",
                        "",
                        "- `id`: The identifier of the new asset. This must not be currently in use to identify",
                        "an existing asset. If [`NextAssetId`] is set, then this must be equal to it.",
                        "- `owner`: The owner of this class of assets. The owner has full superuser permissions",
                        "over this asset, but may later change and configure the permissions using",
                        "`transfer_ownership` and `set_team`.",
                        "- `min_balance`: The minimum balance of this new asset that any single account must",
                        "have. If an account's balance is reduced below this, then it collapses to zero.",
                        "",
                        "Emits `ForceCreated` event when successful.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "start_destroy",
                      "fields": [
                        {
                          "name": "id",
                          "type": 4,
                          "typeName": "T::AssetIdParameter"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Start the process of destroying a fungible asset class.",
                        "",
                        "`start_destroy` is the first in a series of extrinsics that should be called, to allow",
                        "destruction of an asset class.",
                        "",
                        "The origin must conform to `ForceOrigin` or must be `Signed` by the asset's `owner`.",
                        "",
                        "- `id`: The identifier of the asset to be destroyed. This must identify an existing",
                        "  asset.",
                        "",
                        "The asset class must be frozen before calling `start_destroy`."
                      ]
                    },
                    {
                      "name": "destroy_accounts",
                      "fields": [
                        {
                          "name": "id",
                          "type": 4,
                          "typeName": "T::AssetIdParameter"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Destroy all accounts associated with a given asset.",
                        "",
                        "`destroy_accounts` should only be called after `start_destroy` has been called, and the",
                        "asset is in a `Destroying` state.",
                        "",
                        "Due to weight restrictions, this function may need to be called multiple times to fully",
                        "destroy all accounts. It will destroy `RemoveItemsLimit` accounts at a time.",
                        "",
                        "- `id`: The identifier of the asset to be destroyed. This must identify an existing",
                        "  asset.",
                        "",
                        "Each call emits the `Event::DestroyedAccounts` event."
                      ]
                    },
                    {
                      "name": "destroy_approvals",
                      "fields": [
                        {
                          "name": "id",
                          "type": 4,
                          "typeName": "T::AssetIdParameter"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Destroy all approvals associated with a given asset up to the max (T::RemoveItemsLimit).",
                        "",
                        "`destroy_approvals` should only be called after `start_destroy` has been called, and the",
                        "asset is in a `Destroying` state.",
                        "",
                        "Due to weight restrictions, this function may need to be called multiple times to fully",
                        "destroy all approvals. It will destroy `RemoveItemsLimit` approvals at a time.",
                        "",
                        "- `id`: The identifier of the asset to be destroyed. This must identify an existing",
                        "  asset.",
                        "",
                        "Each call emits the `Event::DestroyedApprovals` event."
                      ]
                    },
                    {
                      "name": "finish_destroy",
                      "fields": [
                        {
                          "name": "id",
                          "type": 4,
                          "typeName": "T::AssetIdParameter"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Complete destroying asset and unreserve currency.",
                        "",
                        "`finish_destroy` should only be called after `start_destroy` has been called, and the",
                        "asset is in a `Destroying` state. All accounts or approvals should be destroyed before",
                        "hand.",
                        "",
                        "- `id`: The identifier of the asset to be destroyed. This must identify an existing",
                        "  asset.",
                        "",
                        "Each successful call emits the `Event::Destroyed` event."
                      ]
                    },
                    {
                      "name": "mint",
                      "fields": [
                        {
                          "name": "id",
                          "type": 4,
                          "typeName": "T::AssetIdParameter"
                        },
                        {
                          "name": "beneficiary",
                          "type": 242,
                          "typeName": "AccountIdLookupOf<T>"
                        },
                        {
                          "name": "amount",
                          "type": 44,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "Mint assets of a particular class.",
                        "",
                        "The origin must be Signed and the sender must be the Issuer of the asset `id`.",
                        "",
                        "- `id`: The identifier of the asset to have some amount minted.",
                        "- `beneficiary`: The account to be credited with the minted assets.",
                        "- `amount`: The amount of the asset to be minted.",
                        "",
                        "Emits `Issued` event when successful.",
                        "",
                        "Weight: `O(1)`",
                        "Modes: Pre-existing balance of `beneficiary`; Account pre-existence of `beneficiary`."
                      ]
                    },
                    {
                      "name": "burn",
                      "fields": [
                        {
                          "name": "id",
                          "type": 4,
                          "typeName": "T::AssetIdParameter"
                        },
                        {
                          "name": "who",
                          "type": 242,
                          "typeName": "AccountIdLookupOf<T>"
                        },
                        {
                          "name": "amount",
                          "type": 44,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "Reduce the balance of `who` by as much as possible up to `amount` assets of `id`.",
                        "",
                        "Origin must be Signed and the sender should be the Manager of the asset `id`.",
                        "",
                        "Bails with `NoAccount` if the `who` is already dead.",
                        "",
                        "- `id`: The identifier of the asset to have some amount burned.",
                        "- `who`: The account to be debited from.",
                        "- `amount`: The maximum amount by which `who`'s balance should be reduced.",
                        "",
                        "Emits `Burned` with the actual amount burned. If this takes the balance to below the",
                        "minimum for the asset, then the amount burned is increased to take it to zero.",
                        "",
                        "Weight: `O(1)`",
                        "Modes: Post-existence of `who`; Pre & post Zombie-status of `who`."
                      ]
                    },
                    {
                      "name": "transfer",
                      "fields": [
                        {
                          "name": "id",
                          "type": 4,
                          "typeName": "T::AssetIdParameter"
                        },
                        {
                          "name": "target",
                          "type": 242,
                          "typeName": "AccountIdLookupOf<T>"
                        },
                        {
                          "name": "amount",
                          "type": 44,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 8,
                      "docs": [
                        "Move some assets from the sender account to another.",
                        "",
                        "Origin must be Signed.",
                        "",
                        "- `id`: The identifier of the asset to have some amount transferred.",
                        "- `target`: The account to be credited.",
                        "- `amount`: The amount by which the sender's balance of assets should be reduced and",
                        "`target`'s balance increased. The amount actually transferred may be slightly greater in",
                        "the case that the transfer would otherwise take the sender balance above zero but below",
                        "the minimum balance. Must be greater than zero.",
                        "",
                        "Emits `Transferred` with the actual amount transferred. If this takes the source balance",
                        "to below the minimum for the asset, then the amount transferred is increased to take it",
                        "to zero.",
                        "",
                        "Weight: `O(1)`",
                        "Modes: Pre-existence of `target`; Post-existence of sender; Account pre-existence of",
                        "`target`."
                      ]
                    },
                    {
                      "name": "transfer_keep_alive",
                      "fields": [
                        {
                          "name": "id",
                          "type": 4,
                          "typeName": "T::AssetIdParameter"
                        },
                        {
                          "name": "target",
                          "type": 242,
                          "typeName": "AccountIdLookupOf<T>"
                        },
                        {
                          "name": "amount",
                          "type": 44,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 9,
                      "docs": [
                        "Move some assets from the sender account to another, keeping the sender account alive.",
                        "",
                        "Origin must be Signed.",
                        "",
                        "- `id`: The identifier of the asset to have some amount transferred.",
                        "- `target`: The account to be credited.",
                        "- `amount`: The amount by which the sender's balance of assets should be reduced and",
                        "`target`'s balance increased. The amount actually transferred may be slightly greater in",
                        "the case that the transfer would otherwise take the sender balance above zero but below",
                        "the minimum balance. Must be greater than zero.",
                        "",
                        "Emits `Transferred` with the actual amount transferred. If this takes the source balance",
                        "to below the minimum for the asset, then the amount transferred is increased to take it",
                        "to zero.",
                        "",
                        "Weight: `O(1)`",
                        "Modes: Pre-existence of `target`; Post-existence of sender; Account pre-existence of",
                        "`target`."
                      ]
                    },
                    {
                      "name": "force_transfer",
                      "fields": [
                        {
                          "name": "id",
                          "type": 4,
                          "typeName": "T::AssetIdParameter"
                        },
                        {
                          "name": "source",
                          "type": 242,
                          "typeName": "AccountIdLookupOf<T>"
                        },
                        {
                          "name": "dest",
                          "type": 242,
                          "typeName": "AccountIdLookupOf<T>"
                        },
                        {
                          "name": "amount",
                          "type": 44,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 10,
                      "docs": [
                        "Move some assets from one account to another.",
                        "",
                        "Origin must be Signed and the sender should be the Admin of the asset `id`.",
                        "",
                        "- `id`: The identifier of the asset to have some amount transferred.",
                        "- `source`: The account to be debited.",
                        "- `dest`: The account to be credited.",
                        "- `amount`: The amount by which the `source`'s balance of assets should be reduced and",
                        "`dest`'s balance increased. The amount actually transferred may be slightly greater in",
                        "the case that the transfer would otherwise take the `source` balance above zero but",
                        "below the minimum balance. Must be greater than zero.",
                        "",
                        "Emits `Transferred` with the actual amount transferred. If this takes the source balance",
                        "to below the minimum for the asset, then the amount transferred is increased to take it",
                        "to zero.",
                        "",
                        "Weight: `O(1)`",
                        "Modes: Pre-existence of `dest`; Post-existence of `source`; Account pre-existence of",
                        "`dest`."
                      ]
                    },
                    {
                      "name": "freeze",
                      "fields": [
                        {
                          "name": "id",
                          "type": 4,
                          "typeName": "T::AssetIdParameter"
                        },
                        {
                          "name": "who",
                          "type": 242,
                          "typeName": "AccountIdLookupOf<T>"
                        }
                      ],
                      "index": 11,
                      "docs": [
                        "Disallow further unprivileged transfers of an asset `id` from an account `who`. `who`",
                        "must already exist as an entry in `Account`s of the asset. If you want to freeze an",
                        "account that does not have an entry, use `touch_other` first.",
                        "",
                        "Origin must be Signed and the sender should be the Freezer of the asset `id`.",
                        "",
                        "- `id`: The identifier of the asset to be frozen.",
                        "- `who`: The account to be frozen.",
                        "",
                        "Emits `Frozen`.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "thaw",
                      "fields": [
                        {
                          "name": "id",
                          "type": 4,
                          "typeName": "T::AssetIdParameter"
                        },
                        {
                          "name": "who",
                          "type": 242,
                          "typeName": "AccountIdLookupOf<T>"
                        }
                      ],
                      "index": 12,
                      "docs": [
                        "Allow unprivileged transfers to and from an account again.",
                        "",
                        "Origin must be Signed and the sender should be the Admin of the asset `id`.",
                        "",
                        "- `id`: The identifier of the asset to be frozen.",
                        "- `who`: The account to be unfrozen.",
                        "",
                        "Emits `Thawed`.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "freeze_asset",
                      "fields": [
                        {
                          "name": "id",
                          "type": 4,
                          "typeName": "T::AssetIdParameter"
                        }
                      ],
                      "index": 13,
                      "docs": [
                        "Disallow further unprivileged transfers for the asset class.",
                        "",
                        "Origin must be Signed and the sender should be the Freezer of the asset `id`.",
                        "",
                        "- `id`: The identifier of the asset to be frozen.",
                        "",
                        "Emits `Frozen`.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "thaw_asset",
                      "fields": [
                        {
                          "name": "id",
                          "type": 4,
                          "typeName": "T::AssetIdParameter"
                        }
                      ],
                      "index": 14,
                      "docs": [
                        "Allow unprivileged transfers for the asset again.",
                        "",
                        "Origin must be Signed and the sender should be the Admin of the asset `id`.",
                        "",
                        "- `id`: The identifier of the asset to be thawed.",
                        "",
                        "Emits `Thawed`.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "transfer_ownership",
                      "fields": [
                        {
                          "name": "id",
                          "type": 4,
                          "typeName": "T::AssetIdParameter"
                        },
                        {
                          "name": "owner",
                          "type": 242,
                          "typeName": "AccountIdLookupOf<T>"
                        }
                      ],
                      "index": 15,
                      "docs": [
                        "Change the Owner of an asset.",
                        "",
                        "Origin must be Signed and the sender should be the Owner of the asset `id`.",
                        "",
                        "- `id`: The identifier of the asset.",
                        "- `owner`: The new Owner of this asset.",
                        "",
                        "Emits `OwnerChanged`.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "set_team",
                      "fields": [
                        {
                          "name": "id",
                          "type": 4,
                          "typeName": "T::AssetIdParameter"
                        },
                        {
                          "name": "issuer",
                          "type": 242,
                          "typeName": "AccountIdLookupOf<T>"
                        },
                        {
                          "name": "admin",
                          "type": 242,
                          "typeName": "AccountIdLookupOf<T>"
                        },
                        {
                          "name": "freezer",
                          "type": 242,
                          "typeName": "AccountIdLookupOf<T>"
                        }
                      ],
                      "index": 16,
                      "docs": [
                        "Change the Issuer, Admin and Freezer of an asset.",
                        "",
                        "Origin must be Signed and the sender should be the Owner of the asset `id`.",
                        "",
                        "- `id`: The identifier of the asset to be frozen.",
                        "- `issuer`: The new Issuer of this asset.",
                        "- `admin`: The new Admin of this asset.",
                        "- `freezer`: The new Freezer of this asset.",
                        "",
                        "Emits `TeamChanged`.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "set_metadata",
                      "fields": [
                        {
                          "name": "id",
                          "type": 4,
                          "typeName": "T::AssetIdParameter"
                        },
                        {
                          "name": "name",
                          "type": 14,
                          "typeName": "Vec<u8>"
                        },
                        {
                          "name": "symbol",
                          "type": 14,
                          "typeName": "Vec<u8>"
                        },
                        {
                          "name": "decimals",
                          "type": 2,
                          "typeName": "u8"
                        }
                      ],
                      "index": 17,
                      "docs": [
                        "Set the metadata for an asset.",
                        "",
                        "Origin must be Signed and the sender should be the Owner of the asset `id`.",
                        "",
                        "Funds of sender are reserved according to the formula:",
                        "`MetadataDepositBase + MetadataDepositPerByte * (name.len + symbol.len)` taking into",
                        "account any already reserved funds.",
                        "",
                        "- `id`: The identifier of the asset to update.",
                        "- `name`: The user friendly name of this asset. Limited in length by `StringLimit`.",
                        "- `symbol`: The exchange symbol for this asset. Limited in length by `StringLimit`.",
                        "- `decimals`: The number of decimals this asset uses to represent one unit.",
                        "",
                        "Emits `MetadataSet`.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "clear_metadata",
                      "fields": [
                        {
                          "name": "id",
                          "type": 4,
                          "typeName": "T::AssetIdParameter"
                        }
                      ],
                      "index": 18,
                      "docs": [
                        "Clear the metadata for an asset.",
                        "",
                        "Origin must be Signed and the sender should be the Owner of the asset `id`.",
                        "",
                        "Any deposit is freed for the asset owner.",
                        "",
                        "- `id`: The identifier of the asset to clear.",
                        "",
                        "Emits `MetadataCleared`.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "force_set_metadata",
                      "fields": [
                        {
                          "name": "id",
                          "type": 4,
                          "typeName": "T::AssetIdParameter"
                        },
                        {
                          "name": "name",
                          "type": 14,
                          "typeName": "Vec<u8>"
                        },
                        {
                          "name": "symbol",
                          "type": 14,
                          "typeName": "Vec<u8>"
                        },
                        {
                          "name": "decimals",
                          "type": 2,
                          "typeName": "u8"
                        },
                        {
                          "name": "is_frozen",
                          "type": 8,
                          "typeName": "bool"
                        }
                      ],
                      "index": 19,
                      "docs": [
                        "Force the metadata for an asset to some value.",
                        "",
                        "Origin must be ForceOrigin.",
                        "",
                        "Any deposit is left alone.",
                        "",
                        "- `id`: The identifier of the asset to update.",
                        "- `name`: The user friendly name of this asset. Limited in length by `StringLimit`.",
                        "- `symbol`: The exchange symbol for this asset. Limited in length by `StringLimit`.",
                        "- `decimals`: The number of decimals this asset uses to represent one unit.",
                        "",
                        "Emits `MetadataSet`.",
                        "",
                        "Weight: `O(N + S)` where N and S are the length of the name and symbol respectively."
                      ]
                    },
                    {
                      "name": "force_clear_metadata",
                      "fields": [
                        {
                          "name": "id",
                          "type": 4,
                          "typeName": "T::AssetIdParameter"
                        }
                      ],
                      "index": 20,
                      "docs": [
                        "Clear the metadata for an asset.",
                        "",
                        "Origin must be ForceOrigin.",
                        "",
                        "Any deposit is returned.",
                        "",
                        "- `id`: The identifier of the asset to clear.",
                        "",
                        "Emits `MetadataCleared`.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "force_asset_status",
                      "fields": [
                        {
                          "name": "id",
                          "type": 4,
                          "typeName": "T::AssetIdParameter"
                        },
                        {
                          "name": "owner",
                          "type": 242,
                          "typeName": "AccountIdLookupOf<T>"
                        },
                        {
                          "name": "issuer",
                          "type": 242,
                          "typeName": "AccountIdLookupOf<T>"
                        },
                        {
                          "name": "admin",
                          "type": 242,
                          "typeName": "AccountIdLookupOf<T>"
                        },
                        {
                          "name": "freezer",
                          "type": 242,
                          "typeName": "AccountIdLookupOf<T>"
                        },
                        {
                          "name": "min_balance",
                          "type": 44,
                          "typeName": "T::Balance"
                        },
                        {
                          "name": "is_sufficient",
                          "type": 8,
                          "typeName": "bool"
                        },
                        {
                          "name": "is_frozen",
                          "type": 8,
                          "typeName": "bool"
                        }
                      ],
                      "index": 21,
                      "docs": [
                        "Alter the attributes of a given asset.",
                        "",
                        "Origin must be `ForceOrigin`.",
                        "",
                        "- `id`: The identifier of the asset.",
                        "- `owner`: The new Owner of this asset.",
                        "- `issuer`: The new Issuer of this asset.",
                        "- `admin`: The new Admin of this asset.",
                        "- `freezer`: The new Freezer of this asset.",
                        "- `min_balance`: The minimum balance of this new asset that any single account must",
                        "have. If an account's balance is reduced below this, then it collapses to zero.",
                        "- `is_sufficient`: Whether a non-zero balance of this asset is deposit of sufficient",
                        "value to account for the state bloat associated with its balance storage. If set to",
                        "`true`, then non-zero balances may be stored without a `consumer` reference (and thus",
                        "an ED in the Balances pallet or whatever else is used to control user-account state",
                        "growth).",
                        "- `is_frozen`: Whether this asset class is frozen except for permissioned/admin",
                        "instructions.",
                        "",
                        "Emits `AssetStatusChanged` with the identity of the asset.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "approve_transfer",
                      "fields": [
                        {
                          "name": "id",
                          "type": 4,
                          "typeName": "T::AssetIdParameter"
                        },
                        {
                          "name": "delegate",
                          "type": 242,
                          "typeName": "AccountIdLookupOf<T>"
                        },
                        {
                          "name": "amount",
                          "type": 44,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 22,
                      "docs": [
                        "Approve an amount of asset for transfer by a delegated third-party account.",
                        "",
                        "Origin must be Signed.",
                        "",
                        "Ensures that `ApprovalDeposit` worth of `Currency` is reserved from signing account",
                        "for the purpose of holding the approval. If some non-zero amount of assets is already",
                        "approved from signing account to `delegate`, then it is topped up or unreserved to",
                        "meet the right value.",
                        "",
                        "NOTE: The signing account does not need to own `amount` of assets at the point of",
                        "making this call.",
                        "",
                        "- `id`: The identifier of the asset.",
                        "- `delegate`: The account to delegate permission to transfer asset.",
                        "- `amount`: The amount of asset that may be transferred by `delegate`. If there is",
                        "already an approval in place, then this acts additively.",
                        "",
                        "Emits `ApprovedTransfer` on success.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "cancel_approval",
                      "fields": [
                        {
                          "name": "id",
                          "type": 4,
                          "typeName": "T::AssetIdParameter"
                        },
                        {
                          "name": "delegate",
                          "type": 242,
                          "typeName": "AccountIdLookupOf<T>"
                        }
                      ],
                      "index": 23,
                      "docs": [
                        "Cancel all of some asset approved for delegated transfer by a third-party account.",
                        "",
                        "Origin must be Signed and there must be an approval in place between signer and",
                        "`delegate`.",
                        "",
                        "Unreserves any deposit previously reserved by `approve_transfer` for the approval.",
                        "",
                        "- `id`: The identifier of the asset.",
                        "- `delegate`: The account delegated permission to transfer asset.",
                        "",
                        "Emits `ApprovalCancelled` on success.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "force_cancel_approval",
                      "fields": [
                        {
                          "name": "id",
                          "type": 4,
                          "typeName": "T::AssetIdParameter"
                        },
                        {
                          "name": "owner",
                          "type": 242,
                          "typeName": "AccountIdLookupOf<T>"
                        },
                        {
                          "name": "delegate",
                          "type": 242,
                          "typeName": "AccountIdLookupOf<T>"
                        }
                      ],
                      "index": 24,
                      "docs": [
                        "Cancel all of some asset approved for delegated transfer by a third-party account.",
                        "",
                        "Origin must be either ForceOrigin or Signed origin with the signer being the Admin",
                        "account of the asset `id`.",
                        "",
                        "Unreserves any deposit previously reserved by `approve_transfer` for the approval.",
                        "",
                        "- `id`: The identifier of the asset.",
                        "- `delegate`: The account delegated permission to transfer asset.",
                        "",
                        "Emits `ApprovalCancelled` on success.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "transfer_approved",
                      "fields": [
                        {
                          "name": "id",
                          "type": 4,
                          "typeName": "T::AssetIdParameter"
                        },
                        {
                          "name": "owner",
                          "type": 242,
                          "typeName": "AccountIdLookupOf<T>"
                        },
                        {
                          "name": "destination",
                          "type": 242,
                          "typeName": "AccountIdLookupOf<T>"
                        },
                        {
                          "name": "amount",
                          "type": 44,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 25,
                      "docs": [
                        "Transfer some asset balance from a previously delegated account to some third-party",
                        "account.",
                        "",
                        "Origin must be Signed and there must be an approval in place by the `owner` to the",
                        "signer.",
                        "",
                        "If the entire amount approved for transfer is transferred, then any deposit previously",
                        "reserved by `approve_transfer` is unreserved.",
                        "",
                        "- `id`: The identifier of the asset.",
                        "- `owner`: The account which previously approved for a transfer of at least `amount` and",
                        "from which the asset balance will be withdrawn.",
                        "- `destination`: The account to which the asset balance of `amount` will be transferred.",
                        "- `amount`: The amount of assets to transfer.",
                        "",
                        "Emits `TransferredApproved` on success.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "touch",
                      "fields": [
                        {
                          "name": "id",
                          "type": 4,
                          "typeName": "T::AssetIdParameter"
                        }
                      ],
                      "index": 26,
                      "docs": [
                        "Create an asset account for non-provider assets.",
                        "",
                        "A deposit will be taken from the signer account.",
                        "",
                        "- `origin`: Must be Signed; the signer account must have sufficient funds for a deposit",
                        "  to be taken.",
                        "- `id`: The identifier of the asset for the account to be created.",
                        "",
                        "Emits `Touched` event when successful."
                      ]
                    },
                    {
                      "name": "refund",
                      "fields": [
                        {
                          "name": "id",
                          "type": 4,
                          "typeName": "T::AssetIdParameter"
                        },
                        {
                          "name": "allow_burn",
                          "type": 8,
                          "typeName": "bool"
                        }
                      ],
                      "index": 27,
                      "docs": [
                        "Return the deposit (if any) of an asset account or a consumer reference (if any) of an",
                        "account.",
                        "",
                        "The origin must be Signed.",
                        "",
                        "- `id`: The identifier of the asset for which the caller would like the deposit",
                        "  refunded.",
                        "- `allow_burn`: If `true` then assets may be destroyed in order to complete the refund.",
                        "",
                        "Emits `Refunded` event when successful."
                      ]
                    },
                    {
                      "name": "set_min_balance",
                      "fields": [
                        {
                          "name": "id",
                          "type": 4,
                          "typeName": "T::AssetIdParameter"
                        },
                        {
                          "name": "min_balance",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 28,
                      "docs": [
                        "Sets the minimum balance of an asset.",
                        "",
                        "Only works if there aren't any accounts that are holding the asset or if",
                        "the new value of `min_balance` is less than the old one.",
                        "",
                        "Origin must be Signed and the sender has to be the Owner of the",
                        "asset `id`.",
                        "",
                        "- `id`: The identifier of the asset.",
                        "- `min_balance`: The new value of `min_balance`.",
                        "",
                        "Emits `AssetMinBalanceChanged` event when successful."
                      ]
                    },
                    {
                      "name": "touch_other",
                      "fields": [
                        {
                          "name": "id",
                          "type": 4,
                          "typeName": "T::AssetIdParameter"
                        },
                        {
                          "name": "who",
                          "type": 242,
                          "typeName": "AccountIdLookupOf<T>"
                        }
                      ],
                      "index": 29,
                      "docs": [
                        "Create an asset account for `who`.",
                        "",
                        "A deposit will be taken from the signer account.",
                        "",
                        "- `origin`: Must be Signed by `Freezer` or `Admin` of the asset `id`; the signer account",
                        "  must have sufficient funds for a deposit to be taken.",
                        "- `id`: The identifier of the asset for the account to be created.",
                        "- `who`: The account to be created.",
                        "",
                        "Emits `Touched` event when successful."
                      ]
                    },
                    {
                      "name": "refund_other",
                      "fields": [
                        {
                          "name": "id",
                          "type": 4,
                          "typeName": "T::AssetIdParameter"
                        },
                        {
                          "name": "who",
                          "type": 242,
                          "typeName": "AccountIdLookupOf<T>"
                        }
                      ],
                      "index": 30,
                      "docs": [
                        "Return the deposit (if any) of a target asset account. Useful if you are the depositor.",
                        "",
                        "The origin must be Signed and either the account owner, depositor, or asset `Admin`. In",
                        "order to burn a non-zero balance of the asset, the caller must be the account and should",
                        "use `refund`.",
                        "",
                        "- `id`: The identifier of the asset for the account holding a deposit.",
                        "- `who`: The account to refund.",
                        "",
                        "Emits `Refunded` event when successful."
                      ]
                    },
                    {
                      "name": "block",
                      "fields": [
                        {
                          "name": "id",
                          "type": 4,
                          "typeName": "T::AssetIdParameter"
                        },
                        {
                          "name": "who",
                          "type": 242,
                          "typeName": "AccountIdLookupOf<T>"
                        }
                      ],
                      "index": 31,
                      "docs": [
                        "Disallow further unprivileged transfers of an asset `id` to and from an account `who`.",
                        "",
                        "Origin must be Signed and the sender should be the Freezer of the asset `id`.",
                        "",
                        "- `id`: The identifier of the account's asset.",
                        "- `who`: The account to be unblocked.",
                        "",
                        "Emits `Blocked`.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains a variant per dispatchable extrinsic that this pallet has."
              ]
            }
          },
          {
            "id": 385,
            "type": {
              "path": [
                "pallet_asset_conversion",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "create_pool",
                      "fields": [
                        {
                          "name": "asset1",
                          "type": 37,
                          "typeName": "Box<T::AssetKind>"
                        },
                        {
                          "name": "asset2",
                          "type": 37,
                          "typeName": "Box<T::AssetKind>"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Creates an empty liquidity pool and an associated new `lp_token` asset",
                        "(the id of which is returned in the `Event::PoolCreated` event).",
                        "",
                        "Once a pool is created, someone may [`Pallet::add_liquidity`] to it."
                      ]
                    },
                    {
                      "name": "add_liquidity",
                      "fields": [
                        {
                          "name": "asset1",
                          "type": 37,
                          "typeName": "Box<T::AssetKind>"
                        },
                        {
                          "name": "asset2",
                          "type": 37,
                          "typeName": "Box<T::AssetKind>"
                        },
                        {
                          "name": "amount1_desired",
                          "type": 6,
                          "typeName": "T::Balance"
                        },
                        {
                          "name": "amount2_desired",
                          "type": 6,
                          "typeName": "T::Balance"
                        },
                        {
                          "name": "amount1_min",
                          "type": 6,
                          "typeName": "T::Balance"
                        },
                        {
                          "name": "amount2_min",
                          "type": 6,
                          "typeName": "T::Balance"
                        },
                        {
                          "name": "mint_to",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Provide liquidity into the pool of `asset1` and `asset2`.",
                        "NOTE: an optimal amount of asset1 and asset2 will be calculated and",
                        "might be different than the provided `amount1_desired`/`amount2_desired`",
                        "thus you should provide the min amount you're happy to provide.",
                        "Params `amount1_min`/`amount2_min` represent that.",
                        "`mint_to` will be sent the liquidity tokens that represent this share of the pool.",
                        "",
                        "NOTE: when encountering an incorrect exchange rate and non-withdrawable pool liquidity,",
                        "batch an atomic call with [`Pallet::add_liquidity`] and",
                        "[`Pallet::swap_exact_tokens_for_tokens`] or [`Pallet::swap_tokens_for_exact_tokens`]",
                        "calls to render the liquidity withdrawable and rectify the exchange rate.",
                        "",
                        "Once liquidity is added, someone may successfully call",
                        "[`Pallet::swap_exact_tokens_for_tokens`] successfully."
                      ]
                    },
                    {
                      "name": "remove_liquidity",
                      "fields": [
                        {
                          "name": "asset1",
                          "type": 37,
                          "typeName": "Box<T::AssetKind>"
                        },
                        {
                          "name": "asset2",
                          "type": 37,
                          "typeName": "Box<T::AssetKind>"
                        },
                        {
                          "name": "lp_token_burn",
                          "type": 6,
                          "typeName": "T::Balance"
                        },
                        {
                          "name": "amount1_min_receive",
                          "type": 6,
                          "typeName": "T::Balance"
                        },
                        {
                          "name": "amount2_min_receive",
                          "type": 6,
                          "typeName": "T::Balance"
                        },
                        {
                          "name": "withdraw_to",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Allows you to remove liquidity by providing the `lp_token_burn` tokens that will be",
                        "burned in the process. With the usage of `amount1_min_receive`/`amount2_min_receive`",
                        "it's possible to control the min amount of returned tokens you're happy with."
                      ]
                    },
                    {
                      "name": "swap_exact_tokens_for_tokens",
                      "fields": [
                        {
                          "name": "path",
                          "type": 386,
                          "typeName": "Vec<Box<T::AssetKind>>"
                        },
                        {
                          "name": "amount_in",
                          "type": 6,
                          "typeName": "T::Balance"
                        },
                        {
                          "name": "amount_out_min",
                          "type": 6,
                          "typeName": "T::Balance"
                        },
                        {
                          "name": "send_to",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "keep_alive",
                          "type": 8,
                          "typeName": "bool"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Swap the exact amount of `asset1` into `asset2`.",
                        "`amount_out_min` param allows you to specify the min amount of the `asset2`",
                        "you're happy to receive.",
                        "",
                        "[`AssetConversionApi::quote_price_exact_tokens_for_tokens`] runtime call can be called",
                        "for a quote."
                      ]
                    },
                    {
                      "name": "swap_tokens_for_exact_tokens",
                      "fields": [
                        {
                          "name": "path",
                          "type": 386,
                          "typeName": "Vec<Box<T::AssetKind>>"
                        },
                        {
                          "name": "amount_out",
                          "type": 6,
                          "typeName": "T::Balance"
                        },
                        {
                          "name": "amount_in_max",
                          "type": 6,
                          "typeName": "T::Balance"
                        },
                        {
                          "name": "send_to",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "keep_alive",
                          "type": 8,
                          "typeName": "bool"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Swap any amount of `asset1` to get the exact amount of `asset2`.",
                        "`amount_in_max` param allows to specify the max amount of the `asset1`",
                        "you're happy to provide.",
                        "",
                        "[`AssetConversionApi::quote_price_tokens_for_exact_tokens`] runtime call can be called",
                        "for a quote."
                      ]
                    },
                    {
                      "name": "touch",
                      "fields": [
                        {
                          "name": "asset1",
                          "type": 37,
                          "typeName": "Box<T::AssetKind>"
                        },
                        {
                          "name": "asset2",
                          "type": 37,
                          "typeName": "Box<T::AssetKind>"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Touch an existing pool to fulfill prerequisites before providing liquidity, such as",
                        "ensuring that the pool's accounts are in place. It is typically useful when a pool",
                        "creator removes the pool's accounts and does not provide a liquidity. This action may",
                        "involve holding assets from the caller as a deposit for creating the pool's accounts.",
                        "",
                        "The origin must be Signed.",
                        "",
                        "- `asset1`: The asset ID of an existing pool with a pair (asset1, asset2).",
                        "- `asset2`: The asset ID of an existing pool with a pair (asset1, asset2).",
                        "",
                        "Emits `Touched` event when successful."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Pallet's callable functions."
              ]
            }
          },
          {
            "id": 386,
            "type": {
              "def": {
                "sequence": {
                  "type": 37
                }
              }
            }
          },
          {
            "id": 387,
            "type": {
              "path": [
                "pallet_state_trie_migration",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "control_auto_migration",
                      "fields": [
                        {
                          "name": "maybe_config",
                          "type": 388,
                          "typeName": "Option<MigrationLimits>"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Control the automatic migration.",
                        "",
                        "The dispatch origin of this call must be [`Config::ControlOrigin`]."
                      ]
                    },
                    {
                      "name": "continue_migrate",
                      "fields": [
                        {
                          "name": "limits",
                          "type": 389,
                          "typeName": "MigrationLimits"
                        },
                        {
                          "name": "real_size_upper",
                          "type": 4,
                          "typeName": "u32"
                        },
                        {
                          "name": "witness_task",
                          "type": 390,
                          "typeName": "MigrationTask<T>"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Continue the migration for the given `limits`.",
                        "",
                        "The dispatch origin of this call can be any signed account.",
                        "",
                        "This transaction has NO MONETARY INCENTIVES. calling it will not reward anyone. Albeit,",
                        "Upon successful execution, the transaction fee is returned.",
                        "",
                        "The (potentially over-estimated) of the byte length of all the data read must be",
                        "provided for up-front fee-payment and weighing. In essence, the caller is guaranteeing",
                        "that executing the current `MigrationTask` with the given `limits` will not exceed",
                        "`real_size_upper` bytes of read data.",
                        "",
                        "The `witness_task` is merely a helper to prevent the caller from being slashed or",
                        "generally trigger a migration that they do not intend. This parameter is just a message",
                        "from caller, saying that they believed `witness_task` was the last state of the",
                        "migration, and they only wish for their transaction to do anything, if this assumption",
                        "holds. In case `witness_task` does not match, the transaction fails.",
                        "",
                        "Based on the documentation of [`MigrationTask::migrate_until_exhaustion`], the",
                        "recommended way of doing this is to pass a `limit` that only bounds `count`, as the",
                        "`size` limit can always be overwritten."
                      ]
                    },
                    {
                      "name": "migrate_custom_top",
                      "fields": [
                        {
                          "name": "keys",
                          "type": 169,
                          "typeName": "Vec<Vec<u8>>"
                        },
                        {
                          "name": "witness_size",
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Migrate the list of top keys by iterating each of them one by one.",
                        "",
                        "This does not affect the global migration process tracker ([`MigrationProcess`]), and",
                        "should only be used in case any keys are leftover due to a bug."
                      ]
                    },
                    {
                      "name": "migrate_custom_child",
                      "fields": [
                        {
                          "name": "root",
                          "type": 14,
                          "typeName": "Vec<u8>"
                        },
                        {
                          "name": "child_keys",
                          "type": 169,
                          "typeName": "Vec<Vec<u8>>"
                        },
                        {
                          "name": "total_size",
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Migrate the list of child keys by iterating each of them one by one.",
                        "",
                        "All of the given child keys must be present under one `child_root`.",
                        "",
                        "This does not affect the global migration process tracker ([`MigrationProcess`]), and",
                        "should only be used in case any keys are leftover due to a bug."
                      ]
                    },
                    {
                      "name": "set_signed_max_limits",
                      "fields": [
                        {
                          "name": "limits",
                          "type": 389,
                          "typeName": "MigrationLimits"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Set the maximum limit of the signed migration."
                      ]
                    },
                    {
                      "name": "force_set_progress",
                      "fields": [
                        {
                          "name": "progress_top",
                          "type": 391,
                          "typeName": "ProgressOf<T>"
                        },
                        {
                          "name": "progress_child",
                          "type": 391,
                          "typeName": "ProgressOf<T>"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Forcefully set the progress the running migration.",
                        "",
                        "This is only useful in one case: the next key to migrate is too big to be migrated with",
                        "a signed account, in a parachain context, and we simply want to skip it. A reasonable",
                        "example of this would be `:code:`, which is both very expensive to migrate, and commonly",
                        "used, so probably it is already migrated.",
                        "",
                        "In case you mess things up, you can also, in principle, use this to reset the migration",
                        "process."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains a variant per dispatchable extrinsic that this pallet has."
              ]
            }
          },
          {
            "id": 388,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 389
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 389
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 389,
            "type": {
              "path": [
                "pallet_state_trie_migration",
                "pallet",
                "MigrationLimits"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "size",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "item",
                      "type": 4,
                      "typeName": "u32"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 390,
            "type": {
              "path": [
                "pallet_state_trie_migration",
                "pallet",
                "MigrationTask"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "progress_top",
                      "type": 391,
                      "typeName": "ProgressOf<T>"
                    },
                    {
                      "name": "progress_child",
                      "type": 391,
                      "typeName": "ProgressOf<T>"
                    },
                    {
                      "name": "size",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "top_items",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "child_items",
                      "type": 4,
                      "typeName": "u32"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 391,
            "type": {
              "path": [
                "pallet_state_trie_migration",
                "pallet",
                "Progress"
              ],
              "params": [
                {
                  "name": "MaxKeyLen",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "ToStart",
                      "index": 0
                    },
                    {
                      "name": "LastKey",
                      "fields": [
                        {
                          "type": 392,
                          "typeName": "BoundedVec<u8, MaxKeyLen>"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "Complete",
                      "index": 2
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 392,
            "type": {
              "path": [
                "bounded_collections",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 2
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 14,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 393,
            "type": {
              "path": [
                "pallet_asset_conversion_ops",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "migrate_to_new_account",
                      "fields": [
                        {
                          "name": "asset1",
                          "type": 37,
                          "typeName": "Box<T::AssetKind>"
                        },
                        {
                          "name": "asset2",
                          "type": 37,
                          "typeName": "Box<T::AssetKind>"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Migrates an existing pool to a new account ID derivation method for a given asset pair.",
                        "If the migration is successful, transaction fees are refunded to the caller.",
                        "",
                        "Must be signed."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Pallet's callable functions."
              ]
            }
          },
          {
            "id": 394,
            "type": {
              "path": [
                "asset_hub_westend_runtime",
                "OriginCaller"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "system",
                      "fields": [
                        {
                          "type": 395,
                          "typeName": "frame_system::Origin<Runtime>"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "PolkadotXcm",
                      "fields": [
                        {
                          "type": 396,
                          "typeName": "pallet_xcm::Origin"
                        }
                      ],
                      "index": 31
                    },
                    {
                      "name": "CumulusXcm",
                      "fields": [
                        {
                          "type": 397,
                          "typeName": "cumulus_pallet_xcm::Origin"
                        }
                      ],
                      "index": 32
                    },
                    {
                      "name": "Void",
                      "fields": [
                        {
                          "type": 398,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::\n__private::Void"
                        }
                      ],
                      "index": 3
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 395,
            "type": {
              "path": [
                "frame_support",
                "dispatch",
                "RawOrigin"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Root",
                      "index": 0
                    },
                    {
                      "name": "Signed",
                      "fields": [
                        {
                          "type": 0,
                          "typeName": "AccountId"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "None",
                      "index": 2
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 396,
            "type": {
              "path": [
                "pallet_xcm",
                "pallet",
                "Origin"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Xcm",
                      "fields": [
                        {
                          "type": 54,
                          "typeName": "Location"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Response",
                      "fields": [
                        {
                          "type": 54,
                          "typeName": "Location"
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 397,
            "type": {
              "path": [
                "cumulus_pallet_xcm",
                "pallet",
                "Origin"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Relay",
                      "index": 0
                    },
                    {
                      "name": "SiblingParachain",
                      "fields": [
                        {
                          "type": 119,
                          "typeName": "ParaId"
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 398,
            "type": {
              "path": [
                "sp_core",
                "Void"
              ],
              "def": {
                "variant": {}
              }
            }
          },
          {
            "id": 399,
            "type": {
              "path": [
                "pallet_utility",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "TooManyCalls",
                      "index": 0,
                      "docs": [
                        "Too many calls batched."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "The `Error` enum of this pallet."
              ]
            }
          },
          {
            "id": 400,
            "type": {
              "def": {
                "tuple": [
                  0,
                  1
                ]
              }
            }
          },
          {
            "id": 401,
            "type": {
              "path": [
                "pallet_multisig",
                "Multisig"
              ],
              "params": [
                {
                  "name": "BlockNumber",
                  "type": 4
                },
                {
                  "name": "Balance",
                  "type": 6
                },
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "MaxApprovals",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "when",
                      "type": 125,
                      "typeName": "Timepoint<BlockNumber>"
                    },
                    {
                      "name": "deposit",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "depositor",
                      "type": 0,
                      "typeName": "AccountId"
                    },
                    {
                      "name": "approvals",
                      "type": 402,
                      "typeName": "BoundedVec<AccountId, MaxApprovals>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 402,
            "type": {
              "path": [
                "bounded_collections",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 0
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 48,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 403,
            "type": {
              "path": [
                "pallet_multisig",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "MinimumThreshold",
                      "index": 0,
                      "docs": [
                        "Threshold must be 2 or greater."
                      ]
                    },
                    {
                      "name": "AlreadyApproved",
                      "index": 1,
                      "docs": [
                        "Call is already approved by this signatory."
                      ]
                    },
                    {
                      "name": "NoApprovalsNeeded",
                      "index": 2,
                      "docs": [
                        "Call doesn't need any (more) approvals."
                      ]
                    },
                    {
                      "name": "TooFewSignatories",
                      "index": 3,
                      "docs": [
                        "There are too few signatories in the list."
                      ]
                    },
                    {
                      "name": "TooManySignatories",
                      "index": 4,
                      "docs": [
                        "There are too many signatories in the list."
                      ]
                    },
                    {
                      "name": "SignatoriesOutOfOrder",
                      "index": 5,
                      "docs": [
                        "The signatories were provided out of order; they should be ordered."
                      ]
                    },
                    {
                      "name": "SenderInSignatories",
                      "index": 6,
                      "docs": [
                        "The sender was contained in the other signatories; it shouldn't be."
                      ]
                    },
                    {
                      "name": "NotFound",
                      "index": 7,
                      "docs": [
                        "Multisig operation not found when attempting to cancel."
                      ]
                    },
                    {
                      "name": "NotOwner",
                      "index": 8,
                      "docs": [
                        "Only the account that originally created the multisig is able to cancel it."
                      ]
                    },
                    {
                      "name": "NoTimepoint",
                      "index": 9,
                      "docs": [
                        "No timepoint was given, yet the multisig operation is already underway."
                      ]
                    },
                    {
                      "name": "WrongTimepoint",
                      "index": 10,
                      "docs": [
                        "A different timepoint was given to the multisig operation that is underway."
                      ]
                    },
                    {
                      "name": "UnexpectedTimepoint",
                      "index": 11,
                      "docs": [
                        "A timepoint was given, yet no multisig operation is underway."
                      ]
                    },
                    {
                      "name": "MaxWeightTooLow",
                      "index": 12,
                      "docs": [
                        "The maximum weight information provided was too low."
                      ]
                    },
                    {
                      "name": "AlreadyStored",
                      "index": 13,
                      "docs": [
                        "The data to be stored is already stored."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "The `Error` enum of this pallet."
              ]
            }
          },
          {
            "id": 404,
            "type": {
              "def": {
                "tuple": [
                  405,
                  6
                ]
              }
            }
          },
          {
            "id": 405,
            "type": {
              "path": [
                "bounded_collections",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 406
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 407,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 406,
            "type": {
              "path": [
                "pallet_proxy",
                "ProxyDefinition"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "ProxyType",
                  "type": 127
                },
                {
                  "name": "BlockNumber",
                  "type": 4
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "delegate",
                      "type": 0,
                      "typeName": "AccountId"
                    },
                    {
                      "name": "proxy_type",
                      "type": 127,
                      "typeName": "ProxyType"
                    },
                    {
                      "name": "delay",
                      "type": 4,
                      "typeName": "BlockNumber"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 407,
            "type": {
              "def": {
                "sequence": {
                  "type": 406
                }
              }
            }
          },
          {
            "id": 408,
            "type": {
              "def": {
                "tuple": [
                  409,
                  6
                ]
              }
            }
          },
          {
            "id": 409,
            "type": {
              "path": [
                "bounded_collections",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 410
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 411,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 410,
            "type": {
              "path": [
                "pallet_proxy",
                "Announcement"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "Hash",
                  "type": 13
                },
                {
                  "name": "BlockNumber",
                  "type": 4
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "real",
                      "type": 0,
                      "typeName": "AccountId"
                    },
                    {
                      "name": "call_hash",
                      "type": 13,
                      "typeName": "Hash"
                    },
                    {
                      "name": "height",
                      "type": 4,
                      "typeName": "BlockNumber"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 411,
            "type": {
              "def": {
                "sequence": {
                  "type": 410
                }
              }
            }
          },
          {
            "id": 412,
            "type": {
              "path": [
                "pallet_proxy",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "TooMany",
                      "index": 0,
                      "docs": [
                        "There are too many proxies registered or too many announcements pending."
                      ]
                    },
                    {
                      "name": "NotFound",
                      "index": 1,
                      "docs": [
                        "Proxy registration not found."
                      ]
                    },
                    {
                      "name": "NotProxy",
                      "index": 2,
                      "docs": [
                        "Sender is not a proxy of the account to be proxied."
                      ]
                    },
                    {
                      "name": "Unproxyable",
                      "index": 3,
                      "docs": [
                        "A call which is incompatible with the proxy type's filter was attempted."
                      ]
                    },
                    {
                      "name": "Duplicate",
                      "index": 4,
                      "docs": [
                        "Account is already a proxy."
                      ]
                    },
                    {
                      "name": "NoPermission",
                      "index": 5,
                      "docs": [
                        "Call may not be made by proxy because it may escalate its privileges."
                      ]
                    },
                    {
                      "name": "Unannounced",
                      "index": 6,
                      "docs": [
                        "Announcement, if made at all, was made too recently."
                      ]
                    },
                    {
                      "name": "NoSelfProxy",
                      "index": 7,
                      "docs": [
                        "Cannot add self as proxy."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "The `Error` enum of this pallet."
              ]
            }
          },
          {
            "id": 413,
            "type": {
              "path": [
                "pallet_assets",
                "types",
                "AssetDetails"
              ],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                },
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "DepositBalance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "owner",
                      "type": 0,
                      "typeName": "AccountId"
                    },
                    {
                      "name": "issuer",
                      "type": 0,
                      "typeName": "AccountId"
                    },
                    {
                      "name": "admin",
                      "type": 0,
                      "typeName": "AccountId"
                    },
                    {
                      "name": "freezer",
                      "type": 0,
                      "typeName": "AccountId"
                    },
                    {
                      "name": "supply",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "deposit",
                      "type": 6,
                      "typeName": "DepositBalance"
                    },
                    {
                      "name": "min_balance",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "is_sufficient",
                      "type": 8,
                      "typeName": "bool"
                    },
                    {
                      "name": "accounts",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "sufficients",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "approvals",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "status",
                      "type": 414,
                      "typeName": "AssetStatus"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 414,
            "type": {
              "path": [
                "pallet_assets",
                "types",
                "AssetStatus"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Live",
                      "index": 0
                    },
                    {
                      "name": "Frozen",
                      "index": 1
                    },
                    {
                      "name": "Destroying",
                      "index": 2
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 415,
            "type": {
              "def": {
                "tuple": [
                  4,
                  0
                ]
              }
            }
          },
          {
            "id": 416,
            "type": {
              "path": [
                "pallet_assets",
                "types",
                "AssetAccount"
              ],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                },
                {
                  "name": "DepositBalance",
                  "type": 6
                },
                {
                  "name": "Extra",
                  "type": 123
                },
                {
                  "name": "AccountId",
                  "type": 0
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "balance",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "status",
                      "type": 417,
                      "typeName": "AccountStatus"
                    },
                    {
                      "name": "reason",
                      "type": 418,
                      "typeName": "ExistenceReason<DepositBalance, AccountId>"
                    },
                    {
                      "name": "extra",
                      "type": 123,
                      "typeName": "Extra"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 417,
            "type": {
              "path": [
                "pallet_assets",
                "types",
                "AccountStatus"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Liquid",
                      "index": 0
                    },
                    {
                      "name": "Frozen",
                      "index": 1
                    },
                    {
                      "name": "Blocked",
                      "index": 2
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 418,
            "type": {
              "path": [
                "pallet_assets",
                "types",
                "ExistenceReason"
              ],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                },
                {
                  "name": "AccountId",
                  "type": 0
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Consumer",
                      "index": 0
                    },
                    {
                      "name": "Sufficient",
                      "index": 1
                    },
                    {
                      "name": "DepositHeld",
                      "fields": [
                        {
                          "type": 6,
                          "typeName": "Balance"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "DepositRefunded",
                      "index": 3
                    },
                    {
                      "name": "DepositFrom",
                      "fields": [
                        {
                          "type": 0,
                          "typeName": "AccountId"
                        },
                        {
                          "type": 6,
                          "typeName": "Balance"
                        }
                      ],
                      "index": 4
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 419,
            "type": {
              "def": {
                "tuple": [
                  4,
                  0,
                  0
                ]
              }
            }
          },
          {
            "id": 420,
            "type": {
              "path": [
                "pallet_assets",
                "types",
                "Approval"
              ],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                },
                {
                  "name": "DepositBalance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "amount",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "deposit",
                      "type": 6,
                      "typeName": "DepositBalance"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 421,
            "type": {
              "path": [
                "pallet_assets",
                "types",
                "AssetMetadata"
              ],
              "params": [
                {
                  "name": "DepositBalance",
                  "type": 6
                },
                {
                  "name": "BoundedString",
                  "type": 422
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "deposit",
                      "type": 6,
                      "typeName": "DepositBalance"
                    },
                    {
                      "name": "name",
                      "type": 422,
                      "typeName": "BoundedString"
                    },
                    {
                      "name": "symbol",
                      "type": 422,
                      "typeName": "BoundedString"
                    },
                    {
                      "name": "decimals",
                      "type": 2,
                      "typeName": "u8"
                    },
                    {
                      "name": "is_frozen",
                      "type": 8,
                      "typeName": "bool"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 422,
            "type": {
              "path": [
                "bounded_collections",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 2
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 14,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 423,
            "type": {
              "path": [
                "pallet_assets",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "BalanceLow",
                      "index": 0,
                      "docs": [
                        "Account balance must be greater than or equal to the transfer amount."
                      ]
                    },
                    {
                      "name": "NoAccount",
                      "index": 1,
                      "docs": [
                        "The account to alter does not exist."
                      ]
                    },
                    {
                      "name": "NoPermission",
                      "index": 2,
                      "docs": [
                        "The signing account has no permission to do the operation."
                      ]
                    },
                    {
                      "name": "Unknown",
                      "index": 3,
                      "docs": [
                        "The given asset ID is unknown."
                      ]
                    },
                    {
                      "name": "Frozen",
                      "index": 4,
                      "docs": [
                        "The origin account is frozen."
                      ]
                    },
                    {
                      "name": "InUse",
                      "index": 5,
                      "docs": [
                        "The asset ID is already taken."
                      ]
                    },
                    {
                      "name": "BadWitness",
                      "index": 6,
                      "docs": [
                        "Invalid witness data given."
                      ]
                    },
                    {
                      "name": "MinBalanceZero",
                      "index": 7,
                      "docs": [
                        "Minimum balance should be non-zero."
                      ]
                    },
                    {
                      "name": "UnavailableConsumer",
                      "index": 8,
                      "docs": [
                        "Unable to increment the consumer reference counters on the account. Either no provider",
                        "reference exists to allow a non-zero balance of a non-self-sufficient asset, or one",
                        "fewer then the maximum number of consumers has been reached."
                      ]
                    },
                    {
                      "name": "BadMetadata",
                      "index": 9,
                      "docs": [
                        "Invalid metadata given."
                      ]
                    },
                    {
                      "name": "Unapproved",
                      "index": 10,
                      "docs": [
                        "No approval exists that would allow the transfer."
                      ]
                    },
                    {
                      "name": "WouldDie",
                      "index": 11,
                      "docs": [
                        "The source account would not survive the transfer and it needs to stay alive."
                      ]
                    },
                    {
                      "name": "AlreadyExists",
                      "index": 12,
                      "docs": [
                        "The asset-account already exists."
                      ]
                    },
                    {
                      "name": "NoDeposit",
                      "index": 13,
                      "docs": [
                        "The asset-account doesn't have an associated deposit."
                      ]
                    },
                    {
                      "name": "WouldBurn",
                      "index": 14,
                      "docs": [
                        "The operation would result in funds being burned."
                      ]
                    },
                    {
                      "name": "LiveAsset",
                      "index": 15,
                      "docs": [
                        "The asset is a live asset and is actively being used. Usually emit for operations such",
                        "as `start_destroy` which require the asset to be in a destroying state."
                      ]
                    },
                    {
                      "name": "AssetNotLive",
                      "index": 16,
                      "docs": [
                        "The asset is not live, and likely being destroyed."
                      ]
                    },
                    {
                      "name": "IncorrectStatus",
                      "index": 17,
                      "docs": [
                        "The asset status is not the expected status."
                      ]
                    },
                    {
                      "name": "NotFrozen",
                      "index": 18,
                      "docs": [
                        "The asset should be frozen before the given operation."
                      ]
                    },
                    {
                      "name": "CallbackFailed",
                      "index": 19,
                      "docs": [
                        "Callback action resulted in error"
                      ]
                    },
                    {
                      "name": "BadAssetId",
                      "index": 20,
                      "docs": [
                        "The asset ID must be equal to the [`NextAssetId`]."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "The `Error` enum of this pallet."
              ]
            }
          },
          {
            "id": 424,
            "type": {
              "path": [
                "pallet_uniques",
                "types",
                "CollectionDetails"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "DepositBalance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "owner",
                      "type": 0,
                      "typeName": "AccountId"
                    },
                    {
                      "name": "issuer",
                      "type": 0,
                      "typeName": "AccountId"
                    },
                    {
                      "name": "admin",
                      "type": 0,
                      "typeName": "AccountId"
                    },
                    {
                      "name": "freezer",
                      "type": 0,
                      "typeName": "AccountId"
                    },
                    {
                      "name": "total_deposit",
                      "type": 6,
                      "typeName": "DepositBalance"
                    },
                    {
                      "name": "free_holding",
                      "type": 8,
                      "typeName": "bool"
                    },
                    {
                      "name": "items",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "item_metadatas",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "attributes",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "is_frozen",
                      "type": 8,
                      "typeName": "bool"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 425,
            "type": {
              "def": {
                "tuple": [
                  0,
                  4,
                  4
                ]
              }
            }
          },
          {
            "id": 426,
            "type": {
              "def": {
                "tuple": [
                  0,
                  4
                ]
              }
            }
          },
          {
            "id": 427,
            "type": {
              "path": [
                "pallet_uniques",
                "types",
                "ItemDetails"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "DepositBalance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "owner",
                      "type": 0,
                      "typeName": "AccountId"
                    },
                    {
                      "name": "approved",
                      "type": 136,
                      "typeName": "Option<AccountId>"
                    },
                    {
                      "name": "is_frozen",
                      "type": 8,
                      "typeName": "bool"
                    },
                    {
                      "name": "deposit",
                      "type": 6,
                      "typeName": "DepositBalance"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 428,
            "type": {
              "path": [
                "pallet_uniques",
                "types",
                "CollectionMetadata"
              ],
              "params": [
                {
                  "name": "DepositBalance",
                  "type": 6
                },
                {
                  "name": "StringLimit",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "deposit",
                      "type": 6,
                      "typeName": "DepositBalance"
                    },
                    {
                      "name": "data",
                      "type": 131,
                      "typeName": "BoundedVec<u8, StringLimit>"
                    },
                    {
                      "name": "is_frozen",
                      "type": 8,
                      "typeName": "bool"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 429,
            "type": {
              "path": [
                "pallet_uniques",
                "types",
                "ItemMetadata"
              ],
              "params": [
                {
                  "name": "DepositBalance",
                  "type": 6
                },
                {
                  "name": "StringLimit",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "deposit",
                      "type": 6,
                      "typeName": "DepositBalance"
                    },
                    {
                      "name": "data",
                      "type": 131,
                      "typeName": "BoundedVec<u8, StringLimit>"
                    },
                    {
                      "name": "is_frozen",
                      "type": 8,
                      "typeName": "bool"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 430,
            "type": {
              "def": {
                "tuple": [
                  4,
                  133,
                  134
                ]
              }
            }
          },
          {
            "id": 431,
            "type": {
              "def": {
                "tuple": [
                  135,
                  6
                ]
              }
            }
          },
          {
            "id": 432,
            "type": {
              "def": {
                "tuple": [
                  6,
                  136
                ]
              }
            }
          },
          {
            "id": 433,
            "type": {
              "path": [
                "pallet_uniques",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "NoPermission",
                      "index": 0,
                      "docs": [
                        "The signing account has no permission to do the operation."
                      ]
                    },
                    {
                      "name": "UnknownCollection",
                      "index": 1,
                      "docs": [
                        "The given item ID is unknown."
                      ]
                    },
                    {
                      "name": "AlreadyExists",
                      "index": 2,
                      "docs": [
                        "The item ID has already been used for an item."
                      ]
                    },
                    {
                      "name": "WrongOwner",
                      "index": 3,
                      "docs": [
                        "The owner turned out to be different to what was expected."
                      ]
                    },
                    {
                      "name": "BadWitness",
                      "index": 4,
                      "docs": [
                        "Invalid witness data given."
                      ]
                    },
                    {
                      "name": "InUse",
                      "index": 5,
                      "docs": [
                        "The item ID is already taken."
                      ]
                    },
                    {
                      "name": "Frozen",
                      "index": 6,
                      "docs": [
                        "The item or collection is frozen."
                      ]
                    },
                    {
                      "name": "WrongDelegate",
                      "index": 7,
                      "docs": [
                        "The delegate turned out to be different to what was expected."
                      ]
                    },
                    {
                      "name": "NoDelegate",
                      "index": 8,
                      "docs": [
                        "There is no delegate approved."
                      ]
                    },
                    {
                      "name": "Unapproved",
                      "index": 9,
                      "docs": [
                        "No approval exists that would allow the transfer."
                      ]
                    },
                    {
                      "name": "Unaccepted",
                      "index": 10,
                      "docs": [
                        "The named owner has not signed ownership of the collection is acceptable."
                      ]
                    },
                    {
                      "name": "Locked",
                      "index": 11,
                      "docs": [
                        "The item is locked."
                      ]
                    },
                    {
                      "name": "MaxSupplyReached",
                      "index": 12,
                      "docs": [
                        "All items have been minted."
                      ]
                    },
                    {
                      "name": "MaxSupplyAlreadySet",
                      "index": 13,
                      "docs": [
                        "The max supply has already been set."
                      ]
                    },
                    {
                      "name": "MaxSupplyTooSmall",
                      "index": 14,
                      "docs": [
                        "The provided max supply is less to the amount of items a collection already has."
                      ]
                    },
                    {
                      "name": "UnknownItem",
                      "index": 15,
                      "docs": [
                        "The given item ID is unknown."
                      ]
                    },
                    {
                      "name": "NotForSale",
                      "index": 16,
                      "docs": [
                        "Item is not for sale."
                      ]
                    },
                    {
                      "name": "BidTooLow",
                      "index": 17,
                      "docs": [
                        "The provided bid is too low."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "The `Error` enum of this pallet."
              ]
            }
          },
          {
            "id": 434,
            "type": {
              "path": [
                "pallet_nfts",
                "types",
                "CollectionDetails"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "DepositBalance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "owner",
                      "type": 0,
                      "typeName": "AccountId"
                    },
                    {
                      "name": "owner_deposit",
                      "type": 6,
                      "typeName": "DepositBalance"
                    },
                    {
                      "name": "items",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "item_metadatas",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "item_configs",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "attributes",
                      "type": 4,
                      "typeName": "u32"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 435,
            "type": {
              "path": [
                "pallet_nfts",
                "types",
                "BitFlags"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 436
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 2,
                      "typeName": "CollectionRole"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 436,
            "type": {
              "path": [
                "pallet_nfts",
                "types",
                "CollectionRole"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Issuer",
                      "index": 1
                    },
                    {
                      "name": "Freezer",
                      "index": 2
                    },
                    {
                      "name": "Admin",
                      "index": 4
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 437,
            "type": {
              "path": [
                "pallet_nfts",
                "types",
                "ItemDetails"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "Deposit",
                  "type": 438
                },
                {
                  "name": "Approvals",
                  "type": 439
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "owner",
                      "type": 0,
                      "typeName": "AccountId"
                    },
                    {
                      "name": "approvals",
                      "type": 439,
                      "typeName": "Approvals"
                    },
                    {
                      "name": "deposit",
                      "type": 438,
                      "typeName": "Deposit"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 438,
            "type": {
              "path": [
                "pallet_nfts",
                "types",
                "ItemDeposit"
              ],
              "params": [
                {
                  "name": "DepositBalance",
                  "type": 6
                },
                {
                  "name": "AccountId",
                  "type": 0
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "account",
                      "type": 0,
                      "typeName": "AccountId"
                    },
                    {
                      "name": "amount",
                      "type": 6,
                      "typeName": "DepositBalance"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 439,
            "type": {
              "path": [
                "bounded_collections",
                "bounded_btree_map",
                "BoundedBTreeMap"
              ],
              "params": [
                {
                  "name": "K",
                  "type": 0
                },
                {
                  "name": "V",
                  "type": 133
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 440,
                      "typeName": "BTreeMap<K, V>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 440,
            "type": {
              "path": [
                "BTreeMap"
              ],
              "params": [
                {
                  "name": "K",
                  "type": 0
                },
                {
                  "name": "V",
                  "type": 133
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 441
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 441,
            "type": {
              "def": {
                "sequence": {
                  "type": 442
                }
              }
            }
          },
          {
            "id": 442,
            "type": {
              "def": {
                "tuple": [
                  0,
                  133
                ]
              }
            }
          },
          {
            "id": 443,
            "type": {
              "path": [
                "pallet_nfts",
                "types",
                "CollectionMetadata"
              ],
              "params": [
                {
                  "name": "Deposit",
                  "type": 6
                },
                {
                  "name": "StringLimit",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "deposit",
                      "type": 6,
                      "typeName": "Deposit"
                    },
                    {
                      "name": "data",
                      "type": 138,
                      "typeName": "BoundedVec<u8, StringLimit>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 444,
            "type": {
              "path": [
                "pallet_nfts",
                "types",
                "ItemMetadata"
              ],
              "params": [
                {
                  "name": "Deposit",
                  "type": 445
                },
                {
                  "name": "StringLimit",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "deposit",
                      "type": 445,
                      "typeName": "Deposit"
                    },
                    {
                      "name": "data",
                      "type": 138,
                      "typeName": "BoundedVec<u8, StringLimit>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 445,
            "type": {
              "path": [
                "pallet_nfts",
                "types",
                "ItemMetadataDeposit"
              ],
              "params": [
                {
                  "name": "DepositBalance",
                  "type": 6
                },
                {
                  "name": "AccountId",
                  "type": 0
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "account",
                      "type": 136,
                      "typeName": "Option<AccountId>"
                    },
                    {
                      "name": "amount",
                      "type": 6,
                      "typeName": "DepositBalance"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 446,
            "type": {
              "def": {
                "tuple": [
                  4,
                  133,
                  139,
                  135
                ]
              }
            }
          },
          {
            "id": 447,
            "type": {
              "def": {
                "tuple": [
                  138,
                  448
                ]
              }
            }
          },
          {
            "id": 448,
            "type": {
              "path": [
                "pallet_nfts",
                "types",
                "AttributeDeposit"
              ],
              "params": [
                {
                  "name": "DepositBalance",
                  "type": 6
                },
                {
                  "name": "AccountId",
                  "type": 0
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "account",
                      "type": 136,
                      "typeName": "Option<AccountId>"
                    },
                    {
                      "name": "amount",
                      "type": 6,
                      "typeName": "DepositBalance"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 449,
            "type": {
              "path": [
                "bounded_collections",
                "bounded_btree_set",
                "BoundedBTreeSet"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 0
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 450,
                      "typeName": "BTreeSet<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 450,
            "type": {
              "path": [
                "BTreeSet"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 0
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 48
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 451,
            "type": {
              "path": [
                "pallet_nfts",
                "types",
                "PendingSwap"
              ],
              "params": [
                {
                  "name": "CollectionId",
                  "type": 4
                },
                {
                  "name": "ItemId",
                  "type": 4
                },
                {
                  "name": "ItemPriceWithDirection",
                  "type": 141
                },
                {
                  "name": "Deadline",
                  "type": 4
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "desired_collection",
                      "type": 4,
                      "typeName": "CollectionId"
                    },
                    {
                      "name": "desired_item",
                      "type": 133,
                      "typeName": "Option<ItemId>"
                    },
                    {
                      "name": "price",
                      "type": 140,
                      "typeName": "Option<ItemPriceWithDirection>"
                    },
                    {
                      "name": "deadline",
                      "type": 4,
                      "typeName": "Deadline"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 452,
            "type": {
              "path": [
                "pallet_nfts",
                "types",
                "BitFlags"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 453
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 12,
                      "typeName": "PalletFeature"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 453,
            "type": {
              "path": [
                "pallet_nfts",
                "types",
                "PalletFeature"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Trading",
                      "index": 1
                    },
                    {
                      "name": "Attributes",
                      "index": 2
                    },
                    {
                      "name": "Approvals",
                      "index": 4
                    },
                    {
                      "name": "Swaps",
                      "index": 8
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 454,
            "type": {
              "path": [
                "pallet_nfts",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "NoPermission",
                      "index": 0,
                      "docs": [
                        "The signing account has no permission to do the operation."
                      ]
                    },
                    {
                      "name": "UnknownCollection",
                      "index": 1,
                      "docs": [
                        "The given item ID is unknown."
                      ]
                    },
                    {
                      "name": "AlreadyExists",
                      "index": 2,
                      "docs": [
                        "The item ID has already been used for an item."
                      ]
                    },
                    {
                      "name": "ApprovalExpired",
                      "index": 3,
                      "docs": [
                        "The approval had a deadline that expired, so the approval isn't valid anymore."
                      ]
                    },
                    {
                      "name": "WrongOwner",
                      "index": 4,
                      "docs": [
                        "The owner turned out to be different to what was expected."
                      ]
                    },
                    {
                      "name": "BadWitness",
                      "index": 5,
                      "docs": [
                        "The witness data given does not match the current state of the chain."
                      ]
                    },
                    {
                      "name": "CollectionIdInUse",
                      "index": 6,
                      "docs": [
                        "Collection ID is already taken."
                      ]
                    },
                    {
                      "name": "ItemsNonTransferable",
                      "index": 7,
                      "docs": [
                        "Items within that collection are non-transferable."
                      ]
                    },
                    {
                      "name": "NotDelegate",
                      "index": 8,
                      "docs": [
                        "The provided account is not a delegate."
                      ]
                    },
                    {
                      "name": "WrongDelegate",
                      "index": 9,
                      "docs": [
                        "The delegate turned out to be different to what was expected."
                      ]
                    },
                    {
                      "name": "Unapproved",
                      "index": 10,
                      "docs": [
                        "No approval exists that would allow the transfer."
                      ]
                    },
                    {
                      "name": "Unaccepted",
                      "index": 11,
                      "docs": [
                        "The named owner has not signed ownership acceptance of the collection."
                      ]
                    },
                    {
                      "name": "ItemLocked",
                      "index": 12,
                      "docs": [
                        "The item is locked (non-transferable)."
                      ]
                    },
                    {
                      "name": "LockedItemAttributes",
                      "index": 13,
                      "docs": [
                        "Item's attributes are locked."
                      ]
                    },
                    {
                      "name": "LockedCollectionAttributes",
                      "index": 14,
                      "docs": [
                        "Collection's attributes are locked."
                      ]
                    },
                    {
                      "name": "LockedItemMetadata",
                      "index": 15,
                      "docs": [
                        "Item's metadata is locked."
                      ]
                    },
                    {
                      "name": "LockedCollectionMetadata",
                      "index": 16,
                      "docs": [
                        "Collection's metadata is locked."
                      ]
                    },
                    {
                      "name": "MaxSupplyReached",
                      "index": 17,
                      "docs": [
                        "All items have been minted."
                      ]
                    },
                    {
                      "name": "MaxSupplyLocked",
                      "index": 18,
                      "docs": [
                        "The max supply is locked and can't be changed."
                      ]
                    },
                    {
                      "name": "MaxSupplyTooSmall",
                      "index": 19,
                      "docs": [
                        "The provided max supply is less than the number of items a collection already has."
                      ]
                    },
                    {
                      "name": "UnknownItem",
                      "index": 20,
                      "docs": [
                        "The given item ID is unknown."
                      ]
                    },
                    {
                      "name": "UnknownSwap",
                      "index": 21,
                      "docs": [
                        "Swap doesn't exist."
                      ]
                    },
                    {
                      "name": "MetadataNotFound",
                      "index": 22,
                      "docs": [
                        "The given item has no metadata set."
                      ]
                    },
                    {
                      "name": "AttributeNotFound",
                      "index": 23,
                      "docs": [
                        "The provided attribute can't be found."
                      ]
                    },
                    {
                      "name": "NotForSale",
                      "index": 24,
                      "docs": [
                        "Item is not for sale."
                      ]
                    },
                    {
                      "name": "BidTooLow",
                      "index": 25,
                      "docs": [
                        "The provided bid is too low."
                      ]
                    },
                    {
                      "name": "ReachedApprovalLimit",
                      "index": 26,
                      "docs": [
                        "The item has reached its approval limit."
                      ]
                    },
                    {
                      "name": "DeadlineExpired",
                      "index": 27,
                      "docs": [
                        "The deadline has already expired."
                      ]
                    },
                    {
                      "name": "WrongDuration",
                      "index": 28,
                      "docs": [
                        "The duration provided should be less than or equal to `MaxDeadlineDuration`."
                      ]
                    },
                    {
                      "name": "MethodDisabled",
                      "index": 29,
                      "docs": [
                        "The method is disabled by system settings."
                      ]
                    },
                    {
                      "name": "WrongSetting",
                      "index": 30,
                      "docs": [
                        "The provided setting can't be set."
                      ]
                    },
                    {
                      "name": "InconsistentItemConfig",
                      "index": 31,
                      "docs": [
                        "Item's config already exists and should be equal to the provided one."
                      ]
                    },
                    {
                      "name": "NoConfig",
                      "index": 32,
                      "docs": [
                        "Config for a collection or an item can't be found."
                      ]
                    },
                    {
                      "name": "RolesNotCleared",
                      "index": 33,
                      "docs": [
                        "Some roles were not cleared."
                      ]
                    },
                    {
                      "name": "MintNotStarted",
                      "index": 34,
                      "docs": [
                        "Mint has not started yet."
                      ]
                    },
                    {
                      "name": "MintEnded",
                      "index": 35,
                      "docs": [
                        "Mint has already ended."
                      ]
                    },
                    {
                      "name": "AlreadyClaimed",
                      "index": 36,
                      "docs": [
                        "The provided Item was already used for claiming."
                      ]
                    },
                    {
                      "name": "IncorrectData",
                      "index": 37,
                      "docs": [
                        "The provided data is incorrect."
                      ]
                    },
                    {
                      "name": "WrongOrigin",
                      "index": 38,
                      "docs": [
                        "The extrinsic was sent by the wrong origin."
                      ]
                    },
                    {
                      "name": "WrongSignature",
                      "index": 39,
                      "docs": [
                        "The provided signature is incorrect."
                      ]
                    },
                    {
                      "name": "IncorrectMetadata",
                      "index": 40,
                      "docs": [
                        "The provided metadata might be too long."
                      ]
                    },
                    {
                      "name": "MaxAttributesLimitReached",
                      "index": 41,
                      "docs": [
                        "Can't set more attributes per one call."
                      ]
                    },
                    {
                      "name": "WrongNamespace",
                      "index": 42,
                      "docs": [
                        "The provided namespace isn't supported in this call."
                      ]
                    },
                    {
                      "name": "CollectionNotEmpty",
                      "index": 43,
                      "docs": [
                        "Can't delete non-empty collections."
                      ]
                    },
                    {
                      "name": "WitnessRequired",
                      "index": 44,
                      "docs": [
                        "The witness data should be provided."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "The `Error` enum of this pallet."
              ]
            }
          },
          {
            "id": 455,
            "type": {
              "def": {
                "tuple": [
                  37,
                  0
                ]
              }
            }
          },
          {
            "id": 456,
            "type": {
              "def": {
                "tuple": [
                  37,
                  0,
                  0
                ]
              }
            }
          },
          {
            "id": 457,
            "type": {
              "path": [
                "pallet_assets",
                "types",
                "AssetMetadata"
              ],
              "params": [
                {
                  "name": "DepositBalance",
                  "type": 6
                },
                {
                  "name": "BoundedString",
                  "type": 458
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "deposit",
                      "type": 6,
                      "typeName": "DepositBalance"
                    },
                    {
                      "name": "name",
                      "type": 458,
                      "typeName": "BoundedString"
                    },
                    {
                      "name": "symbol",
                      "type": 458,
                      "typeName": "BoundedString"
                    },
                    {
                      "name": "decimals",
                      "type": 2,
                      "typeName": "u8"
                    },
                    {
                      "name": "is_frozen",
                      "type": 8,
                      "typeName": "bool"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 458,
            "type": {
              "path": [
                "bounded_collections",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 2
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 14,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 459,
            "type": {
              "path": [
                "pallet_assets",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "BalanceLow",
                      "index": 0,
                      "docs": [
                        "Account balance must be greater than or equal to the transfer amount."
                      ]
                    },
                    {
                      "name": "NoAccount",
                      "index": 1,
                      "docs": [
                        "The account to alter does not exist."
                      ]
                    },
                    {
                      "name": "NoPermission",
                      "index": 2,
                      "docs": [
                        "The signing account has no permission to do the operation."
                      ]
                    },
                    {
                      "name": "Unknown",
                      "index": 3,
                      "docs": [
                        "The given asset ID is unknown."
                      ]
                    },
                    {
                      "name": "Frozen",
                      "index": 4,
                      "docs": [
                        "The origin account is frozen."
                      ]
                    },
                    {
                      "name": "InUse",
                      "index": 5,
                      "docs": [
                        "The asset ID is already taken."
                      ]
                    },
                    {
                      "name": "BadWitness",
                      "index": 6,
                      "docs": [
                        "Invalid witness data given."
                      ]
                    },
                    {
                      "name": "MinBalanceZero",
                      "index": 7,
                      "docs": [
                        "Minimum balance should be non-zero."
                      ]
                    },
                    {
                      "name": "UnavailableConsumer",
                      "index": 8,
                      "docs": [
                        "Unable to increment the consumer reference counters on the account. Either no provider",
                        "reference exists to allow a non-zero balance of a non-self-sufficient asset, or one",
                        "fewer then the maximum number of consumers has been reached."
                      ]
                    },
                    {
                      "name": "BadMetadata",
                      "index": 9,
                      "docs": [
                        "Invalid metadata given."
                      ]
                    },
                    {
                      "name": "Unapproved",
                      "index": 10,
                      "docs": [
                        "No approval exists that would allow the transfer."
                      ]
                    },
                    {
                      "name": "WouldDie",
                      "index": 11,
                      "docs": [
                        "The source account would not survive the transfer and it needs to stay alive."
                      ]
                    },
                    {
                      "name": "AlreadyExists",
                      "index": 12,
                      "docs": [
                        "The asset-account already exists."
                      ]
                    },
                    {
                      "name": "NoDeposit",
                      "index": 13,
                      "docs": [
                        "The asset-account doesn't have an associated deposit."
                      ]
                    },
                    {
                      "name": "WouldBurn",
                      "index": 14,
                      "docs": [
                        "The operation would result in funds being burned."
                      ]
                    },
                    {
                      "name": "LiveAsset",
                      "index": 15,
                      "docs": [
                        "The asset is a live asset and is actively being used. Usually emit for operations such",
                        "as `start_destroy` which require the asset to be in a destroying state."
                      ]
                    },
                    {
                      "name": "AssetNotLive",
                      "index": 16,
                      "docs": [
                        "The asset is not live, and likely being destroyed."
                      ]
                    },
                    {
                      "name": "IncorrectStatus",
                      "index": 17,
                      "docs": [
                        "The asset status is not the expected status."
                      ]
                    },
                    {
                      "name": "NotFrozen",
                      "index": 18,
                      "docs": [
                        "The asset should be frozen before the given operation."
                      ]
                    },
                    {
                      "name": "CallbackFailed",
                      "index": 19,
                      "docs": [
                        "Callback action resulted in error"
                      ]
                    },
                    {
                      "name": "BadAssetId",
                      "index": 20,
                      "docs": [
                        "The asset ID must be equal to the [`NextAssetId`]."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "The `Error` enum of this pallet."
              ]
            }
          },
          {
            "id": 460,
            "type": {
              "path": [
                "pallet_nft_fractionalization",
                "types",
                "Details"
              ],
              "params": [
                {
                  "name": "AssetId",
                  "type": 4
                },
                {
                  "name": "Fractions",
                  "type": 6
                },
                {
                  "name": "Deposit",
                  "type": 6
                },
                {
                  "name": "AccountId",
                  "type": 0
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "asset",
                      "type": 4,
                      "typeName": "AssetId"
                    },
                    {
                      "name": "fractions",
                      "type": 6,
                      "typeName": "Fractions"
                    },
                    {
                      "name": "deposit",
                      "type": 6,
                      "typeName": "Deposit"
                    },
                    {
                      "name": "asset_creator",
                      "type": 0,
                      "typeName": "AccountId"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 461,
            "type": {
              "path": [
                "frame_support",
                "PalletId"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 76,
                      "typeName": "[u8; 8]"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 462,
            "type": {
              "path": [
                "pallet_nft_fractionalization",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "IncorrectAssetId",
                      "index": 0,
                      "docs": [
                        "Asset ID does not correspond to locked NFT."
                      ]
                    },
                    {
                      "name": "NoPermission",
                      "index": 1,
                      "docs": [
                        "The signing account has no permission to do the operation."
                      ]
                    },
                    {
                      "name": "NftNotFound",
                      "index": 2,
                      "docs": [
                        "NFT doesn't exist."
                      ]
                    },
                    {
                      "name": "NftNotFractionalized",
                      "index": 3,
                      "docs": [
                        "NFT has not yet been fractionalised."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "The `Error` enum of this pallet."
              ]
            }
          },
          {
            "id": 463,
            "type": {
              "path": [
                "pallet_assets",
                "types",
                "AssetMetadata"
              ],
              "params": [
                {
                  "name": "DepositBalance",
                  "type": 6
                },
                {
                  "name": "BoundedString",
                  "type": 464
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "deposit",
                      "type": 6,
                      "typeName": "DepositBalance"
                    },
                    {
                      "name": "name",
                      "type": 464,
                      "typeName": "BoundedString"
                    },
                    {
                      "name": "symbol",
                      "type": 464,
                      "typeName": "BoundedString"
                    },
                    {
                      "name": "decimals",
                      "type": 2,
                      "typeName": "u8"
                    },
                    {
                      "name": "is_frozen",
                      "type": 8,
                      "typeName": "bool"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 464,
            "type": {
              "path": [
                "bounded_collections",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 2
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 14,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 465,
            "type": {
              "path": [
                "pallet_assets",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "BalanceLow",
                      "index": 0,
                      "docs": [
                        "Account balance must be greater than or equal to the transfer amount."
                      ]
                    },
                    {
                      "name": "NoAccount",
                      "index": 1,
                      "docs": [
                        "The account to alter does not exist."
                      ]
                    },
                    {
                      "name": "NoPermission",
                      "index": 2,
                      "docs": [
                        "The signing account has no permission to do the operation."
                      ]
                    },
                    {
                      "name": "Unknown",
                      "index": 3,
                      "docs": [
                        "The given asset ID is unknown."
                      ]
                    },
                    {
                      "name": "Frozen",
                      "index": 4,
                      "docs": [
                        "The origin account is frozen."
                      ]
                    },
                    {
                      "name": "InUse",
                      "index": 5,
                      "docs": [
                        "The asset ID is already taken."
                      ]
                    },
                    {
                      "name": "BadWitness",
                      "index": 6,
                      "docs": [
                        "Invalid witness data given."
                      ]
                    },
                    {
                      "name": "MinBalanceZero",
                      "index": 7,
                      "docs": [
                        "Minimum balance should be non-zero."
                      ]
                    },
                    {
                      "name": "UnavailableConsumer",
                      "index": 8,
                      "docs": [
                        "Unable to increment the consumer reference counters on the account. Either no provider",
                        "reference exists to allow a non-zero balance of a non-self-sufficient asset, or one",
                        "fewer then the maximum number of consumers has been reached."
                      ]
                    },
                    {
                      "name": "BadMetadata",
                      "index": 9,
                      "docs": [
                        "Invalid metadata given."
                      ]
                    },
                    {
                      "name": "Unapproved",
                      "index": 10,
                      "docs": [
                        "No approval exists that would allow the transfer."
                      ]
                    },
                    {
                      "name": "WouldDie",
                      "index": 11,
                      "docs": [
                        "The source account would not survive the transfer and it needs to stay alive."
                      ]
                    },
                    {
                      "name": "AlreadyExists",
                      "index": 12,
                      "docs": [
                        "The asset-account already exists."
                      ]
                    },
                    {
                      "name": "NoDeposit",
                      "index": 13,
                      "docs": [
                        "The asset-account doesn't have an associated deposit."
                      ]
                    },
                    {
                      "name": "WouldBurn",
                      "index": 14,
                      "docs": [
                        "The operation would result in funds being burned."
                      ]
                    },
                    {
                      "name": "LiveAsset",
                      "index": 15,
                      "docs": [
                        "The asset is a live asset and is actively being used. Usually emit for operations such",
                        "as `start_destroy` which require the asset to be in a destroying state."
                      ]
                    },
                    {
                      "name": "AssetNotLive",
                      "index": 16,
                      "docs": [
                        "The asset is not live, and likely being destroyed."
                      ]
                    },
                    {
                      "name": "IncorrectStatus",
                      "index": 17,
                      "docs": [
                        "The asset status is not the expected status."
                      ]
                    },
                    {
                      "name": "NotFrozen",
                      "index": 18,
                      "docs": [
                        "The asset should be frozen before the given operation."
                      ]
                    },
                    {
                      "name": "CallbackFailed",
                      "index": 19,
                      "docs": [
                        "Callback action resulted in error"
                      ]
                    },
                    {
                      "name": "BadAssetId",
                      "index": 20,
                      "docs": [
                        "The asset ID must be equal to the [`NextAssetId`]."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "The `Error` enum of this pallet."
              ]
            }
          },
          {
            "id": 466,
            "type": {
              "path": [
                "pallet_asset_conversion",
                "types",
                "PoolInfo"
              ],
              "params": [
                {
                  "name": "PoolAssetId",
                  "type": 4
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "lp_token",
                      "type": 4,
                      "typeName": "PoolAssetId"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 467,
            "type": {
              "path": [
                "pallet_asset_conversion",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "InvalidAssetPair",
                      "index": 0,
                      "docs": [
                        "Provided asset pair is not supported for pool."
                      ]
                    },
                    {
                      "name": "PoolExists",
                      "index": 1,
                      "docs": [
                        "Pool already exists."
                      ]
                    },
                    {
                      "name": "WrongDesiredAmount",
                      "index": 2,
                      "docs": [
                        "Desired amount can't be zero."
                      ]
                    },
                    {
                      "name": "AmountOneLessThanMinimal",
                      "index": 3,
                      "docs": [
                        "Provided amount should be greater than or equal to the existential deposit/asset's",
                        "minimal amount."
                      ]
                    },
                    {
                      "name": "AmountTwoLessThanMinimal",
                      "index": 4,
                      "docs": [
                        "Provided amount should be greater than or equal to the existential deposit/asset's",
                        "minimal amount."
                      ]
                    },
                    {
                      "name": "ReserveLeftLessThanMinimal",
                      "index": 5,
                      "docs": [
                        "Reserve needs to always be greater than or equal to the existential deposit/asset's",
                        "minimal amount."
                      ]
                    },
                    {
                      "name": "AmountOutTooHigh",
                      "index": 6,
                      "docs": [
                        "Desired amount can't be equal to the pool reserve."
                      ]
                    },
                    {
                      "name": "PoolNotFound",
                      "index": 7,
                      "docs": [
                        "The pool doesn't exist."
                      ]
                    },
                    {
                      "name": "Overflow",
                      "index": 8,
                      "docs": [
                        "An overflow happened."
                      ]
                    },
                    {
                      "name": "AssetOneDepositDidNotMeetMinimum",
                      "index": 9,
                      "docs": [
                        "The minimal amount requirement for the first token in the pair wasn't met."
                      ]
                    },
                    {
                      "name": "AssetTwoDepositDidNotMeetMinimum",
                      "index": 10,
                      "docs": [
                        "The minimal amount requirement for the second token in the pair wasn't met."
                      ]
                    },
                    {
                      "name": "AssetOneWithdrawalDidNotMeetMinimum",
                      "index": 11,
                      "docs": [
                        "The minimal amount requirement for the first token in the pair wasn't met."
                      ]
                    },
                    {
                      "name": "AssetTwoWithdrawalDidNotMeetMinimum",
                      "index": 12,
                      "docs": [
                        "The minimal amount requirement for the second token in the pair wasn't met."
                      ]
                    },
                    {
                      "name": "OptimalAmountLessThanDesired",
                      "index": 13,
                      "docs": [
                        "Optimal calculated amount is less than desired."
                      ]
                    },
                    {
                      "name": "InsufficientLiquidityMinted",
                      "index": 14,
                      "docs": [
                        "Insufficient liquidity minted."
                      ]
                    },
                    {
                      "name": "ZeroLiquidity",
                      "index": 15,
                      "docs": [
                        "Requested liquidity can't be zero."
                      ]
                    },
                    {
                      "name": "ZeroAmount",
                      "index": 16,
                      "docs": [
                        "Amount can't be zero."
                      ]
                    },
                    {
                      "name": "ProvidedMinimumNotSufficientForSwap",
                      "index": 17,
                      "docs": [
                        "Calculated amount out is less than provided minimum amount."
                      ]
                    },
                    {
                      "name": "ProvidedMaximumNotSufficientForSwap",
                      "index": 18,
                      "docs": [
                        "Provided maximum amount is not sufficient for swap."
                      ]
                    },
                    {
                      "name": "InvalidPath",
                      "index": 19,
                      "docs": [
                        "The provided path must consists of 2 assets at least."
                      ]
                    },
                    {
                      "name": "NonUniquePath",
                      "index": 20,
                      "docs": [
                        "The provided path must consists of unique assets."
                      ]
                    },
                    {
                      "name": "IncorrectPoolAssetId",
                      "index": 21,
                      "docs": [
                        "It was not possible to get or increment the Id of the pool."
                      ]
                    },
                    {
                      "name": "BelowMinimum",
                      "index": 22,
                      "docs": [
                        "The destination account cannot exist with the swapped funds."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "The `Error` enum of this pallet."
              ]
            }
          },
          {
            "id": 468,
            "type": {
              "path": [
                "bounded_collections",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 469
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 471,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 469,
            "type": {
              "path": [
                "frame_support",
                "traits",
                "tokens",
                "misc",
                "IdAmount"
              ],
              "params": [
                {
                  "name": "Id",
                  "type": 470
                },
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "id",
                      "type": 470,
                      "typeName": "Id"
                    },
                    {
                      "name": "amount",
                      "type": 6,
                      "typeName": "Balance"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 470,
            "type": {
              "path": [
                "asset_hub_westend_runtime",
                "RuntimeFreezeReason"
              ],
              "def": {
                "variant": {}
              }
            }
          },
          {
            "id": 471,
            "type": {
              "def": {
                "sequence": {
                  "type": 469
                }
              }
            }
          },
          {
            "id": 472,
            "type": {
              "path": [
                "pallet_assets_freezer",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "TooManyFreezes",
                      "index": 0,
                      "docs": [
                        "Number of freezes on an account would exceed `MaxFreezes`."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "The `Error` enum of this pallet."
              ]
            }
          },
          {
            "id": 473,
            "type": {
              "path": [
                "pallet_assets_freezer",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "TooManyFreezes",
                      "index": 0,
                      "docs": [
                        "Number of freezes on an account would exceed `MaxFreezes`."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "The `Error` enum of this pallet."
              ]
            }
          },
          {
            "id": 474,
            "type": {
              "path": [
                "pallet_assets_freezer",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "TooManyFreezes",
                      "index": 0,
                      "docs": [
                        "Number of freezes on an account would exceed `MaxFreezes`."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "The `Error` enum of this pallet."
              ]
            }
          },
          {
            "id": 475,
            "type": {
              "path": [
                "pallet_asset_conversion_ops",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "InvalidAssetPair",
                      "index": 0,
                      "docs": [
                        "Provided asset pair is not supported for pool."
                      ]
                    },
                    {
                      "name": "PoolNotFound",
                      "index": 1,
                      "docs": [
                        "The pool doesn't exist."
                      ]
                    },
                    {
                      "name": "ZeroBalance",
                      "index": 2,
                      "docs": [
                        "Pool's balance cannot be zero."
                      ]
                    },
                    {
                      "name": "PartialTransfer",
                      "index": 3,
                      "docs": [
                        "Indicates a partial transfer of balance to the new account during a migration."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "The `Error` enum of this pallet."
              ]
            }
          },
          {
            "id": 476,
            "type": {
              "def": {
                "tuple": [
                  477,
                  478,
                  479,
                  480,
                  481,
                  483,
                  484,
                  485,
                  486,
                  487
                ]
              }
            }
          },
          {
            "id": 477,
            "type": {
              "path": [
                "frame_system",
                "extensions",
                "check_non_zero_sender",
                "CheckNonZeroSender"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {}
              }
            }
          },
          {
            "id": 478,
            "type": {
              "path": [
                "frame_system",
                "extensions",
                "check_spec_version",
                "CheckSpecVersion"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {}
              }
            }
          },
          {
            "id": 479,
            "type": {
              "path": [
                "frame_system",
                "extensions",
                "check_tx_version",
                "CheckTxVersion"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {}
              }
            }
          },
          {
            "id": 480,
            "type": {
              "path": [
                "frame_system",
                "extensions",
                "check_genesis",
                "CheckGenesis"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {}
              }
            }
          },
          {
            "id": 481,
            "type": {
              "path": [
                "frame_system",
                "extensions",
                "check_mortality",
                "CheckMortality"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 482,
                      "typeName": "Era"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 482,
            "type": {
              "path": [
                "sp_runtime",
                "generic",
                "era",
                "Era"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Immortal",
                      "index": 0
                    },
                    {
                      "name": "Mortal1",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "Mortal2",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "Mortal3",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "Mortal4",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 4
                    },
                    {
                      "name": "Mortal5",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 5
                    },
                    {
                      "name": "Mortal6",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 6
                    },
                    {
                      "name": "Mortal7",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 7
                    },
                    {
                      "name": "Mortal8",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 8
                    },
                    {
                      "name": "Mortal9",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 9
                    },
                    {
                      "name": "Mortal10",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 10
                    },
                    {
                      "name": "Mortal11",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 11
                    },
                    {
                      "name": "Mortal12",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 12
                    },
                    {
                      "name": "Mortal13",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 13
                    },
                    {
                      "name": "Mortal14",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 14
                    },
                    {
                      "name": "Mortal15",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 15
                    },
                    {
                      "name": "Mortal16",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 16
                    },
                    {
                      "name": "Mortal17",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 17
                    },
                    {
                      "name": "Mortal18",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 18
                    },
                    {
                      "name": "Mortal19",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 19
                    },
                    {
                      "name": "Mortal20",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 20
                    },
                    {
                      "name": "Mortal21",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 21
                    },
                    {
                      "name": "Mortal22",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 22
                    },
                    {
                      "name": "Mortal23",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 23
                    },
                    {
                      "name": "Mortal24",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 24
                    },
                    {
                      "name": "Mortal25",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 25
                    },
                    {
                      "name": "Mortal26",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 26
                    },
                    {
                      "name": "Mortal27",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 27
                    },
                    {
                      "name": "Mortal28",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 28
                    },
                    {
                      "name": "Mortal29",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 29
                    },
                    {
                      "name": "Mortal30",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 30
                    },
                    {
                      "name": "Mortal31",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 31
                    },
                    {
                      "name": "Mortal32",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 32
                    },
                    {
                      "name": "Mortal33",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 33
                    },
                    {
                      "name": "Mortal34",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 34
                    },
                    {
                      "name": "Mortal35",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 35
                    },
                    {
                      "name": "Mortal36",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 36
                    },
                    {
                      "name": "Mortal37",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 37
                    },
                    {
                      "name": "Mortal38",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 38
                    },
                    {
                      "name": "Mortal39",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 39
                    },
                    {
                      "name": "Mortal40",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 40
                    },
                    {
                      "name": "Mortal41",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 41
                    },
                    {
                      "name": "Mortal42",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 42
                    },
                    {
                      "name": "Mortal43",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 43
                    },
                    {
                      "name": "Mortal44",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 44
                    },
                    {
                      "name": "Mortal45",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 45
                    },
                    {
                      "name": "Mortal46",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 46
                    },
                    {
                      "name": "Mortal47",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 47
                    },
                    {
                      "name": "Mortal48",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 48
                    },
                    {
                      "name": "Mortal49",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 49
                    },
                    {
                      "name": "Mortal50",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 50
                    },
                    {
                      "name": "Mortal51",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 51
                    },
                    {
                      "name": "Mortal52",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 52
                    },
                    {
                      "name": "Mortal53",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 53
                    },
                    {
                      "name": "Mortal54",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 54
                    },
                    {
                      "name": "Mortal55",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 55
                    },
                    {
                      "name": "Mortal56",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 56
                    },
                    {
                      "name": "Mortal57",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 57
                    },
                    {
                      "name": "Mortal58",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 58
                    },
                    {
                      "name": "Mortal59",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 59
                    },
                    {
                      "name": "Mortal60",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 60
                    },
                    {
                      "name": "Mortal61",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 61
                    },
                    {
                      "name": "Mortal62",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 62
                    },
                    {
                      "name": "Mortal63",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 63
                    },
                    {
                      "name": "Mortal64",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 64
                    },
                    {
                      "name": "Mortal65",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 65
                    },
                    {
                      "name": "Mortal66",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 66
                    },
                    {
                      "name": "Mortal67",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 67
                    },
                    {
                      "name": "Mortal68",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 68
                    },
                    {
                      "name": "Mortal69",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 69
                    },
                    {
                      "name": "Mortal70",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 70
                    },
                    {
                      "name": "Mortal71",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 71
                    },
                    {
                      "name": "Mortal72",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 72
                    },
                    {
                      "name": "Mortal73",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 73
                    },
                    {
                      "name": "Mortal74",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 74
                    },
                    {
                      "name": "Mortal75",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 75
                    },
                    {
                      "name": "Mortal76",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 76
                    },
                    {
                      "name": "Mortal77",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 77
                    },
                    {
                      "name": "Mortal78",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 78
                    },
                    {
                      "name": "Mortal79",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 79
                    },
                    {
                      "name": "Mortal80",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 80
                    },
                    {
                      "name": "Mortal81",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 81
                    },
                    {
                      "name": "Mortal82",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 82
                    },
                    {
                      "name": "Mortal83",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 83
                    },
                    {
                      "name": "Mortal84",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 84
                    },
                    {
                      "name": "Mortal85",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 85
                    },
                    {
                      "name": "Mortal86",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 86
                    },
                    {
                      "name": "Mortal87",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 87
                    },
                    {
                      "name": "Mortal88",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 88
                    },
                    {
                      "name": "Mortal89",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 89
                    },
                    {
                      "name": "Mortal90",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 90
                    },
                    {
                      "name": "Mortal91",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 91
                    },
                    {
                      "name": "Mortal92",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 92
                    },
                    {
                      "name": "Mortal93",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 93
                    },
                    {
                      "name": "Mortal94",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 94
                    },
                    {
                      "name": "Mortal95",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 95
                    },
                    {
                      "name": "Mortal96",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 96
                    },
                    {
                      "name": "Mortal97",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 97
                    },
                    {
                      "name": "Mortal98",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 98
                    },
                    {
                      "name": "Mortal99",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 99
                    },
                    {
                      "name": "Mortal100",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 100
                    },
                    {
                      "name": "Mortal101",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 101
                    },
                    {
                      "name": "Mortal102",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 102
                    },
                    {
                      "name": "Mortal103",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 103
                    },
                    {
                      "name": "Mortal104",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 104
                    },
                    {
                      "name": "Mortal105",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 105
                    },
                    {
                      "name": "Mortal106",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 106
                    },
                    {
                      "name": "Mortal107",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 107
                    },
                    {
                      "name": "Mortal108",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 108
                    },
                    {
                      "name": "Mortal109",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 109
                    },
                    {
                      "name": "Mortal110",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 110
                    },
                    {
                      "name": "Mortal111",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 111
                    },
                    {
                      "name": "Mortal112",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 112
                    },
                    {
                      "name": "Mortal113",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 113
                    },
                    {
                      "name": "Mortal114",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 114
                    },
                    {
                      "name": "Mortal115",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 115
                    },
                    {
                      "name": "Mortal116",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 116
                    },
                    {
                      "name": "Mortal117",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 117
                    },
                    {
                      "name": "Mortal118",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 118
                    },
                    {
                      "name": "Mortal119",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 119
                    },
                    {
                      "name": "Mortal120",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 120
                    },
                    {
                      "name": "Mortal121",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 121
                    },
                    {
                      "name": "Mortal122",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 122
                    },
                    {
                      "name": "Mortal123",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 123
                    },
                    {
                      "name": "Mortal124",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 124
                    },
                    {
                      "name": "Mortal125",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 125
                    },
                    {
                      "name": "Mortal126",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 126
                    },
                    {
                      "name": "Mortal127",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 127
                    },
                    {
                      "name": "Mortal128",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 128
                    },
                    {
                      "name": "Mortal129",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 129
                    },
                    {
                      "name": "Mortal130",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 130
                    },
                    {
                      "name": "Mortal131",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 131
                    },
                    {
                      "name": "Mortal132",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 132
                    },
                    {
                      "name": "Mortal133",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 133
                    },
                    {
                      "name": "Mortal134",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 134
                    },
                    {
                      "name": "Mortal135",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 135
                    },
                    {
                      "name": "Mortal136",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 136
                    },
                    {
                      "name": "Mortal137",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 137
                    },
                    {
                      "name": "Mortal138",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 138
                    },
                    {
                      "name": "Mortal139",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 139
                    },
                    {
                      "name": "Mortal140",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 140
                    },
                    {
                      "name": "Mortal141",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 141
                    },
                    {
                      "name": "Mortal142",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 142
                    },
                    {
                      "name": "Mortal143",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 143
                    },
                    {
                      "name": "Mortal144",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 144
                    },
                    {
                      "name": "Mortal145",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 145
                    },
                    {
                      "name": "Mortal146",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 146
                    },
                    {
                      "name": "Mortal147",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 147
                    },
                    {
                      "name": "Mortal148",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 148
                    },
                    {
                      "name": "Mortal149",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 149
                    },
                    {
                      "name": "Mortal150",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 150
                    },
                    {
                      "name": "Mortal151",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 151
                    },
                    {
                      "name": "Mortal152",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 152
                    },
                    {
                      "name": "Mortal153",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 153
                    },
                    {
                      "name": "Mortal154",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 154
                    },
                    {
                      "name": "Mortal155",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 155
                    },
                    {
                      "name": "Mortal156",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 156
                    },
                    {
                      "name": "Mortal157",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 157
                    },
                    {
                      "name": "Mortal158",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 158
                    },
                    {
                      "name": "Mortal159",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 159
                    },
                    {
                      "name": "Mortal160",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 160
                    },
                    {
                      "name": "Mortal161",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 161
                    },
                    {
                      "name": "Mortal162",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 162
                    },
                    {
                      "name": "Mortal163",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 163
                    },
                    {
                      "name": "Mortal164",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 164
                    },
                    {
                      "name": "Mortal165",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 165
                    },
                    {
                      "name": "Mortal166",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 166
                    },
                    {
                      "name": "Mortal167",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 167
                    },
                    {
                      "name": "Mortal168",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 168
                    },
                    {
                      "name": "Mortal169",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 169
                    },
                    {
                      "name": "Mortal170",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 170
                    },
                    {
                      "name": "Mortal171",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 171
                    },
                    {
                      "name": "Mortal172",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 172
                    },
                    {
                      "name": "Mortal173",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 173
                    },
                    {
                      "name": "Mortal174",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 174
                    },
                    {
                      "name": "Mortal175",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 175
                    },
                    {
                      "name": "Mortal176",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 176
                    },
                    {
                      "name": "Mortal177",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 177
                    },
                    {
                      "name": "Mortal178",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 178
                    },
                    {
                      "name": "Mortal179",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 179
                    },
                    {
                      "name": "Mortal180",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 180
                    },
                    {
                      "name": "Mortal181",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 181
                    },
                    {
                      "name": "Mortal182",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 182
                    },
                    {
                      "name": "Mortal183",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 183
                    },
                    {
                      "name": "Mortal184",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 184
                    },
                    {
                      "name": "Mortal185",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 185
                    },
                    {
                      "name": "Mortal186",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 186
                    },
                    {
                      "name": "Mortal187",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 187
                    },
                    {
                      "name": "Mortal188",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 188
                    },
                    {
                      "name": "Mortal189",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 189
                    },
                    {
                      "name": "Mortal190",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 190
                    },
                    {
                      "name": "Mortal191",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 191
                    },
                    {
                      "name": "Mortal192",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 192
                    },
                    {
                      "name": "Mortal193",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 193
                    },
                    {
                      "name": "Mortal194",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 194
                    },
                    {
                      "name": "Mortal195",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 195
                    },
                    {
                      "name": "Mortal196",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 196
                    },
                    {
                      "name": "Mortal197",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 197
                    },
                    {
                      "name": "Mortal198",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 198
                    },
                    {
                      "name": "Mortal199",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 199
                    },
                    {
                      "name": "Mortal200",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 200
                    },
                    {
                      "name": "Mortal201",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 201
                    },
                    {
                      "name": "Mortal202",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 202
                    },
                    {
                      "name": "Mortal203",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 203
                    },
                    {
                      "name": "Mortal204",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 204
                    },
                    {
                      "name": "Mortal205",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 205
                    },
                    {
                      "name": "Mortal206",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 206
                    },
                    {
                      "name": "Mortal207",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 207
                    },
                    {
                      "name": "Mortal208",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 208
                    },
                    {
                      "name": "Mortal209",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 209
                    },
                    {
                      "name": "Mortal210",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 210
                    },
                    {
                      "name": "Mortal211",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 211
                    },
                    {
                      "name": "Mortal212",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 212
                    },
                    {
                      "name": "Mortal213",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 213
                    },
                    {
                      "name": "Mortal214",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 214
                    },
                    {
                      "name": "Mortal215",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 215
                    },
                    {
                      "name": "Mortal216",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 216
                    },
                    {
                      "name": "Mortal217",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 217
                    },
                    {
                      "name": "Mortal218",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 218
                    },
                    {
                      "name": "Mortal219",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 219
                    },
                    {
                      "name": "Mortal220",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 220
                    },
                    {
                      "name": "Mortal221",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 221
                    },
                    {
                      "name": "Mortal222",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 222
                    },
                    {
                      "name": "Mortal223",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 223
                    },
                    {
                      "name": "Mortal224",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 224
                    },
                    {
                      "name": "Mortal225",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 225
                    },
                    {
                      "name": "Mortal226",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 226
                    },
                    {
                      "name": "Mortal227",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 227
                    },
                    {
                      "name": "Mortal228",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 228
                    },
                    {
                      "name": "Mortal229",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 229
                    },
                    {
                      "name": "Mortal230",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 230
                    },
                    {
                      "name": "Mortal231",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 231
                    },
                    {
                      "name": "Mortal232",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 232
                    },
                    {
                      "name": "Mortal233",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 233
                    },
                    {
                      "name": "Mortal234",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 234
                    },
                    {
                      "name": "Mortal235",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 235
                    },
                    {
                      "name": "Mortal236",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 236
                    },
                    {
                      "name": "Mortal237",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 237
                    },
                    {
                      "name": "Mortal238",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 238
                    },
                    {
                      "name": "Mortal239",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 239
                    },
                    {
                      "name": "Mortal240",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 240
                    },
                    {
                      "name": "Mortal241",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 241
                    },
                    {
                      "name": "Mortal242",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 242
                    },
                    {
                      "name": "Mortal243",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 243
                    },
                    {
                      "name": "Mortal244",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 244
                    },
                    {
                      "name": "Mortal245",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 245
                    },
                    {
                      "name": "Mortal246",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 246
                    },
                    {
                      "name": "Mortal247",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 247
                    },
                    {
                      "name": "Mortal248",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 248
                    },
                    {
                      "name": "Mortal249",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 249
                    },
                    {
                      "name": "Mortal250",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 250
                    },
                    {
                      "name": "Mortal251",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 251
                    },
                    {
                      "name": "Mortal252",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 252
                    },
                    {
                      "name": "Mortal253",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 253
                    },
                    {
                      "name": "Mortal254",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 254
                    },
                    {
                      "name": "Mortal255",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 255
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 483,
            "type": {
              "path": [
                "frame_system",
                "extensions",
                "check_nonce",
                "CheckNonce"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 40,
                      "typeName": "T::Nonce"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 484,
            "type": {
              "path": [
                "frame_system",
                "extensions",
                "check_weight",
                "CheckWeight"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {}
              }
            }
          },
          {
            "id": 485,
            "type": {
              "path": [
                "pallet_asset_conversion_tx_payment",
                "ChargeAssetTxPayment"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "tip",
                      "type": 44,
                      "typeName": "BalanceOf<T>"
                    },
                    {
                      "name": "asset_id",
                      "type": 320,
                      "typeName": "Option<ChargeAssetIdOf<T>>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 486,
            "type": {
              "path": [
                "cumulus_primitives_storage_weight_reclaim",
                "StorageWeightReclaim"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {}
              }
            }
          },
          {
            "id": 487,
            "type": {
              "path": [
                "frame_metadata_hash_extension",
                "CheckMetadataHash"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "mode",
                      "type": 488,
                      "typeName": "Mode"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 488,
            "type": {
              "path": [
                "frame_metadata_hash_extension",
                "Mode"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Disabled",
                      "index": 0
                    },
                    {
                      "name": "Enabled",
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 489,
            "type": {
              "path": [
                "asset_hub_westend_runtime",
                "Runtime"
              ],
              "def": {
                "composite": {}
              }
            }
          },
          {
            "id": 490,
            "type": {
              "path": [
                "sp_consensus_slots",
                "SlotDuration"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 12,
                      "typeName": "u64"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 491,
            "type": {
              "path": [
                "sp_runtime",
                "generic",
                "block",
                "Block"
              ],
              "params": [
                {
                  "name": "Header",
                  "type": 492
                },
                {
                  "name": "Extrinsic",
                  "type": 493
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "header",
                      "type": 492,
                      "typeName": "Header"
                    },
                    {
                      "name": "extrinsics",
                      "type": 494,
                      "typeName": "Vec<Extrinsic>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 492,
            "type": {
              "path": [
                "sp_runtime",
                "generic",
                "header",
                "Header"
              ],
              "params": [
                {
                  "name": "Number",
                  "type": 4
                },
                {
                  "name": "Hash",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "parent_hash",
                      "type": 13,
                      "typeName": "Hash::Output"
                    },
                    {
                      "name": "number",
                      "type": 40,
                      "typeName": "Number"
                    },
                    {
                      "name": "state_root",
                      "type": 13,
                      "typeName": "Hash::Output"
                    },
                    {
                      "name": "extrinsics_root",
                      "type": 13,
                      "typeName": "Hash::Output"
                    },
                    {
                      "name": "digest",
                      "type": 15,
                      "typeName": "Digest"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 493,
            "type": {
              "path": [
                "sp_runtime",
                "generic",
                "unchecked_extrinsic",
                "UncheckedExtrinsic"
              ],
              "params": [
                {
                  "name": "Address",
                  "type": 242
                },
                {
                  "name": "Call",
                  "type": 351
                },
                {
                  "name": "Signature",
                  "type": 378
                },
                {
                  "name": "Extra",
                  "type": 476
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 14
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 494,
            "type": {
              "def": {
                "sequence": {
                  "type": 493
                }
              }
            }
          },
          {
            "id": 495,
            "type": {
              "path": [
                "sp_runtime",
                "ExtrinsicInclusionMode"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "AllExtrinsics",
                      "index": 0
                    },
                    {
                      "name": "OnlyInherents",
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 496,
            "type": {
              "path": [
                "sp_core",
                "OpaqueMetadata"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 14,
                      "typeName": "Vec<u8>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 497,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 496
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 496
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 498,
            "type": {
              "path": [
                "Result"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 122
                },
                {
                  "name": "E",
                  "type": 499
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Ok",
                      "fields": [
                        {
                          "type": 122
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Err",
                      "fields": [
                        {
                          "type": 499
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 499,
            "type": {
              "path": [
                "sp_runtime",
                "transaction_validity",
                "TransactionValidityError"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Invalid",
                      "fields": [
                        {
                          "type": 500,
                          "typeName": "InvalidTransaction"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Unknown",
                      "fields": [
                        {
                          "type": 501,
                          "typeName": "UnknownTransaction"
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 500,
            "type": {
              "path": [
                "sp_runtime",
                "transaction_validity",
                "InvalidTransaction"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Call",
                      "index": 0
                    },
                    {
                      "name": "Payment",
                      "index": 1
                    },
                    {
                      "name": "Future",
                      "index": 2
                    },
                    {
                      "name": "Stale",
                      "index": 3
                    },
                    {
                      "name": "BadProof",
                      "index": 4
                    },
                    {
                      "name": "AncientBirthBlock",
                      "index": 5
                    },
                    {
                      "name": "ExhaustsResources",
                      "index": 6
                    },
                    {
                      "name": "Custom",
                      "fields": [
                        {
                          "type": 2,
                          "typeName": "u8"
                        }
                      ],
                      "index": 7
                    },
                    {
                      "name": "BadMandatory",
                      "index": 8
                    },
                    {
                      "name": "MandatoryValidation",
                      "index": 9
                    },
                    {
                      "name": "BadSigner",
                      "index": 10
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 501,
            "type": {
              "path": [
                "sp_runtime",
                "transaction_validity",
                "UnknownTransaction"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "CannotLookup",
                      "index": 0
                    },
                    {
                      "name": "NoUnsignedValidator",
                      "index": 1
                    },
                    {
                      "name": "Custom",
                      "fields": [
                        {
                          "type": 2,
                          "typeName": "u8"
                        }
                      ],
                      "index": 2
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 502,
            "type": {
              "path": [
                "sp_inherents",
                "InherentData"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "data",
                      "type": 503,
                      "typeName": "BTreeMap<InherentIdentifier, Vec<u8>>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 503,
            "type": {
              "path": [
                "BTreeMap"
              ],
              "params": [
                {
                  "name": "K",
                  "type": 76
                },
                {
                  "name": "V",
                  "type": 14
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 504
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 504,
            "type": {
              "def": {
                "sequence": {
                  "type": 505
                }
              }
            }
          },
          {
            "id": 505,
            "type": {
              "def": {
                "tuple": [
                  76,
                  14
                ]
              }
            }
          },
          {
            "id": 506,
            "type": {
              "path": [
                "sp_inherents",
                "CheckInherentsResult"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "okay",
                      "type": 8,
                      "typeName": "bool"
                    },
                    {
                      "name": "fatal_error",
                      "type": 8,
                      "typeName": "bool"
                    },
                    {
                      "name": "errors",
                      "type": 502,
                      "typeName": "InherentData"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 507,
            "type": {
              "path": [
                "sp_runtime",
                "transaction_validity",
                "TransactionSource"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "InBlock",
                      "index": 0
                    },
                    {
                      "name": "Local",
                      "index": 1
                    },
                    {
                      "name": "External",
                      "index": 2
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 508,
            "type": {
              "path": [
                "Result"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 509
                },
                {
                  "name": "E",
                  "type": 499
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Ok",
                      "fields": [
                        {
                          "type": 509
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Err",
                      "fields": [
                        {
                          "type": 499
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 509,
            "type": {
              "path": [
                "sp_runtime",
                "transaction_validity",
                "ValidTransaction"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "priority",
                      "type": 12,
                      "typeName": "TransactionPriority"
                    },
                    {
                      "name": "requires",
                      "type": 169,
                      "typeName": "Vec<TransactionTag>"
                    },
                    {
                      "name": "provides",
                      "type": 169,
                      "typeName": "Vec<TransactionTag>"
                    },
                    {
                      "name": "longevity",
                      "type": 12,
                      "typeName": "TransactionLongevity"
                    },
                    {
                      "name": "propagate",
                      "type": 8,
                      "typeName": "bool"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 510,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 511
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 511
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 511,
            "type": {
              "def": {
                "sequence": {
                  "type": 512
                }
              }
            }
          },
          {
            "id": 512,
            "type": {
              "def": {
                "tuple": [
                  14,
                  258
                ]
              }
            }
          },
          {
            "id": 513,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 514
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 514
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 514,
            "type": {
              "def": {
                "tuple": [
                  6,
                  6
                ]
              }
            }
          },
          {
            "id": 515,
            "type": {
              "path": [
                "pallet_transaction_payment",
                "types",
                "RuntimeDispatchInfo"
              ],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                },
                {
                  "name": "Weight",
                  "type": 10
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "weight",
                      "type": 10,
                      "typeName": "Weight"
                    },
                    {
                      "name": "class",
                      "type": 24,
                      "typeName": "DispatchClass"
                    },
                    {
                      "name": "partial_fee",
                      "type": 6,
                      "typeName": "Balance"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 516,
            "type": {
              "path": [
                "pallet_transaction_payment",
                "types",
                "FeeDetails"
              ],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "inclusion_fee",
                      "type": 517,
                      "typeName": "Option<InclusionFee<Balance>>"
                    },
                    {
                      "name": "tip",
                      "type": 6,
                      "typeName": "Balance"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 517,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 518
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 518
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 518,
            "type": {
              "path": [
                "pallet_transaction_payment",
                "types",
                "InclusionFee"
              ],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "base_fee",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "len_fee",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "adjusted_weight_fee",
                      "type": 6,
                      "typeName": "Balance"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 519,
            "type": {
              "path": [
                "Result"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 520
                },
                {
                  "name": "E",
                  "type": 521
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Ok",
                      "fields": [
                        {
                          "type": 520
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Err",
                      "fields": [
                        {
                          "type": 521
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 520,
            "type": {
              "def": {
                "sequence": {
                  "type": 299
                }
              }
            }
          },
          {
            "id": 521,
            "type": {
              "path": [
                "xcm_runtime_apis",
                "fees",
                "Error"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Unimplemented",
                      "index": 0
                    },
                    {
                      "name": "VersionedConversionFailed",
                      "index": 1
                    },
                    {
                      "name": "WeightNotComputable",
                      "index": 2
                    },
                    {
                      "name": "UnhandledXcmVersion",
                      "index": 3
                    },
                    {
                      "name": "AssetNotFound",
                      "index": 4
                    },
                    {
                      "name": "Unroutable",
                      "index": 5
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 522,
            "type": {
              "path": [
                "Result"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 10
                },
                {
                  "name": "E",
                  "type": 521
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Ok",
                      "fields": [
                        {
                          "type": 10
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Err",
                      "fields": [
                        {
                          "type": 521
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 523,
            "type": {
              "path": [
                "Result"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 6
                },
                {
                  "name": "E",
                  "type": 521
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Ok",
                      "fields": [
                        {
                          "type": 6
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Err",
                      "fields": [
                        {
                          "type": 521
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 524,
            "type": {
              "path": [
                "Result"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 95
                },
                {
                  "name": "E",
                  "type": 521
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Ok",
                      "fields": [
                        {
                          "type": 95
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Err",
                      "fields": [
                        {
                          "type": 521
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 525,
            "type": {
              "path": [
                "Result"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 526
                },
                {
                  "name": "E",
                  "type": 535
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Ok",
                      "fields": [
                        {
                          "type": 526
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Err",
                      "fields": [
                        {
                          "type": 535
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 526,
            "type": {
              "path": [
                "xcm_runtime_apis",
                "dry_run",
                "CallDryRunEffects"
              ],
              "params": [
                {
                  "name": "Event",
                  "type": 21
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "execution_result",
                      "type": 527,
                      "typeName": "DispatchResultWithPostInfo"
                    },
                    {
                      "name": "emitted_events",
                      "type": 530,
                      "typeName": "Vec<Event>"
                    },
                    {
                      "name": "local_xcm",
                      "type": 531,
                      "typeName": "Option<VersionedXcm<()>>"
                    },
                    {
                      "name": "forwarded_xcms",
                      "type": 532,
                      "typeName": "Vec<(VersionedLocation, Vec<VersionedXcm<()>>)>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 527,
            "type": {
              "path": [
                "Result"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 528
                },
                {
                  "name": "E",
                  "type": 529
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Ok",
                      "fields": [
                        {
                          "type": 528
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Err",
                      "fields": [
                        {
                          "type": 529
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 528,
            "type": {
              "path": [
                "frame_support",
                "dispatch",
                "PostDispatchInfo"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "actual_weight",
                      "type": 173,
                      "typeName": "Option<Weight>"
                    },
                    {
                      "name": "pays_fee",
                      "type": 25,
                      "typeName": "Pays"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 529,
            "type": {
              "path": [
                "sp_runtime",
                "DispatchErrorWithPostInfo"
              ],
              "params": [
                {
                  "name": "Info",
                  "type": 528
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "post_info",
                      "type": 528,
                      "typeName": "Info"
                    },
                    {
                      "name": "error",
                      "type": 26,
                      "typeName": "DispatchError"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 530,
            "type": {
              "def": {
                "sequence": {
                  "type": 21
                }
              }
            }
          },
          {
            "id": 531,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 308
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 308
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 532,
            "type": {
              "def": {
                "sequence": {
                  "type": 533
                }
              }
            }
          },
          {
            "id": 533,
            "type": {
              "def": {
                "tuple": [
                  115,
                  534
                ]
              }
            }
          },
          {
            "id": 534,
            "type": {
              "def": {
                "sequence": {
                  "type": 308
                }
              }
            }
          },
          {
            "id": 535,
            "type": {
              "path": [
                "xcm_runtime_apis",
                "dry_run",
                "Error"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Unimplemented",
                      "index": 0
                    },
                    {
                      "name": "VersionedConversionFailed",
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 536,
            "type": {
              "path": [
                "Result"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 537
                },
                {
                  "name": "E",
                  "type": 535
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Ok",
                      "fields": [
                        {
                          "type": 537
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Err",
                      "fields": [
                        {
                          "type": 535
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 537,
            "type": {
              "path": [
                "xcm_runtime_apis",
                "dry_run",
                "XcmDryRunEffects"
              ],
              "params": [
                {
                  "name": "Event",
                  "type": 21
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "execution_result",
                      "type": 52,
                      "typeName": "Outcome"
                    },
                    {
                      "name": "emitted_events",
                      "type": 530,
                      "typeName": "Vec<Event>"
                    },
                    {
                      "name": "forwarded_xcms",
                      "type": 532,
                      "typeName": "Vec<(VersionedLocation, Vec<VersionedXcm<()>>)>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 538,
            "type": {
              "path": [
                "Result"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 0
                },
                {
                  "name": "E",
                  "type": 539
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Ok",
                      "fields": [
                        {
                          "type": 0
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Err",
                      "fields": [
                        {
                          "type": 539
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 539,
            "type": {
              "path": [
                "xcm_runtime_apis",
                "conversions",
                "Error"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Unsupported",
                      "index": 0
                    },
                    {
                      "name": "VersionedConversionFailed",
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 540,
            "type": {
              "path": [
                "Result"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 95
                },
                {
                  "name": "E",
                  "type": 541
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Ok",
                      "fields": [
                        {
                          "type": 95
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Err",
                      "fields": [
                        {
                          "type": 541
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 541,
            "type": {
              "path": [
                "assets_common",
                "runtime_api",
                "FungiblesAccessError"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "AssetIdConversionFailed",
                      "index": 0
                    },
                    {
                      "name": "AmountToBalanceConversionFailed",
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 542,
            "type": {
              "path": [
                "cumulus_primitives_core",
                "CollationInfo"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "upward_messages",
                      "type": 169,
                      "typeName": "Vec<UpwardMessage>"
                    },
                    {
                      "name": "horizontal_messages",
                      "type": 210,
                      "typeName": "Vec<OutboundHrmpMessage>"
                    },
                    {
                      "name": "new_validation_code",
                      "type": 543,
                      "typeName": "Option<relay_chain::ValidationCode>"
                    },
                    {
                      "name": "processed_downward_messages",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "hrmp_watermark",
                      "type": 4,
                      "typeName": "relay_chain::BlockNumber"
                    },
                    {
                      "name": "head_data",
                      "type": 194,
                      "typeName": "HeadData"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 543,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 544
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 544
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 544,
            "type": {
              "path": [
                "polkadot_parachain_primitives",
                "primitives",
                "ValidationCode"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 14,
                      "typeName": "Vec<u8>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 545,
            "type": {
              "path": [
                "Result"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 123
                },
                {
                  "name": "E",
                  "type": 164
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Ok",
                      "fields": [
                        {
                          "type": 123
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Err",
                      "fields": [
                        {
                          "type": 164
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 546,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 164
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 164
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 547,
            "type": {
              "def": {
                "sequence": {
                  "type": 164
                }
              }
            }
          },
          {
            "id": 548,
            "type": {
              "path": [
                "asset_hub_westend_runtime",
                "RuntimeError"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "System",
                      "fields": [
                        {
                          "type": 181,
                          "typeName": "frame_system::Error<Runtime>"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "ParachainSystem",
                      "fields": [
                        {
                          "type": 222,
                          "typeName": "cumulus_pallet_parachain_system::Error<Runtime>"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "Balances",
                      "fields": [
                        {
                          "type": 245,
                          "typeName": "pallet_balances::Error<Runtime>"
                        }
                      ],
                      "index": 10
                    },
                    {
                      "name": "CollatorSelection",
                      "fields": [
                        {
                          "type": 252,
                          "typeName": "pallet_collator_selection::Error<Runtime>"
                        }
                      ],
                      "index": 21
                    },
                    {
                      "name": "Session",
                      "fields": [
                        {
                          "type": 260,
                          "typeName": "pallet_session::Error<Runtime>"
                        }
                      ],
                      "index": 22
                    },
                    {
                      "name": "XcmpQueue",
                      "fields": [
                        {
                          "type": 276,
                          "typeName": "cumulus_pallet_xcmp_queue::Error<Runtime>"
                        }
                      ],
                      "index": 30
                    },
                    {
                      "name": "PolkadotXcm",
                      "fields": [
                        {
                          "type": 337,
                          "typeName": "pallet_xcm::Error<Runtime>"
                        }
                      ],
                      "index": 31
                    },
                    {
                      "name": "MessageQueue",
                      "fields": [
                        {
                          "type": 348,
                          "typeName": "pallet_message_queue::Error<Runtime>"
                        }
                      ],
                      "index": 35
                    },
                    {
                      "name": "Utility",
                      "fields": [
                        {
                          "type": 399,
                          "typeName": "pallet_utility::Error<Runtime>"
                        }
                      ],
                      "index": 40
                    },
                    {
                      "name": "Multisig",
                      "fields": [
                        {
                          "type": 403,
                          "typeName": "pallet_multisig::Error<Runtime>"
                        }
                      ],
                      "index": 41
                    },
                    {
                      "name": "Proxy",
                      "fields": [
                        {
                          "type": 412,
                          "typeName": "pallet_proxy::Error<Runtime>"
                        }
                      ],
                      "index": 42
                    },
                    {
                      "name": "Assets",
                      "fields": [
                        {
                          "type": 423,
                          "typeName": "pallet_assets::Error<Runtime, pallet_assets::Instance1>"
                        }
                      ],
                      "index": 50
                    },
                    {
                      "name": "Uniques",
                      "fields": [
                        {
                          "type": 433,
                          "typeName": "pallet_uniques::Error<Runtime>"
                        }
                      ],
                      "index": 51
                    },
                    {
                      "name": "Nfts",
                      "fields": [
                        {
                          "type": 454,
                          "typeName": "pallet_nfts::Error<Runtime>"
                        }
                      ],
                      "index": 52
                    },
                    {
                      "name": "ForeignAssets",
                      "fields": [
                        {
                          "type": 459,
                          "typeName": "pallet_assets::Error<Runtime, pallet_assets::Instance2>"
                        }
                      ],
                      "index": 53
                    },
                    {
                      "name": "NftFractionalization",
                      "fields": [
                        {
                          "type": 462,
                          "typeName": "pallet_nft_fractionalization::Error<Runtime>"
                        }
                      ],
                      "index": 54
                    },
                    {
                      "name": "PoolAssets",
                      "fields": [
                        {
                          "type": 465,
                          "typeName": "pallet_assets::Error<Runtime, pallet_assets::Instance3>"
                        }
                      ],
                      "index": 55
                    },
                    {
                      "name": "AssetConversion",
                      "fields": [
                        {
                          "type": 467,
                          "typeName": "pallet_asset_conversion::Error<Runtime>"
                        }
                      ],
                      "index": 56
                    },
                    {
                      "name": "AssetsFreezer",
                      "fields": [
                        {
                          "type": 472,
                          "typeName": "pallet_assets_freezer::Error<Runtime, pallet_assets_freezer::Instance1>"
                        }
                      ],
                      "index": 57
                    },
                    {
                      "name": "ForeignAssetsFreezer",
                      "fields": [
                        {
                          "type": 473,
                          "typeName": "pallet_assets_freezer::Error<Runtime, pallet_assets_freezer::Instance2>"
                        }
                      ],
                      "index": 58
                    },
                    {
                      "name": "PoolAssetsFreezer",
                      "fields": [
                        {
                          "type": 474,
                          "typeName": "pallet_assets_freezer::Error<Runtime, pallet_assets_freezer::Instance3>"
                        }
                      ],
                      "index": 59
                    },
                    {
                      "name": "StateTrieMigration",
                      "fields": [
                        {
                          "type": 157,
                          "typeName": "pallet_state_trie_migration::Error<Runtime>"
                        }
                      ],
                      "index": 70
                    },
                    {
                      "name": "AssetConversionMigration",
                      "fields": [
                        {
                          "type": 475,
                          "typeName": "pallet_asset_conversion_ops::Error<Runtime>"
                        }
                      ],
                      "index": 200
                    }
                  ]
                }
              }
            }
          }
        ]
      },
      "pallets": [
        {
          "name": "System",
          "storage": {
            "prefix": "System",
            "entries": [
              {
                "name": "Account",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 0,
                    "value": 3
                  }
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  128
                ],
                "docs": [
                  " The full account information for a particular account ID."
                ]
              },
              {
                "name": "ExtrinsicCount",
                "modifier": "Optional",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0
                ],
                "docs": [
                  " Total extrinsics count for the current block."
                ]
              },
              {
                "name": "InherentsApplied",
                "modifier": "Default",
                "ty": {
                  "Plain": 8
                },
                "default": [
                  0
                ],
                "docs": [
                  " Whether all inherents have been applied."
                ]
              },
              {
                "name": "BlockWeight",
                "modifier": "Default",
                "ty": {
                  "Plain": 9
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The current weight for the block."
                ]
              },
              {
                "name": "AllExtrinsicsLen",
                "modifier": "Optional",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0
                ],
                "docs": [
                  " Total length (in bytes) for all extrinsics put together, for the current block."
                ]
              },
              {
                "name": "BlockHash",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 4,
                    "value": 13
                  }
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " Map of block numbers to block hashes."
                ]
              },
              {
                "name": "ExtrinsicData",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 4,
                    "value": 14
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Extrinsics data for the current block (maps an extrinsic's index to its data)."
                ]
              },
              {
                "name": "Number",
                "modifier": "Default",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The current block number being processed. Set by `execute_block`."
                ]
              },
              {
                "name": "ParentHash",
                "modifier": "Default",
                "ty": {
                  "Plain": 13
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " Hash of the previous block."
                ]
              },
              {
                "name": "Digest",
                "modifier": "Default",
                "ty": {
                  "Plain": 15
                },
                "default": [
                  0
                ],
                "docs": [
                  " Digest of the current block, also part of the block header."
                ]
              },
              {
                "name": "Events",
                "modifier": "Default",
                "ty": {
                  "Plain": 19
                },
                "default": [
                  0
                ],
                "docs": [
                  " Events deposited for the current block.",
                  "",
                  " NOTE: The item is unbound and should therefore never be read on chain.",
                  " It could otherwise inflate the PoV size of a block.",
                  "",
                  " Events have a large in-memory size. Box the events to not go out-of-memory",
                  " just in case someone still reads them from within the runtime."
                ]
              },
              {
                "name": "EventCount",
                "modifier": "Default",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The number of events in the `Events<T>` list."
                ]
              },
              {
                "name": "EventTopics",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 13,
                    "value": 161
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Mapping between a topic (represented by T::Hash) and a vector of indexes",
                  " of events in the `<Events<T>>` list.",
                  "",
                  " All topic vectors have deterministic storage locations depending on the topic. This",
                  " allows light-clients to leverage the changes trie storage tracking mechanism and",
                  " in case of changes fetch the list of events of interest.",
                  "",
                  " The value has the type `(BlockNumberFor<T>, EventIndex)` because if we used only just",
                  " the `EventIndex` then in case if the topic has the same contents on the next block",
                  " no notification will be triggered thus the event might be lost."
                ]
              },
              {
                "name": "LastRuntimeUpgrade",
                "modifier": "Optional",
                "ty": {
                  "Plain": 163
                },
                "default": [
                  0
                ],
                "docs": [
                  " Stores the `spec_version` and `spec_name` of when the last runtime upgrade happened."
                ]
              },
              {
                "name": "UpgradedToU32RefCount",
                "modifier": "Default",
                "ty": {
                  "Plain": 8
                },
                "default": [
                  0
                ],
                "docs": [
                  " True if we have upgraded so that `type RefCount` is `u32`. False (default) if not."
                ]
              },
              {
                "name": "UpgradedToTripleRefCount",
                "modifier": "Default",
                "ty": {
                  "Plain": 8
                },
                "default": [
                  0
                ],
                "docs": [
                  " True if we have upgraded so that AccountInfo contains three types of `RefCount`. False",
                  " (default) if not."
                ]
              },
              {
                "name": "ExecutionPhase",
                "modifier": "Optional",
                "ty": {
                  "Plain": 159
                },
                "default": [
                  0
                ],
                "docs": [
                  " The execution phase of the block."
                ]
              },
              {
                "name": "AuthorizedUpgrade",
                "modifier": "Optional",
                "ty": {
                  "Plain": 165
                },
                "default": [
                  0
                ],
                "docs": [
                  " `Some` if a code upgrade has been authorized."
                ]
              }
            ]
          },
          "calls": {
            "ty": 166
          },
          "event": {
            "ty": 22
          },
          "constants": [
            {
              "name": "BlockWeights",
              "ty": 170,
              "value": [
                7,
                0,
                242,
                5,
                42,
                1,
                0,
                11,
                0,
                32,
                74,
                169,
                209,
                1,
                2,
                0,
                64,
                1,
                2,
                101,
                205,
                29,
                0,
                1,
                11,
                192,
                86,
                13,
                239,
                69,
                1,
                2,
                0,
                224,
                0,
                1,
                11,
                0,
                152,
                247,
                62,
                93,
                1,
                2,
                0,
                240,
                0,
                1,
                0,
                0,
                2,
                101,
                205,
                29,
                0,
                1,
                11,
                192,
                222,
                95,
                89,
                186,
                1,
                2,
                0,
                48,
                1,
                1,
                11,
                0,
                32,
                74,
                169,
                209,
                1,
                2,
                0,
                64,
                1,
                1,
                7,
                0,
                136,
                82,
                106,
                116,
                2,
                0,
                80,
                0,
                2,
                101,
                205,
                29,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " Block & extrinsics weights: base values and limits."
              ]
            },
            {
              "name": "BlockLength",
              "ty": 174,
              "value": [
                0,
                0,
                60,
                0,
                0,
                0,
                80,
                0,
                0,
                0,
                80,
                0
              ],
              "docs": [
                " The maximum length of a block (in bytes)."
              ]
            },
            {
              "name": "BlockHashCount",
              "ty": 4,
              "value": [
                0,
                16,
                0,
                0
              ],
              "docs": [
                " Maximum number of block number to block hash mappings to keep (oldest pruned first)."
              ]
            },
            {
              "name": "DbWeight",
              "ty": 176,
              "value": [
                64,
                120,
                125,
                1,
                0,
                0,
                0,
                0,
                0,
                225,
                245,
                5,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The weight of runtime database operations the runtime can invoke."
              ]
            },
            {
              "name": "Version",
              "ty": 177,
              "value": [
                32,
                119,
                101,
                115,
                116,
                109,
                105,
                110,
                116,
                32,
                119,
                101,
                115,
                116,
                109,
                105,
                110,
                116,
                1,
                0,
                0,
                0,
                240,
                120,
                15,
                0,
                0,
                0,
                0,
                0,
                76,
                221,
                113,
                141,
                92,
                197,
                50,
                98,
                212,
                1,
                0,
                0,
                0,
                215,
                189,
                216,
                162,
                114,
                202,
                13,
                101,
                1,
                0,
                0,
                0,
                223,
                106,
                203,
                104,
                153,
                7,
                96,
                155,
                5,
                0,
                0,
                0,
                55,
                227,
                151,
                252,
                124,
                145,
                245,
                228,
                2,
                0,
                0,
                0,
                64,
                254,
                58,
                212,
                1,
                248,
                149,
                154,
                6,
                0,
                0,
                0,
                210,
                188,
                152,
                151,
                238,
                208,
                143,
                21,
                3,
                0,
                0,
                0,
                247,
                139,
                39,
                139,
                229,
                63,
                69,
                76,
                2,
                0,
                0,
                0,
                171,
                60,
                5,
                114,
                41,
                31,
                235,
                139,
                1,
                0,
                0,
                0,
                188,
                157,
                137,
                144,
                79,
                91,
                146,
                63,
                1,
                0,
                0,
                0,
                137,
                154,
                37,
                12,
                190,
                132,
                242,
                80,
                1,
                0,
                0,
                0,
                138,
                128,
                71,
                165,
                58,
                130,
                119,
                236,
                1,
                0,
                0,
                0,
                55,
                200,
                187,
                19,
                80,
                169,
                162,
                168,
                4,
                0,
                0,
                0,
                111,
                245,
                46,
                232,
                88,
                230,
                197,
                189,
                1,
                0,
                0,
                0,
                145,
                177,
                200,
                177,
                99,
                40,
                235,
                146,
                1,
                0,
                0,
                0,
                159,
                251,
                80,
                90,
                167,
                56,
                214,
                156,
                1,
                0,
                0,
                0,
                243,
                255,
                20,
                213,
                171,
                82,
                112,
                89,
                3,
                0,
                0,
                0,
                222,
                146,
                184,
                160,
                66,
                107,
                155,
                246,
                2,
                0,
                0,
                0,
                234,
                147,
                227,
                241,
                111,
                61,
                105,
                98,
                2,
                0,
                0,
                0,
                251,
                197,
                119,
                185,
                215,
                71,
                239,
                214,
                1,
                0,
                0,
                0,
                16,
                0,
                0,
                0,
                1
              ],
              "docs": [
                " Get the chain's in-code version."
              ]
            },
            {
              "name": "SS58Prefix",
              "ty": 128,
              "value": [
                42,
                0
              ],
              "docs": [
                " The designated SS58 prefix of this chain.",
                "",
                " This replaces the \"ss58Format\" property declared in the chain spec. Reason is",
                " that the runtime should know about the prefix in order to make use of it as",
                " an identifier of the chain."
              ]
            }
          ],
          "error": {
            "ty": 181
          },
          "index": 0,
          "docs": []
        },
        {
          "name": "ParachainSystem",
          "storage": {
            "prefix": "ParachainSystem",
            "entries": [
              {
                "name": "UnincludedSegment",
                "modifier": "Default",
                "ty": {
                  "Plain": 182
                },
                "default": [
                  0
                ],
                "docs": [
                  " Latest included block descendants the runtime accepted. In other words, these are",
                  " ancestors of the currently executing block which have not been included in the observed",
                  " relay-chain state.",
                  "",
                  " The segment length is limited by the capacity returned from the [`ConsensusHook`] configured",
                  " in the pallet."
                ]
              },
              {
                "name": "AggregatedUnincludedSegment",
                "modifier": "Optional",
                "ty": {
                  "Plain": 192
                },
                "default": [
                  0
                ],
                "docs": [
                  " Storage field that keeps track of bandwidth used by the unincluded segment along with the",
                  " latest HRMP watermark. Used for limiting the acceptance of new blocks with",
                  " respect to relay chain constraints."
                ]
              },
              {
                "name": "PendingValidationCode",
                "modifier": "Default",
                "ty": {
                  "Plain": 14
                },
                "default": [
                  0
                ],
                "docs": [
                  " In case of a scheduled upgrade, this storage field contains the validation code to be",
                  " applied.",
                  "",
                  " As soon as the relay chain gives us the go-ahead signal, we will overwrite the",
                  " [`:code`][sp_core::storage::well_known_keys::CODE] which will result the next block process",
                  " with the new validation code. This concludes the upgrade process."
                ]
              },
              {
                "name": "NewValidationCode",
                "modifier": "Optional",
                "ty": {
                  "Plain": 14
                },
                "default": [
                  0
                ],
                "docs": [
                  " Validation code that is set by the parachain and is to be communicated to collator and",
                  " consequently the relay-chain.",
                  "",
                  " This will be cleared in `on_initialize` of each new block if no other pallet already set",
                  " the value."
                ]
              },
              {
                "name": "ValidationData",
                "modifier": "Optional",
                "ty": {
                  "Plain": 193
                },
                "default": [
                  0
                ],
                "docs": [
                  " The [`PersistedValidationData`] set for this block.",
                  " This value is expected to be set only once per block and it's never stored",
                  " in the trie."
                ]
              },
              {
                "name": "DidSetValidationCode",
                "modifier": "Default",
                "ty": {
                  "Plain": 8
                },
                "default": [
                  0
                ],
                "docs": [
                  " Were the validation data set to notify the relay chain?"
                ]
              },
              {
                "name": "LastRelayChainBlockNumber",
                "modifier": "Default",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The relay chain block number associated with the last parachain block.",
                  "",
                  " This is updated in `on_finalize`."
                ]
              },
              {
                "name": "UpgradeRestrictionSignal",
                "modifier": "Default",
                "ty": {
                  "Plain": 195
                },
                "default": [
                  0
                ],
                "docs": [
                  " An option which indicates if the relay-chain restricts signalling a validation code upgrade.",
                  " In other words, if this is `Some` and [`NewValidationCode`] is `Some` then the produced",
                  " candidate will be invalid.",
                  "",
                  " This storage item is a mirror of the corresponding value for the current parachain from the",
                  " relay-chain. This value is ephemeral which means it doesn't hit the storage. This value is",
                  " set after the inherent."
                ]
              },
              {
                "name": "UpgradeGoAhead",
                "modifier": "Default",
                "ty": {
                  "Plain": 190
                },
                "default": [
                  0
                ],
                "docs": [
                  " Optional upgrade go-ahead signal from the relay-chain.",
                  "",
                  " This storage item is a mirror of the corresponding value for the current parachain from the",
                  " relay-chain. This value is ephemeral which means it doesn't hit the storage. This value is",
                  " set after the inherent."
                ]
              },
              {
                "name": "RelayStateProof",
                "modifier": "Optional",
                "ty": {
                  "Plain": 197
                },
                "default": [
                  0
                ],
                "docs": [
                  " The state proof for the last relay parent block.",
                  "",
                  " This field is meant to be updated each block with the validation data inherent. Therefore,",
                  " before processing of the inherent, e.g. in `on_initialize` this data may be stale.",
                  "",
                  " This data is also absent from the genesis."
                ]
              },
              {
                "name": "RelevantMessagingState",
                "modifier": "Optional",
                "ty": {
                  "Plain": 199
                },
                "default": [
                  0
                ],
                "docs": [
                  " The snapshot of some state related to messaging relevant to the current parachain as per",
                  " the relay parent.",
                  "",
                  " This field is meant to be updated each block with the validation data inherent. Therefore,",
                  " before processing of the inherent, e.g. in `on_initialize` this data may be stale.",
                  "",
                  " This data is also absent from the genesis."
                ]
              },
              {
                "name": "HostConfiguration",
                "modifier": "Optional",
                "ty": {
                  "Plain": 204
                },
                "default": [
                  0
                ],
                "docs": [
                  " The parachain host configuration that was obtained from the relay parent.",
                  "",
                  " This field is meant to be updated each block with the validation data inherent. Therefore,",
                  " before processing of the inherent, e.g. in `on_initialize` this data may be stale.",
                  "",
                  " This data is also absent from the genesis."
                ]
              },
              {
                "name": "LastDmqMqcHead",
                "modifier": "Default",
                "ty": {
                  "Plain": 206
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The last downward message queue chain head we have observed.",
                  "",
                  " This value is loaded before and saved after processing inbound downward messages carried",
                  " by the system inherent."
                ]
              },
              {
                "name": "LastHrmpMqcHeads",
                "modifier": "Default",
                "ty": {
                  "Plain": 207
                },
                "default": [
                  0
                ],
                "docs": [
                  " The message queue chain heads we have observed per each channel incoming channel.",
                  "",
                  " This value is loaded before and saved after processing inbound downward messages carried",
                  " by the system inherent."
                ]
              },
              {
                "name": "ProcessedDownwardMessages",
                "modifier": "Default",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " Number of downward messages processed in a block.",
                  "",
                  " This will be cleared in `on_initialize` of each new block."
                ]
              },
              {
                "name": "HrmpWatermark",
                "modifier": "Default",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " HRMP watermark that was set in a block.",
                  "",
                  " This will be cleared in `on_initialize` of each new block."
                ]
              },
              {
                "name": "HrmpOutboundMessages",
                "modifier": "Default",
                "ty": {
                  "Plain": 210
                },
                "default": [
                  0
                ],
                "docs": [
                  " HRMP messages that were sent in a block.",
                  "",
                  " This will be cleared in `on_initialize` of each new block."
                ]
              },
              {
                "name": "UpwardMessages",
                "modifier": "Default",
                "ty": {
                  "Plain": 169
                },
                "default": [
                  0
                ],
                "docs": [
                  " Upward messages that were sent in a block.",
                  "",
                  " This will be cleared in `on_initialize` of each new block."
                ]
              },
              {
                "name": "PendingUpwardMessages",
                "modifier": "Default",
                "ty": {
                  "Plain": 169
                },
                "default": [
                  0
                ],
                "docs": [
                  " Upward messages that are still pending and not yet send to the relay chain."
                ]
              },
              {
                "name": "UpwardDeliveryFeeFactor",
                "modifier": "Default",
                "ty": {
                  "Plain": 212
                },
                "default": [
                  0,
                  0,
                  100,
                  167,
                  179,
                  182,
                  224,
                  13,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The factor to multiply the base delivery fee by for UMP."
                ]
              },
              {
                "name": "AnnouncedHrmpMessagesPerCandidate",
                "modifier": "Default",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The number of HRMP messages we observed in `on_initialize` and thus used that number for",
                  " announcing the weight of `on_initialize` and `on_finalize`."
                ]
              },
              {
                "name": "ReservedXcmpWeightOverride",
                "modifier": "Optional",
                "ty": {
                  "Plain": 10
                },
                "default": [
                  0
                ],
                "docs": [
                  " The weight we reserve at the beginning of the block for processing XCMP messages. This",
                  " overrides the amount set in the Config trait."
                ]
              },
              {
                "name": "ReservedDmpWeightOverride",
                "modifier": "Optional",
                "ty": {
                  "Plain": 10
                },
                "default": [
                  0
                ],
                "docs": [
                  " The weight we reserve at the beginning of the block for processing DMP messages. This",
                  " overrides the amount set in the Config trait."
                ]
              },
              {
                "name": "CustomValidationHeadData",
                "modifier": "Optional",
                "ty": {
                  "Plain": 14
                },
                "default": [
                  0
                ],
                "docs": [
                  " A custom head data that should be returned as result of `validate_block`.",
                  "",
                  " See `Pallet::set_custom_validation_head_data` for more information."
                ]
              }
            ]
          },
          "calls": {
            "ty": 213
          },
          "event": {
            "ty": 31
          },
          "constants": [
            {
              "name": "SelfParaId",
              "ty": 119,
              "value": [
                232,
                3,
                0,
                0
              ],
              "docs": [
                " Returns the parachain ID we are running with."
              ]
            }
          ],
          "error": {
            "ty": 222
          },
          "index": 1,
          "docs": []
        },
        {
          "name": "Timestamp",
          "storage": {
            "prefix": "Timestamp",
            "entries": [
              {
                "name": "Now",
                "modifier": "Default",
                "ty": {
                  "Plain": 12
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The current time for the current block."
                ]
              },
              {
                "name": "DidUpdate",
                "modifier": "Default",
                "ty": {
                  "Plain": 8
                },
                "default": [
                  0
                ],
                "docs": [
                  " Whether the timestamp has been updated in this block.",
                  "",
                  " This value is updated to `true` upon successful submission of a timestamp by a node.",
                  " It is then checked at the end of each block execution in the `on_finalize` hook."
                ]
              }
            ]
          },
          "calls": {
            "ty": 223
          },
          "event": null,
          "constants": [
            {
              "name": "MinimumPeriod",
              "ty": 12,
              "value": [
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The minimum period between blocks.",
                "",
                " Be aware that this is different to the *expected* period that the block production",
                " apparatus provides. Your chosen consensus system will generally work with this to",
                " determine a sensible block time. For example, in the Aura pallet it will be double this",
                " period on default settings."
              ]
            }
          ],
          "error": null,
          "index": 3,
          "docs": []
        },
        {
          "name": "ParachainInfo",
          "storage": {
            "prefix": "ParachainInfo",
            "entries": [
              {
                "name": "ParachainId",
                "modifier": "Default",
                "ty": {
                  "Plain": 119
                },
                "default": [
                  100,
                  0,
                  0,
                  0
                ],
                "docs": []
              }
            ]
          },
          "calls": {
            "ty": 224
          },
          "event": null,
          "constants": [],
          "error": null,
          "index": 4,
          "docs": []
        },
        {
          "name": "Balances",
          "storage": {
            "prefix": "Balances",
            "entries": [
              {
                "name": "TotalIssuance",
                "modifier": "Default",
                "ty": {
                  "Plain": 6
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The total units issued in the system."
                ]
              },
              {
                "name": "InactiveIssuance",
                "modifier": "Default",
                "ty": {
                  "Plain": 6
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The total units of outstanding deactivated balance in the system."
                ]
              },
              {
                "name": "Account",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 0,
                    "value": 5
                  }
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  128
                ],
                "docs": [
                  " The Balances pallet example of storing the balance of an account.",
                  "",
                  " # Example",
                  "",
                  " ```nocompile",
                  "  impl pallet_balances::Config for Runtime {",
                  "    type AccountStore = StorageMapShim<Self::Account<Runtime>, frame_system::Provider<Runtime>, AccountId, Self::AccountData<Balance>>",
                  "  }",
                  " ```",
                  "",
                  " You can also store the balance of an account in the `System` pallet.",
                  "",
                  " # Example",
                  "",
                  " ```nocompile",
                  "  impl pallet_balances::Config for Runtime {",
                  "   type AccountStore = System",
                  "  }",
                  " ```",
                  "",
                  " But this comes with tradeoffs, storing account balances in the system pallet stores",
                  " `frame_system` data alongside the account data contrary to storing account balances in the",
                  " `Balances` pallet, which uses a `StorageMap` to store balances data only.",
                  " NOTE: This is only used in the case that this pallet is used to store balances."
                ]
              },
              {
                "name": "Locks",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 0,
                    "value": 225
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Any liquidity locks on some account balances.",
                  " NOTE: Should only be accessed when setting, changing and freeing a lock.",
                  "",
                  " Use of locks is deprecated in favour of freezes. See `https://github.com/paritytech/substrate/pull/12951/`"
                ]
              },
              {
                "name": "Reserves",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 0,
                    "value": 229
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Named reserves on some account balances.",
                  "",
                  " Use of reserves is deprecated in favour of holds. See `https://github.com/paritytech/substrate/pull/12951/`"
                ]
              },
              {
                "name": "Holds",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 0,
                    "value": 232
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Holds on account balances."
                ]
              },
              {
                "name": "Freezes",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 0,
                    "value": 238
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Freeze locks on account balances."
                ]
              }
            ]
          },
          "calls": {
            "ty": 241
          },
          "event": {
            "ty": 33
          },
          "constants": [
            {
              "name": "ExistentialDeposit",
              "ty": 6,
              "value": [
                0,
                202,
                154,
                59,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The minimum amount required to keep an account open. MUST BE GREATER THAN ZERO!",
                "",
                " If you *really* need it to be zero, you can enable the feature `insecure_zero_ed` for",
                " this pallet. However, you do so at your own risk: this will open up a major DoS vector.",
                " In case you have multiple sources of provider references, you may also get unexpected",
                " behaviour if you set this to zero.",
                "",
                " Bottom line: Do yourself a favour and make it at least one!"
              ]
            },
            {
              "name": "MaxLocks",
              "ty": 4,
              "value": [
                50,
                0,
                0,
                0
              ],
              "docs": [
                " The maximum number of locks that should exist on an account.",
                " Not strictly enforced, but used for weight estimation.",
                "",
                " Use of locks is deprecated in favour of freezes. See `https://github.com/paritytech/substrate/pull/12951/`"
              ]
            },
            {
              "name": "MaxReserves",
              "ty": 4,
              "value": [
                50,
                0,
                0,
                0
              ],
              "docs": [
                " The maximum number of named reserves that can exist on an account.",
                "",
                " Use of reserves is deprecated in favour of holds. See `https://github.com/paritytech/substrate/pull/12951/`"
              ]
            },
            {
              "name": "MaxFreezes",
              "ty": 4,
              "value": [
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The maximum number of individual freeze locks that can exist on an account at any time."
              ]
            }
          ],
          "error": {
            "ty": 245
          },
          "index": 10,
          "docs": []
        },
        {
          "name": "TransactionPayment",
          "storage": {
            "prefix": "TransactionPayment",
            "entries": [
              {
                "name": "NextFeeMultiplier",
                "modifier": "Default",
                "ty": {
                  "Plain": 212
                },
                "default": [
                  0,
                  0,
                  100,
                  167,
                  179,
                  182,
                  224,
                  13,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": []
              },
              {
                "name": "StorageVersion",
                "modifier": "Default",
                "ty": {
                  "Plain": 246
                },
                "default": [
                  0
                ],
                "docs": []
              }
            ]
          },
          "calls": null,
          "event": {
            "ty": 35
          },
          "constants": [
            {
              "name": "OperationalFeeMultiplier",
              "ty": 2,
              "value": [
                5
              ],
              "docs": [
                " A fee multiplier for `Operational` extrinsics to compute \"virtual tip\" to boost their",
                " `priority`",
                "",
                " This value is multiplied by the `final_fee` to obtain a \"virtual tip\" that is later",
                " added to a tip component in regular `priority` calculations.",
                " It means that a `Normal` transaction can front-run a similarly-sized `Operational`",
                " extrinsic (with no tip), by including a tip value greater than the virtual tip.",
                "",
                " ```rust,ignore",
                " // For `Normal`",
                " let priority = priority_calc(tip);",
                "",
                " // For `Operational`",
                " let virtual_tip = (inclusion_fee + tip) * OperationalFeeMultiplier;",
                " let priority = priority_calc(tip + virtual_tip);",
                " ```",
                "",
                " Note that since we use `final_fee` the multiplier applies also to the regular `tip`",
                " sent with the transaction. So, not only does the transaction get a priority bump based",
                " on the `inclusion_fee`, but we also amplify the impact of tips applied to `Operational`",
                " transactions."
              ]
            }
          ],
          "error": null,
          "index": 11,
          "docs": []
        },
        {
          "name": "AssetTxPayment",
          "storage": null,
          "calls": null,
          "event": {
            "ty": 36
          },
          "constants": [],
          "error": null,
          "index": 13,
          "docs": []
        },
        {
          "name": "Authorship",
          "storage": {
            "prefix": "Authorship",
            "entries": [
              {
                "name": "Author",
                "modifier": "Optional",
                "ty": {
                  "Plain": 0
                },
                "default": [
                  0
                ],
                "docs": [
                  " Author of current block."
                ]
              }
            ]
          },
          "calls": null,
          "event": null,
          "constants": [],
          "error": null,
          "index": 20,
          "docs": []
        },
        {
          "name": "CollatorSelection",
          "storage": {
            "prefix": "CollatorSelection",
            "entries": [
              {
                "name": "Invulnerables",
                "modifier": "Default",
                "ty": {
                  "Plain": 247
                },
                "default": [
                  0
                ],
                "docs": [
                  " The invulnerable, permissioned collators. This list must be sorted."
                ]
              },
              {
                "name": "CandidateList",
                "modifier": "Default",
                "ty": {
                  "Plain": 248
                },
                "default": [
                  0
                ],
                "docs": [
                  " The (community, limited) collation candidates. `Candidates` and `Invulnerables` should be",
                  " mutually exclusive.",
                  "",
                  " This list is sorted in ascending order by deposit and when the deposits are equal, the least",
                  " recently updated is considered greater."
                ]
              },
              {
                "name": "LastAuthoredBlock",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 0,
                    "value": 4
                  }
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " Last block authored by collator."
                ]
              },
              {
                "name": "DesiredCandidates",
                "modifier": "Default",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " Desired number of candidates.",
                  "",
                  " This should ideally always be less than [`Config::MaxCandidates`] for weights to be correct."
                ]
              },
              {
                "name": "CandidacyBond",
                "modifier": "Default",
                "ty": {
                  "Plain": 6
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " Fixed amount to deposit to become a collator.",
                  "",
                  " When a collator calls `leave_intent` they immediately receive the deposit back."
                ]
              }
            ]
          },
          "calls": {
            "ty": 251
          },
          "event": {
            "ty": 47
          },
          "constants": [],
          "error": {
            "ty": 252
          },
          "index": 21,
          "docs": []
        },
        {
          "name": "Session",
          "storage": {
            "prefix": "Session",
            "entries": [
              {
                "name": "Validators",
                "modifier": "Default",
                "ty": {
                  "Plain": 48
                },
                "default": [
                  0
                ],
                "docs": [
                  " The current set of validators."
                ]
              },
              {
                "name": "CurrentIndex",
                "modifier": "Default",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " Current index of the session."
                ]
              },
              {
                "name": "QueuedChanged",
                "modifier": "Default",
                "ty": {
                  "Plain": 8
                },
                "default": [
                  0
                ],
                "docs": [
                  " True if the underlying economic identities or weighting behind the validators",
                  " has changed in the queued validator set."
                ]
              },
              {
                "name": "QueuedKeys",
                "modifier": "Default",
                "ty": {
                  "Plain": 253
                },
                "default": [
                  0
                ],
                "docs": [
                  " The queued keys for the next session. When the next session begins, these keys",
                  " will be used to determine the validator's session keys."
                ]
              },
              {
                "name": "DisabledValidators",
                "modifier": "Default",
                "ty": {
                  "Plain": 132
                },
                "default": [
                  0
                ],
                "docs": [
                  " Indices of disabled validators.",
                  "",
                  " The vec is always kept sorted so that we can find whether a given validator is",
                  " disabled using binary search. It gets cleared when `on_session_ending` returns",
                  " a new set of identities."
                ]
              },
              {
                "name": "NextKeys",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 0,
                    "value": 255
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " The next session keys for a validator."
                ]
              },
              {
                "name": "KeyOwner",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 257,
                    "value": 0
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " The owner of a key. The key is the `KeyTypeId` + the encoded key."
                ]
              }
            ]
          },
          "calls": {
            "ty": 259
          },
          "event": {
            "ty": 49
          },
          "constants": [],
          "error": {
            "ty": 260
          },
          "index": 22,
          "docs": []
        },
        {
          "name": "Aura",
          "storage": {
            "prefix": "Aura",
            "entries": [
              {
                "name": "Authorities",
                "modifier": "Default",
                "ty": {
                  "Plain": 261
                },
                "default": [
                  0
                ],
                "docs": [
                  " The current authority set."
                ]
              },
              {
                "name": "CurrentSlot",
                "modifier": "Default",
                "ty": {
                  "Plain": 263
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The current slot of this block.",
                  "",
                  " This will be set in `on_initialize`."
                ]
              }
            ]
          },
          "calls": null,
          "event": null,
          "constants": [
            {
              "name": "SlotDuration",
              "ty": 12,
              "value": [
                112,
                23,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The slot duration Aura should run with, expressed in milliseconds.",
                " The effective value of this type should not change while the chain is running.",
                "",
                " For backwards compatibility either use [`MinimumPeriodTimesTwo`] or a const."
              ]
            }
          ],
          "error": null,
          "index": 23,
          "docs": []
        },
        {
          "name": "AuraExt",
          "storage": {
            "prefix": "AuraExt",
            "entries": [
              {
                "name": "Authorities",
                "modifier": "Default",
                "ty": {
                  "Plain": 261
                },
                "default": [
                  0
                ],
                "docs": [
                  " Serves as cache for the authorities.",
                  "",
                  " The authorities in AuRa are overwritten in `on_initialize` when we switch to a new session,",
                  " but we require the old authorities to verify the seal when validating a PoV. This will",
                  " always be updated to the latest AuRa authorities in `on_finalize`."
                ]
              },
              {
                "name": "SlotInfo",
                "modifier": "Optional",
                "ty": {
                  "Plain": 264
                },
                "default": [
                  0
                ],
                "docs": [
                  " Current slot paired with a number of authored blocks.",
                  "",
                  " Updated on each block initialization."
                ]
              }
            ]
          },
          "calls": null,
          "event": null,
          "constants": [],
          "error": null,
          "index": 24,
          "docs": []
        },
        {
          "name": "XcmpQueue",
          "storage": {
            "prefix": "XcmpQueue",
            "entries": [
              {
                "name": "InboundXcmpSuspended",
                "modifier": "Default",
                "ty": {
                  "Plain": 265
                },
                "default": [
                  0
                ],
                "docs": [
                  " The suspended inbound XCMP channels. All others are not suspended.",
                  "",
                  " This is a `StorageValue` instead of a `StorageMap` since we expect multiple reads per block",
                  " to different keys with a one byte payload. The access to `BoundedBTreeSet` will be cached",
                  " within the block and therefore only included once in the proof size.",
                  "",
                  " NOTE: The PoV benchmarking cannot know this and will over-estimate, but the actual proof",
                  " will be smaller."
                ]
              },
              {
                "name": "OutboundXcmpStatus",
                "modifier": "Default",
                "ty": {
                  "Plain": 268
                },
                "default": [
                  0
                ],
                "docs": [
                  " The non-empty XCMP channels in order of becoming non-empty, and the index of the first",
                  " and last outbound message. If the two indices are equal, then it indicates an empty",
                  " queue and there must be a non-`Ok` `OutboundStatus`. We assume queues grow no greater",
                  " than 65535 items. Queue indices for normal messages begin at one; zero is reserved in",
                  " case of the need to send a high-priority signal message this block.",
                  " The bool is true if there is a signal message waiting to be sent."
                ]
              },
              {
                "name": "OutboundXcmpMessages",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat",
                      "Twox64Concat"
                    ],
                    "key": 272,
                    "value": 273
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " The messages outbound in a given XCMP channel."
                ]
              },
              {
                "name": "SignalMessages",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 119,
                    "value": 273
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Any signal messages waiting to be sent."
                ]
              },
              {
                "name": "QueueConfig",
                "modifier": "Default",
                "ty": {
                  "Plain": 274
                },
                "default": [
                  32,
                  0,
                  0,
                  0,
                  48,
                  0,
                  0,
                  0,
                  8,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The configuration which controls the dynamics of the outbound queue."
                ]
              },
              {
                "name": "QueueSuspended",
                "modifier": "Default",
                "ty": {
                  "Plain": 8
                },
                "default": [
                  0
                ],
                "docs": [
                  " Whether or not the XCMP queue is suspended from executing incoming XCMs or not."
                ]
              },
              {
                "name": "DeliveryFeeFactor",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 119,
                    "value": 212
                  }
                },
                "default": [
                  0,
                  0,
                  100,
                  167,
                  179,
                  182,
                  224,
                  13,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The factor to multiply the base delivery fee by."
                ]
              }
            ]
          },
          "calls": {
            "ty": 275
          },
          "event": {
            "ty": 50
          },
          "constants": [
            {
              "name": "MaxInboundSuspended",
              "ty": 4,
              "value": [
                232,
                3,
                0,
                0
              ],
              "docs": [
                " The maximum number of inbound XCMP channels that can be suspended simultaneously.",
                "",
                " Any further channel suspensions will fail and messages may get dropped without further",
                " notice. Choosing a high value (1000) is okay; the trade-off that is described in",
                " [`InboundXcmpSuspended`] still applies at that scale."
              ]
            },
            {
              "name": "MaxActiveOutboundChannels",
              "ty": 4,
              "value": [
                128,
                0,
                0,
                0
              ],
              "docs": [
                " Maximal number of outbound XCMP channels that can have messages queued at the same time.",
                "",
                " If this is reached, then no further messages can be sent to channels that do not yet",
                " have a message queued. This should be set to the expected maximum of outbound channels",
                " which is determined by [`Self::ChannelInfo`]. It is important to set this large enough,",
                " since otherwise the congestion control protocol will not work as intended and messages",
                " may be dropped. This value increases the PoV and should therefore not be picked too",
                " high. Governance needs to pay attention to not open more channels than this value."
              ]
            },
            {
              "name": "MaxPageSize",
              "ty": 4,
              "value": [
                0,
                156,
                1,
                0
              ],
              "docs": [
                " The maximal page size for HRMP message pages.",
                "",
                " A lower limit can be set dynamically, but this is the hard-limit for the PoV worst case",
                " benchmarking. The limit for the size of a message is slightly below this, since some",
                " overhead is incurred for encoding the format."
              ]
            }
          ],
          "error": {
            "ty": 276
          },
          "index": 30,
          "docs": []
        },
        {
          "name": "PolkadotXcm",
          "storage": {
            "prefix": "PolkadotXcm",
            "entries": [
              {
                "name": "QueryCounter",
                "modifier": "Default",
                "ty": {
                  "Plain": 12
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The latest available query index."
                ]
              },
              {
                "name": "Queries",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 12,
                    "value": 277
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " The ongoing queries."
                ]
              },
              {
                "name": "AssetTraps",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 13,
                    "value": 4
                  }
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The existing asset traps.",
                  "",
                  " Key is the blake2 256 hash of (origin, versioned `Assets`) pair. Value is the number of",
                  " times this pair has been trapped (usually just 1 if it exists at all)."
                ]
              },
              {
                "name": "SafeXcmVersion",
                "modifier": "Optional",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0
                ],
                "docs": [
                  " Default version to encode XCM when latest version of destination is unknown. If `None`,",
                  " then the destinations whose XCM version is unknown are considered unreachable."
                ]
              },
              {
                "name": "SupportedVersion",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat",
                      "Blake2_128Concat"
                    ],
                    "key": 291,
                    "value": 4
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " The Latest versions that we know various locations support."
                ]
              },
              {
                "name": "VersionNotifiers",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat",
                      "Blake2_128Concat"
                    ],
                    "key": 291,
                    "value": 12
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " All locations that we have requested version notifications from."
                ]
              },
              {
                "name": "VersionNotifyTargets",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat",
                      "Blake2_128Concat"
                    ],
                    "key": 291,
                    "value": 292
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " The target locations that are subscribed to our version changes, as well as the most recent",
                  " of our versions we informed them of."
                ]
              },
              {
                "name": "VersionDiscoveryQueue",
                "modifier": "Default",
                "ty": {
                  "Plain": 293
                },
                "default": [
                  0
                ],
                "docs": [
                  " Destinations whose latest XCM version we would like to know. Duplicates not allowed, and",
                  " the `u32` counter is the number of times that a send to the destination has been attempted,",
                  " which is used as a prioritization."
                ]
              },
              {
                "name": "CurrentMigration",
                "modifier": "Optional",
                "ty": {
                  "Plain": 296
                },
                "default": [
                  0
                ],
                "docs": [
                  " The current migration's stage, if any."
                ]
              },
              {
                "name": "RemoteLockedFungibles",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat",
                      "Blake2_128Concat",
                      "Blake2_128Concat"
                    ],
                    "key": 298,
                    "value": 300
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Fungible assets which we know are locked on a remote chain."
                ]
              },
              {
                "name": "LockedFungibles",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 0,
                    "value": 304
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Fungible assets which we know are locked on this chain."
                ]
              },
              {
                "name": "XcmExecutionSuspended",
                "modifier": "Default",
                "ty": {
                  "Plain": 8
                },
                "default": [
                  0
                ],
                "docs": [
                  " Global suspension state of the XCM executor."
                ]
              },
              {
                "name": "ShouldRecordXcm",
                "modifier": "Default",
                "ty": {
                  "Plain": 8
                },
                "default": [
                  0
                ],
                "docs": [
                  " Whether or not incoming XCMs (both executed locally and received) should be recorded.",
                  " Only one XCM program will be recorded at a time.",
                  " This is meant to be used in runtime APIs, and it's advised it stays false",
                  " for all other use cases, so as to not degrade regular performance.",
                  "",
                  " Only relevant if this pallet is being used as the [`xcm_executor::traits::RecordXcm`]",
                  " implementation in the XCM executor configuration."
                ]
              },
              {
                "name": "RecordedXcm",
                "modifier": "Optional",
                "ty": {
                  "Plain": 67
                },
                "default": [
                  0
                ],
                "docs": [
                  " If [`ShouldRecordXcm`] is set to true, then the last XCM program executed locally",
                  " will be stored here.",
                  " Runtime APIs can fetch the XCM that was executed by accessing this value.",
                  "",
                  " Only relevant if this pallet is being used as the [`xcm_executor::traits::RecordXcm`]",
                  " implementation in the XCM executor configuration."
                ]
              }
            ]
          },
          "calls": {
            "ty": 307
          },
          "event": {
            "ty": 51
          },
          "constants": [],
          "error": {
            "ty": 337
          },
          "index": 31,
          "docs": []
        },
        {
          "name": "CumulusXcm",
          "storage": null,
          "calls": {
            "ty": 338
          },
          "event": {
            "ty": 116
          },
          "constants": [],
          "error": null,
          "index": 32,
          "docs": []
        },
        {
          "name": "ToRococoXcmRouter",
          "storage": {
            "prefix": "ToRococoXcmRouter",
            "entries": [
              {
                "name": "Bridge",
                "modifier": "Default",
                "ty": {
                  "Plain": 339
                },
                "default": [
                  0,
                  0,
                  100,
                  167,
                  179,
                  182,
                  224,
                  13,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " Bridge that we are using.",
                  "",
                  " **bridges-v1** assumptions: all outbound messages through this router are using single lane",
                  " and to single remote consensus. If there is some other remote consensus that uses the same",
                  " bridge hub, the separate pallet instance shall be used, In `v2` we'll have all required",
                  " primitives (lane-id aka bridge-id, derived from XCM locations) to support multiple  bridges",
                  " by the same pallet instance."
                ]
              }
            ]
          },
          "calls": {
            "ty": 340
          },
          "event": null,
          "constants": [],
          "error": null,
          "index": 34,
          "docs": []
        },
        {
          "name": "MessageQueue",
          "storage": {
            "prefix": "MessageQueue",
            "entries": [
              {
                "name": "BookStateFor",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 118,
                    "value": 341
                  }
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The index of the first and last (non-empty) pages."
                ]
              },
              {
                "name": "ServiceHead",
                "modifier": "Optional",
                "ty": {
                  "Plain": 118
                },
                "default": [
                  0
                ],
                "docs": [
                  " The origin at which we should begin servicing."
                ]
              },
              {
                "name": "Pages",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat",
                      "Twox64Concat"
                    ],
                    "key": 344,
                    "value": 345
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " The map of page indices to pages."
                ]
              }
            ]
          },
          "calls": {
            "ty": 347
          },
          "event": {
            "ty": 117
          },
          "constants": [
            {
              "name": "HeapSize",
              "ty": 4,
              "value": [
                0,
                156,
                1,
                0
              ],
              "docs": [
                " The size of the page; this implies the maximum message size which can be sent.",
                "",
                " A good value depends on the expected message sizes, their weights, the weight that is",
                " available for processing them and the maximal needed message size. The maximal message",
                " size is slightly lower than this as defined by [`MaxMessageLenOf`]."
              ]
            },
            {
              "name": "MaxStale",
              "ty": 4,
              "value": [
                8,
                0,
                0,
                0
              ],
              "docs": [
                " The maximum number of stale pages (i.e. of overweight messages) allowed before culling",
                " can happen. Once there are more stale pages than this, then historical pages may be",
                " dropped, even if they contain unprocessed overweight messages."
              ]
            },
            {
              "name": "ServiceWeight",
              "ty": 173,
              "value": [
                1,
                7,
                0,
                88,
                64,
                251,
                162,
                2,
                0,
                112,
                0
              ],
              "docs": [
                " The amount of weight (if any) which should be provided to the message queue for",
                " servicing enqueued items `on_initialize`.",
                "",
                " This may be legitimately `None` in the case that you will call",
                " `ServiceQueues::service_queues` manually or set [`Self::IdleMaxServiceWeight`] to have",
                " it run in `on_idle`."
              ]
            },
            {
              "name": "IdleMaxServiceWeight",
              "ty": 173,
              "value": [
                1,
                7,
                0,
                88,
                64,
                251,
                162,
                2,
                0,
                112,
                0
              ],
              "docs": [
                " The maximum amount of weight (if any) to be used from remaining weight `on_idle` which",
                " should be provided to the message queue for servicing enqueued items `on_idle`.",
                " Useful for parachains to process messages at the same block they are received.",
                "",
                " If `None`, it will not call `ServiceQueues::service_queues` in `on_idle`."
              ]
            }
          ],
          "error": {
            "ty": 348
          },
          "index": 35,
          "docs": []
        },
        {
          "name": "Utility",
          "storage": null,
          "calls": {
            "ty": 349
          },
          "event": {
            "ty": 121
          },
          "constants": [
            {
              "name": "batched_calls_limit",
              "ty": 4,
              "value": [
                170,
                42,
                0,
                0
              ],
              "docs": [
                " The limit on the number of batched calls."
              ]
            }
          ],
          "error": {
            "ty": 399
          },
          "index": 40,
          "docs": []
        },
        {
          "name": "Multisig",
          "storage": {
            "prefix": "Multisig",
            "entries": [
              {
                "name": "Multisigs",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat",
                      "Blake2_128Concat"
                    ],
                    "key": 400,
                    "value": 401
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " The set of open multisig operations."
                ]
              }
            ]
          },
          "calls": {
            "ty": 352
          },
          "event": {
            "ty": 124
          },
          "constants": [
            {
              "name": "DepositBase",
              "ty": 6,
              "value": [
                0,
                71,
                171,
                86,
                2,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The base amount of currency needed to reserve for creating a multisig execution or to",
                " store a dispatch call for later.",
                "",
                " This is held for an additional storage item whose value size is",
                " `4 + sizeof((BlockNumber, Balance, AccountId))` bytes and whose key size is",
                " `32 + sizeof(AccountId)` bytes."
              ]
            },
            {
              "name": "DepositFactor",
              "ty": 6,
              "value": [
                0,
                36,
                244,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The amount of currency needed per unit threshold when creating a multisig execution.",
                "",
                " This is held for adding 32 bytes more into a pre-existing storage value."
              ]
            },
            {
              "name": "MaxSignatories",
              "ty": 4,
              "value": [
                100,
                0,
                0,
                0
              ],
              "docs": [
                " The maximum amount of signatories allowed in the multisig."
              ]
            }
          ],
          "error": {
            "ty": 403
          },
          "index": 41,
          "docs": []
        },
        {
          "name": "Proxy",
          "storage": {
            "prefix": "Proxy",
            "entries": [
              {
                "name": "Proxies",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 0,
                    "value": 404
                  }
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The set of account proxies. Maps the account which has delegated to the accounts",
                  " which are being delegated to, together with the amount held on deposit."
                ]
              },
              {
                "name": "Announcements",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 0,
                    "value": 408
                  }
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The announcements made by the proxy (key)."
                ]
              }
            ]
          },
          "calls": {
            "ty": 354
          },
          "event": {
            "ty": 126
          },
          "constants": [
            {
              "name": "ProxyDepositBase",
              "ty": 6,
              "value": [
                0,
                17,
                61,
                85,
                2,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The base amount of currency needed to reserve for creating a proxy.",
                "",
                " This is held for an additional storage item whose value size is",
                " `sizeof(Balance)` bytes and whose key size is `sizeof(AccountId)` bytes."
              ]
            },
            {
              "name": "ProxyDepositFactor",
              "ty": 6,
              "value": [
                32,
                197,
                251,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The amount of currency needed per proxy added.",
                "",
                " This is held for adding 32 bytes plus an instance of `ProxyType` more into a",
                " pre-existing storage value. Thus, when configuring `ProxyDepositFactor` one should take",
                " into account `32 + proxy_type.encode().len()` bytes of data."
              ]
            },
            {
              "name": "MaxProxies",
              "ty": 4,
              "value": [
                32,
                0,
                0,
                0
              ],
              "docs": [
                " The maximum amount of proxies allowed for a single account."
              ]
            },
            {
              "name": "MaxPending",
              "ty": 4,
              "value": [
                32,
                0,
                0,
                0
              ],
              "docs": [
                " The maximum amount of time-delayed announcements that are allowed to be pending."
              ]
            },
            {
              "name": "AnnouncementDepositBase",
              "ty": 6,
              "value": [
                0,
                26,
                122,
                85,
                2,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The base amount of currency needed to reserve for creating an announcement.",
                "",
                " This is held when a new storage item holding a `Balance` is created (typically 16",
                " bytes)."
              ]
            },
            {
              "name": "AnnouncementDepositFactor",
              "ty": 6,
              "value": [
                64,
                138,
                247,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The amount of currency needed per announcement made.",
                "",
                " This is held for adding an `AccountId`, `Hash` and `BlockNumber` (typically 68 bytes)",
                " into a pre-existing storage value."
              ]
            }
          ],
          "error": {
            "ty": 412
          },
          "index": 42,
          "docs": []
        },
        {
          "name": "Assets",
          "storage": {
            "prefix": "Assets",
            "entries": [
              {
                "name": "Asset",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 4,
                    "value": 413
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Details of an asset."
                ]
              },
              {
                "name": "Account",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat",
                      "Blake2_128Concat"
                    ],
                    "key": 415,
                    "value": 416
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " The holdings of a specific account for a specific asset."
                ]
              },
              {
                "name": "Approvals",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat",
                      "Blake2_128Concat",
                      "Blake2_128Concat"
                    ],
                    "key": 419,
                    "value": 420
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Approved balance transfers. First balance is the amount approved for transfer. Second",
                  " is the amount of `T::Currency` reserved for storing this.",
                  " First key is the asset ID, second key is the owner and third key is the delegate."
                ]
              },
              {
                "name": "Metadata",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 4,
                    "value": 421
                  }
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " Metadata of an asset."
                ]
              },
              {
                "name": "NextAssetId",
                "modifier": "Optional",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0
                ],
                "docs": [
                  " The asset ID enforced for the next asset creation, if any present. Otherwise, this storage",
                  " item has no effect.",
                  "",
                  " This can be useful for setting up constraints for IDs of the new assets. For example, by",
                  " providing an initial [`NextAssetId`] and using the [`crate::AutoIncAssetId`] callback, an",
                  " auto-increment model can be applied to all new asset IDs.",
                  "",
                  " The initial next asset ID can be set using the [`GenesisConfig`] or the",
                  " [SetNextAssetId](`migration::next_asset_id::SetNextAssetId`) migration."
                ]
              }
            ]
          },
          "calls": {
            "ty": 356
          },
          "event": {
            "ty": 129
          },
          "constants": [
            {
              "name": "RemoveItemsLimit",
              "ty": 4,
              "value": [
                232,
                3,
                0,
                0
              ],
              "docs": [
                " Max number of items to destroy per `destroy_accounts` and `destroy_approvals` call.",
                "",
                " Must be configured to result in a weight that makes each call fit in a block."
              ]
            },
            {
              "name": "AssetDeposit",
              "ty": 6,
              "value": [
                0,
                232,
                118,
                72,
                23,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The basic amount of funds that must be reserved for an asset."
              ]
            },
            {
              "name": "AssetAccountDeposit",
              "ty": 6,
              "value": [
                0,
                246,
                133,
                84,
                2,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The amount of funds that must be reserved for a non-provider asset account to be",
                " maintained."
              ]
            },
            {
              "name": "MetadataDepositBase",
              "ty": 6,
              "value": [
                128,
                176,
                18,
                86,
                2,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The basic amount of funds that must be reserved when adding metadata to your asset."
              ]
            },
            {
              "name": "MetadataDepositPerByte",
              "ty": 6,
              "value": [
                32,
                161,
                7,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The additional funds that must be reserved for the number of bytes you store in your",
                " metadata."
              ]
            },
            {
              "name": "ApprovalDeposit",
              "ty": 6,
              "value": [
                0,
                202,
                154,
                59,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The amount of funds that must be reserved when creating a new approval."
              ]
            },
            {
              "name": "StringLimit",
              "ty": 4,
              "value": [
                50,
                0,
                0,
                0
              ],
              "docs": [
                " The maximum length of a name or symbol stored on-chain."
              ]
            }
          ],
          "error": {
            "ty": 423
          },
          "index": 50,
          "docs": []
        },
        {
          "name": "Uniques",
          "storage": {
            "prefix": "Uniques",
            "entries": [
              {
                "name": "Class",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 4,
                    "value": 424
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Details of a collection."
                ]
              },
              {
                "name": "OwnershipAcceptance",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 0,
                    "value": 4
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " The collection, if any, of which an account is willing to take ownership."
                ]
              },
              {
                "name": "Account",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat",
                      "Blake2_128Concat",
                      "Blake2_128Concat"
                    ],
                    "key": 425,
                    "value": 123
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " The items held by any given account; set out this way so that items owned by a single",
                  " account can be enumerated."
                ]
              },
              {
                "name": "ClassAccount",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat",
                      "Blake2_128Concat"
                    ],
                    "key": 426,
                    "value": 123
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " The collections owned by any given account; set out this way so that collections owned by",
                  " a single account can be enumerated."
                ]
              },
              {
                "name": "Asset",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat",
                      "Blake2_128Concat"
                    ],
                    "key": 162,
                    "value": 427
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " The items in existence and their ownership details."
                ]
              },
              {
                "name": "ClassMetadataOf",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 4,
                    "value": 428
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Metadata of a collection."
                ]
              },
              {
                "name": "InstanceMetadataOf",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat",
                      "Blake2_128Concat"
                    ],
                    "key": 162,
                    "value": 429
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Metadata of an item."
                ]
              },
              {
                "name": "Attribute",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat",
                      "Blake2_128Concat",
                      "Blake2_128Concat"
                    ],
                    "key": 430,
                    "value": 431
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Attributes of a collection."
                ]
              },
              {
                "name": "ItemPriceOf",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat",
                      "Blake2_128Concat"
                    ],
                    "key": 162,
                    "value": 432
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Price of an asset instance."
                ]
              },
              {
                "name": "CollectionMaxSupply",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 4,
                    "value": 4
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Keeps track of the number of items a collection might have."
                ]
              }
            ]
          },
          "calls": {
            "ty": 357
          },
          "event": {
            "ty": 130
          },
          "constants": [
            {
              "name": "CollectionDeposit",
              "ty": 6,
              "value": [
                0,
                232,
                118,
                72,
                23,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The basic amount of funds that must be reserved for collection."
              ]
            },
            {
              "name": "ItemDeposit",
              "ty": 6,
              "value": [
                0,
                202,
                154,
                59,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The basic amount of funds that must be reserved for an item."
              ]
            },
            {
              "name": "MetadataDepositBase",
              "ty": 6,
              "value": [
                32,
                21,
                228,
                87,
                2,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The basic amount of funds that must be reserved when adding metadata to your item."
              ]
            },
            {
              "name": "AttributeDepositBase",
              "ty": 6,
              "value": [
                0,
                228,
                11,
                84,
                2,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The basic amount of funds that must be reserved when adding an attribute to an item."
              ]
            },
            {
              "name": "DepositPerByte",
              "ty": 6,
              "value": [
                32,
                161,
                7,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The additional funds that must be reserved for the number of bytes store in metadata,",
                " either \"normal\" metadata or attribute metadata."
              ]
            },
            {
              "name": "StringLimit",
              "ty": 4,
              "value": [
                128,
                0,
                0,
                0
              ],
              "docs": [
                " The maximum length of data stored on-chain."
              ]
            },
            {
              "name": "KeyLimit",
              "ty": 4,
              "value": [
                32,
                0,
                0,
                0
              ],
              "docs": [
                " The maximum length of an attribute key."
              ]
            },
            {
              "name": "ValueLimit",
              "ty": 4,
              "value": [
                64,
                0,
                0,
                0
              ],
              "docs": [
                " The maximum length of an attribute value."
              ]
            }
          ],
          "error": {
            "ty": 433
          },
          "index": 51,
          "docs": []
        },
        {
          "name": "Nfts",
          "storage": {
            "prefix": "Nfts",
            "entries": [
              {
                "name": "Collection",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 4,
                    "value": 434
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Details of a collection."
                ]
              },
              {
                "name": "OwnershipAcceptance",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 0,
                    "value": 4
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " The collection, if any, of which an account is willing to take ownership."
                ]
              },
              {
                "name": "Account",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat",
                      "Blake2_128Concat",
                      "Blake2_128Concat"
                    ],
                    "key": 425,
                    "value": 123
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " The items held by any given account; set out this way so that items owned by a single",
                  " account can be enumerated."
                ]
              },
              {
                "name": "CollectionAccount",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat",
                      "Blake2_128Concat"
                    ],
                    "key": 426,
                    "value": 123
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " The collections owned by any given account; set out this way so that collections owned by",
                  " a single account can be enumerated."
                ]
              },
              {
                "name": "CollectionRoleOf",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat",
                      "Blake2_128Concat"
                    ],
                    "key": 415,
                    "value": 435
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " The items in existence and their ownership details.",
                  " Stores collection roles as per account."
                ]
              },
              {
                "name": "Item",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat",
                      "Blake2_128Concat"
                    ],
                    "key": 162,
                    "value": 437
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " The items in existence and their ownership details."
                ]
              },
              {
                "name": "CollectionMetadataOf",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 4,
                    "value": 443
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Metadata of a collection."
                ]
              },
              {
                "name": "ItemMetadataOf",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat",
                      "Blake2_128Concat"
                    ],
                    "key": 162,
                    "value": 444
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Metadata of an item."
                ]
              },
              {
                "name": "Attribute",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat",
                      "Blake2_128Concat",
                      "Blake2_128Concat",
                      "Blake2_128Concat"
                    ],
                    "key": 446,
                    "value": 447
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Attributes of a collection."
                ]
              },
              {
                "name": "ItemPriceOf",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat",
                      "Blake2_128Concat"
                    ],
                    "key": 162,
                    "value": 432
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " A price of an item."
                ]
              },
              {
                "name": "ItemAttributesApprovalsOf",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat",
                      "Blake2_128Concat"
                    ],
                    "key": 162,
                    "value": 449
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Item attribute approvals."
                ]
              },
              {
                "name": "NextCollectionId",
                "modifier": "Optional",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0
                ],
                "docs": [
                  " Stores the `CollectionId` that is going to be used for the next collection.",
                  " This gets incremented whenever a new collection is created."
                ]
              },
              {
                "name": "PendingSwapOf",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat",
                      "Blake2_128Concat"
                    ],
                    "key": 162,
                    "value": 451
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Handles all the pending swaps."
                ]
              },
              {
                "name": "CollectionConfigOf",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 4,
                    "value": 362
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Config of a collection."
                ]
              },
              {
                "name": "ItemConfigOf",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat",
                      "Blake2_128Concat"
                    ],
                    "key": 162,
                    "value": 372
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Config of an item."
                ]
              }
            ]
          },
          "calls": {
            "ty": 361
          },
          "event": {
            "ty": 137
          },
          "constants": [
            {
              "name": "CollectionDeposit",
              "ty": 6,
              "value": [
                0,
                232,
                118,
                72,
                23,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The basic amount of funds that must be reserved for collection."
              ]
            },
            {
              "name": "ItemDeposit",
              "ty": 6,
              "value": [
                0,
                202,
                154,
                59,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The basic amount of funds that must be reserved for an item."
              ]
            },
            {
              "name": "MetadataDepositBase",
              "ty": 6,
              "value": [
                32,
                21,
                228,
                87,
                2,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The basic amount of funds that must be reserved when adding metadata to your item."
              ]
            },
            {
              "name": "AttributeDepositBase",
              "ty": 6,
              "value": [
                0,
                228,
                11,
                84,
                2,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The basic amount of funds that must be reserved when adding an attribute to an item."
              ]
            },
            {
              "name": "DepositPerByte",
              "ty": 6,
              "value": [
                32,
                161,
                7,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The additional funds that must be reserved for the number of bytes store in metadata,",
                " either \"normal\" metadata or attribute metadata."
              ]
            },
            {
              "name": "StringLimit",
              "ty": 4,
              "value": [
                0,
                1,
                0,
                0
              ],
              "docs": [
                " The maximum length of data stored on-chain."
              ]
            },
            {
              "name": "KeyLimit",
              "ty": 4,
              "value": [
                64,
                0,
                0,
                0
              ],
              "docs": [
                " The maximum length of an attribute key."
              ]
            },
            {
              "name": "ValueLimit",
              "ty": 4,
              "value": [
                0,
                1,
                0,
                0
              ],
              "docs": [
                " The maximum length of an attribute value."
              ]
            },
            {
              "name": "ApprovalsLimit",
              "ty": 4,
              "value": [
                20,
                0,
                0,
                0
              ],
              "docs": [
                " The maximum approvals an item could have."
              ]
            },
            {
              "name": "ItemAttributesApprovalsLimit",
              "ty": 4,
              "value": [
                30,
                0,
                0,
                0
              ],
              "docs": [
                " The maximum attributes approvals an item could have."
              ]
            },
            {
              "name": "MaxTips",
              "ty": 4,
              "value": [
                10,
                0,
                0,
                0
              ],
              "docs": [
                " The max number of tips a user could send."
              ]
            },
            {
              "name": "MaxDeadlineDuration",
              "ty": 4,
              "value": [
                0,
                26,
                79,
                0
              ],
              "docs": [
                " The max duration in blocks for deadlines."
              ]
            },
            {
              "name": "MaxAttributesPerCall",
              "ty": 4,
              "value": [
                10,
                0,
                0,
                0
              ],
              "docs": [
                " The max number of attributes a user could set per call."
              ]
            },
            {
              "name": "Features",
              "ty": 452,
              "value": [
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " Disables some of pallet's features."
              ]
            }
          ],
          "error": {
            "ty": 454
          },
          "index": 52,
          "docs": []
        },
        {
          "name": "ForeignAssets",
          "storage": {
            "prefix": "ForeignAssets",
            "entries": [
              {
                "name": "Asset",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 37,
                    "value": 413
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Details of an asset."
                ]
              },
              {
                "name": "Account",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat",
                      "Blake2_128Concat"
                    ],
                    "key": 455,
                    "value": 416
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " The holdings of a specific account for a specific asset."
                ]
              },
              {
                "name": "Approvals",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat",
                      "Blake2_128Concat",
                      "Blake2_128Concat"
                    ],
                    "key": 456,
                    "value": 420
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Approved balance transfers. First balance is the amount approved for transfer. Second",
                  " is the amount of `T::Currency` reserved for storing this.",
                  " First key is the asset ID, second key is the owner and third key is the delegate."
                ]
              },
              {
                "name": "Metadata",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 37,
                    "value": 457
                  }
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " Metadata of an asset."
                ]
              },
              {
                "name": "NextAssetId",
                "modifier": "Optional",
                "ty": {
                  "Plain": 37
                },
                "default": [
                  0
                ],
                "docs": [
                  " The asset ID enforced for the next asset creation, if any present. Otherwise, this storage",
                  " item has no effect.",
                  "",
                  " This can be useful for setting up constraints for IDs of the new assets. For example, by",
                  " providing an initial [`NextAssetId`] and using the [`crate::AutoIncAssetId`] callback, an",
                  " auto-increment model can be applied to all new asset IDs.",
                  "",
                  " The initial next asset ID can be set using the [`GenesisConfig`] or the",
                  " [SetNextAssetId](`migration::next_asset_id::SetNextAssetId`) migration."
                ]
              }
            ]
          },
          "calls": {
            "ty": 382
          },
          "event": {
            "ty": 144
          },
          "constants": [
            {
              "name": "RemoveItemsLimit",
              "ty": 4,
              "value": [
                232,
                3,
                0,
                0
              ],
              "docs": [
                " Max number of items to destroy per `destroy_accounts` and `destroy_approvals` call.",
                "",
                " Must be configured to result in a weight that makes each call fit in a block."
              ]
            },
            {
              "name": "AssetDeposit",
              "ty": 6,
              "value": [
                0,
                232,
                118,
                72,
                23,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The basic amount of funds that must be reserved for an asset."
              ]
            },
            {
              "name": "AssetAccountDeposit",
              "ty": 6,
              "value": [
                0,
                246,
                133,
                84,
                2,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The amount of funds that must be reserved for a non-provider asset account to be",
                " maintained."
              ]
            },
            {
              "name": "MetadataDepositBase",
              "ty": 6,
              "value": [
                128,
                176,
                18,
                86,
                2,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The basic amount of funds that must be reserved when adding metadata to your asset."
              ]
            },
            {
              "name": "MetadataDepositPerByte",
              "ty": 6,
              "value": [
                32,
                161,
                7,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The additional funds that must be reserved for the number of bytes you store in your",
                " metadata."
              ]
            },
            {
              "name": "ApprovalDeposit",
              "ty": 6,
              "value": [
                0,
                202,
                154,
                59,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The amount of funds that must be reserved when creating a new approval."
              ]
            },
            {
              "name": "StringLimit",
              "ty": 4,
              "value": [
                50,
                0,
                0,
                0
              ],
              "docs": [
                " The maximum length of a name or symbol stored on-chain."
              ]
            }
          ],
          "error": {
            "ty": 459
          },
          "index": 53,
          "docs": []
        },
        {
          "name": "NftFractionalization",
          "storage": {
            "prefix": "NftFractionalization",
            "entries": [
              {
                "name": "NftToAsset",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 162,
                    "value": 460
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Keeps track of the corresponding NFT ID, asset ID and amount minted."
                ]
              }
            ]
          },
          "calls": {
            "ty": 383
          },
          "event": {
            "ty": 145
          },
          "constants": [
            {
              "name": "Deposit",
              "ty": 6,
              "value": [
                0,
                232,
                118,
                72,
                23,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The deposit paid by the user locking an NFT. The deposit is returned to the original NFT",
                " owner when the asset is unified and the NFT is unlocked."
              ]
            },
            {
              "name": "PalletId",
              "ty": 461,
              "value": [
                102,
                114,
                97,
                99,
                116,
                105,
                111,
                110
              ],
              "docs": [
                " The pallet's id, used for deriving its sovereign account ID."
              ]
            },
            {
              "name": "NewAssetSymbol",
              "ty": 422,
              "value": [
                16,
                70,
                82,
                65,
                67
              ],
              "docs": [
                " The newly created asset's symbol."
              ]
            },
            {
              "name": "NewAssetName",
              "ty": 422,
              "value": [
                16,
                70,
                114,
                97,
                99
              ],
              "docs": [
                " The newly created asset's name."
              ]
            },
            {
              "name": "StringLimit",
              "ty": 4,
              "value": [
                50,
                0,
                0,
                0
              ],
              "docs": [
                " The maximum length of a name or symbol stored on-chain."
              ]
            }
          ],
          "error": {
            "ty": 462
          },
          "index": 54,
          "docs": []
        },
        {
          "name": "PoolAssets",
          "storage": {
            "prefix": "PoolAssets",
            "entries": [
              {
                "name": "Asset",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 4,
                    "value": 413
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Details of an asset."
                ]
              },
              {
                "name": "Account",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat",
                      "Blake2_128Concat"
                    ],
                    "key": 415,
                    "value": 416
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " The holdings of a specific account for a specific asset."
                ]
              },
              {
                "name": "Approvals",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat",
                      "Blake2_128Concat",
                      "Blake2_128Concat"
                    ],
                    "key": 419,
                    "value": 420
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Approved balance transfers. First balance is the amount approved for transfer. Second",
                  " is the amount of `T::Currency` reserved for storing this.",
                  " First key is the asset ID, second key is the owner and third key is the delegate."
                ]
              },
              {
                "name": "Metadata",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 4,
                    "value": 463
                  }
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " Metadata of an asset."
                ]
              },
              {
                "name": "NextAssetId",
                "modifier": "Optional",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0
                ],
                "docs": [
                  " The asset ID enforced for the next asset creation, if any present. Otherwise, this storage",
                  " item has no effect.",
                  "",
                  " This can be useful for setting up constraints for IDs of the new assets. For example, by",
                  " providing an initial [`NextAssetId`] and using the [`crate::AutoIncAssetId`] callback, an",
                  " auto-increment model can be applied to all new asset IDs.",
                  "",
                  " The initial next asset ID can be set using the [`GenesisConfig`] or the",
                  " [SetNextAssetId](`migration::next_asset_id::SetNextAssetId`) migration."
                ]
              }
            ]
          },
          "calls": {
            "ty": 384
          },
          "event": {
            "ty": 146
          },
          "constants": [
            {
              "name": "RemoveItemsLimit",
              "ty": 4,
              "value": [
                232,
                3,
                0,
                0
              ],
              "docs": [
                " Max number of items to destroy per `destroy_accounts` and `destroy_approvals` call.",
                "",
                " Must be configured to result in a weight that makes each call fit in a block."
              ]
            },
            {
              "name": "AssetDeposit",
              "ty": 6,
              "value": [
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The basic amount of funds that must be reserved for an asset."
              ]
            },
            {
              "name": "AssetAccountDeposit",
              "ty": 6,
              "value": [
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The amount of funds that must be reserved for a non-provider asset account to be",
                " maintained."
              ]
            },
            {
              "name": "MetadataDepositBase",
              "ty": 6,
              "value": [
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The basic amount of funds that must be reserved when adding metadata to your asset."
              ]
            },
            {
              "name": "MetadataDepositPerByte",
              "ty": 6,
              "value": [
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The additional funds that must be reserved for the number of bytes you store in your",
                " metadata."
              ]
            },
            {
              "name": "ApprovalDeposit",
              "ty": 6,
              "value": [
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The amount of funds that must be reserved when creating a new approval."
              ]
            },
            {
              "name": "StringLimit",
              "ty": 4,
              "value": [
                50,
                0,
                0,
                0
              ],
              "docs": [
                " The maximum length of a name or symbol stored on-chain."
              ]
            }
          ],
          "error": {
            "ty": 465
          },
          "index": 55,
          "docs": []
        },
        {
          "name": "AssetConversion",
          "storage": {
            "prefix": "AssetConversion",
            "entries": [
              {
                "name": "Pools",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 148,
                    "value": 466
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Map from `PoolAssetId` to `PoolInfo`. This establishes whether a pool has been officially",
                  " created rather than people sending tokens directly to a pool's public account."
                ]
              },
              {
                "name": "NextPoolAssetId",
                "modifier": "Optional",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0
                ],
                "docs": [
                  " Stores the `PoolAssetId` that is going to be used for the next lp token.",
                  " This gets incremented whenever a new lp pool is created."
                ]
              }
            ]
          },
          "calls": {
            "ty": 385
          },
          "event": {
            "ty": 147
          },
          "constants": [
            {
              "name": "LPFee",
              "ty": 4,
              "value": [
                3,
                0,
                0,
                0
              ],
              "docs": [
                " A % the liquidity providers will take of every swap. Represents 10ths of a percent."
              ]
            },
            {
              "name": "PoolSetupFee",
              "ty": 6,
              "value": [
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " A one-time fee to setup the pool."
              ]
            },
            {
              "name": "PoolSetupFeeAsset",
              "ty": 37,
              "value": [
                1,
                0
              ],
              "docs": [
                " Asset class from [`Config::Assets`] used to pay the [`Config::PoolSetupFee`]."
              ]
            },
            {
              "name": "LiquidityWithdrawalFee",
              "ty": 149,
              "value": [
                0,
                0,
                0,
                0
              ],
              "docs": [
                " A fee to withdraw the liquidity."
              ]
            },
            {
              "name": "MintMinLiquidity",
              "ty": 6,
              "value": [
                100,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The minimum LP token amount that could be minted. Ameliorates rounding errors."
              ]
            },
            {
              "name": "MaxSwapPathLength",
              "ty": 4,
              "value": [
                3,
                0,
                0,
                0
              ],
              "docs": [
                " The max number of hops in a swap."
              ]
            },
            {
              "name": "PalletId",
              "ty": 461,
              "value": [
                112,
                121,
                47,
                97,
                115,
                99,
                111,
                110
              ],
              "docs": [
                " The pallet's id, used for deriving its sovereign account ID."
              ]
            }
          ],
          "error": {
            "ty": 467
          },
          "index": 56,
          "docs": []
        },
        {
          "name": "AssetsFreezer",
          "storage": {
            "prefix": "AssetsFreezer",
            "entries": [
              {
                "name": "Freezes",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat",
                      "Blake2_128Concat"
                    ],
                    "key": 415,
                    "value": 468
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " A map that stores freezes applied on an account for a given AssetId."
                ]
              },
              {
                "name": "FrozenBalances",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat",
                      "Blake2_128Concat"
                    ],
                    "key": 415,
                    "value": 6
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " A map that stores the current total frozen balance for every account on a given AssetId."
                ]
              }
            ]
          },
          "calls": null,
          "event": {
            "ty": 152
          },
          "constants": [],
          "error": {
            "ty": 472
          },
          "index": 57,
          "docs": []
        },
        {
          "name": "ForeignAssetsFreezer",
          "storage": {
            "prefix": "ForeignAssetsFreezer",
            "entries": [
              {
                "name": "Freezes",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat",
                      "Blake2_128Concat"
                    ],
                    "key": 455,
                    "value": 468
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " A map that stores freezes applied on an account for a given AssetId."
                ]
              },
              {
                "name": "FrozenBalances",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat",
                      "Blake2_128Concat"
                    ],
                    "key": 455,
                    "value": 6
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " A map that stores the current total frozen balance for every account on a given AssetId."
                ]
              }
            ]
          },
          "calls": null,
          "event": {
            "ty": 153
          },
          "constants": [],
          "error": {
            "ty": 473
          },
          "index": 58,
          "docs": []
        },
        {
          "name": "PoolAssetsFreezer",
          "storage": {
            "prefix": "PoolAssetsFreezer",
            "entries": [
              {
                "name": "Freezes",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat",
                      "Blake2_128Concat"
                    ],
                    "key": 415,
                    "value": 468
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " A map that stores freezes applied on an account for a given AssetId."
                ]
              },
              {
                "name": "FrozenBalances",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat",
                      "Blake2_128Concat"
                    ],
                    "key": 415,
                    "value": 6
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " A map that stores the current total frozen balance for every account on a given AssetId."
                ]
              }
            ]
          },
          "calls": null,
          "event": {
            "ty": 154
          },
          "constants": [],
          "error": {
            "ty": 474
          },
          "index": 59,
          "docs": []
        },
        {
          "name": "StateTrieMigration",
          "storage": {
            "prefix": "StateTrieMigration",
            "entries": [
              {
                "name": "MigrationProcess",
                "modifier": "Default",
                "ty": {
                  "Plain": 390
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " Migration progress.",
                  "",
                  " This stores the snapshot of the last migrated keys. It can be set into motion and move",
                  " forward by any of the means provided by this pallet."
                ]
              },
              {
                "name": "AutoLimits",
                "modifier": "Default",
                "ty": {
                  "Plain": 388
                },
                "default": [
                  0
                ],
                "docs": [
                  " The limits that are imposed on automatic migrations.",
                  "",
                  " If set to None, then no automatic migration happens."
                ]
              },
              {
                "name": "SignedMigrationMaxLimits",
                "modifier": "Optional",
                "ty": {
                  "Plain": 389
                },
                "default": [
                  0
                ],
                "docs": [
                  " The maximum limits that the signed migration could use.",
                  "",
                  " If not set, no signed submission is allowed."
                ]
              }
            ]
          },
          "calls": {
            "ty": 387
          },
          "event": {
            "ty": 155
          },
          "constants": [
            {
              "name": "MaxKeyLen",
              "ty": 4,
              "value": [
                0,
                2,
                0,
                0
              ],
              "docs": [
                " Maximal number of bytes that a key can have.",
                "",
                " FRAME itself does not limit the key length.",
                " The concrete value must therefore depend on your storage usage.",
                " A [`frame_support::storage::StorageNMap`] for example can have an arbitrary number of",
                " keys which are then hashed and concatenated, resulting in arbitrarily long keys.",
                "",
                " Use the *state migration RPC* to retrieve the length of the longest key in your",
                " storage: <https://github.com/paritytech/substrate/issues/11642>",
                "",
                " The migration will halt with a `Halted` event if this value is too small.",
                " Since there is no real penalty from over-estimating, it is advised to use a large",
                " value. The default is 512 byte.",
                "",
                " Some key lengths for reference:",
                " - [`frame_support::storage::StorageValue`]: 32 byte",
                " - [`frame_support::storage::StorageMap`]: 64 byte",
                " - [`frame_support::storage::StorageDoubleMap`]: 96 byte",
                "",
                " For more info see",
                " <https://www.shawntabrizi.com/blog/substrate/querying-substrate-storage-via-rpc/>"
              ]
            }
          ],
          "error": {
            "ty": 157
          },
          "index": 70,
          "docs": []
        },
        {
          "name": "AssetConversionMigration",
          "storage": null,
          "calls": {
            "ty": 393
          },
          "event": {
            "ty": 158
          },
          "constants": [],
          "error": {
            "ty": 475
          },
          "index": 200,
          "docs": []
        }
      ],
      "extrinsic": {
        "version": 4,
        "address_ty": 242,
        "call_ty": 351,
        "signature_ty": 378,
        "extra_ty": 476,
        "signed_extensions": [
          {
            "identifier": "CheckNonZeroSender",
            "ty": 477,
            "additional_signed": 123
          },
          {
            "identifier": "CheckSpecVersion",
            "ty": 478,
            "additional_signed": 4
          },
          {
            "identifier": "CheckTxVersion",
            "ty": 479,
            "additional_signed": 4
          },
          {
            "identifier": "CheckGenesis",
            "ty": 480,
            "additional_signed": 13
          },
          {
            "identifier": "CheckMortality",
            "ty": 481,
            "additional_signed": 13
          },
          {
            "identifier": "CheckNonce",
            "ty": 483,
            "additional_signed": 123
          },
          {
            "identifier": "CheckWeight",
            "ty": 484,
            "additional_signed": 123
          },
          {
            "identifier": "ChargeAssetTxPayment",
            "ty": 485,
            "additional_signed": 123
          },
          {
            "identifier": "StorageWeightReclaim",
            "ty": 486,
            "additional_signed": 123
          },
          {
            "identifier": "CheckMetadataHash",
            "ty": 487,
            "additional_signed": 32
          }
        ]
      },
      "ty": 489,
      "apis": [
        {
          "name": "AuraApi",
          "methods": [
            {
              "name": "slot_duration",
              "inputs": [],
              "output": 490,
              "docs": [
                " Returns the slot duration for Aura.",
                "",
                " Currently, only the value provided by this type at genesis will be used."
              ]
            },
            {
              "name": "authorities",
              "inputs": [],
              "output": 262,
              "docs": [
                " Return the current set of authorities."
              ]
            }
          ],
          "docs": [
            " API necessary for block authorship with aura."
          ]
        },
        {
          "name": "AuraUnincludedSegmentApi",
          "methods": [
            {
              "name": "can_build_upon",
              "inputs": [
                {
                  "name": "included_hash",
                  "ty": 13
                },
                {
                  "name": "slot",
                  "ty": 263
                }
              ],
              "output": 8,
              "docs": [
                " Whether it is legal to extend the chain, assuming the given block is the most",
                " recently included one as-of the relay parent that will be built against, and",
                " the given slot.",
                "",
                " This should be consistent with the logic the runtime uses when validating blocks to",
                " avoid issues.",
                "",
                " When the unincluded segment is empty, i.e. `included_hash == at`, where at is the block",
                " whose state we are querying against, this must always return `true` as long as the slot",
                " is more recent than the included block itself."
              ]
            }
          ],
          "docs": [
            " This runtime API is used to inform potential block authors whether they will",
            " have the right to author at a slot, assuming they have claimed the slot.",
            "",
            " In particular, this API allows Aura-based parachains to regulate their \"unincluded segment\",",
            " which is the section of the head of the chain which has not yet been made available in the",
            " relay chain.",
            "",
            " When the unincluded segment is short, Aura chains will allow authors to create multiple",
            " blocks per slot in order to build a backlog. When it is saturated, this API will limit",
            " the amount of blocks that can be created."
          ]
        },
        {
          "name": "Core",
          "methods": [
            {
              "name": "version",
              "inputs": [],
              "output": 177,
              "docs": [
                " Returns the version of the runtime."
              ]
            },
            {
              "name": "execute_block",
              "inputs": [
                {
                  "name": "block",
                  "ty": 491
                }
              ],
              "output": 123,
              "docs": [
                " Execute the given block."
              ]
            },
            {
              "name": "initialize_block",
              "inputs": [
                {
                  "name": "header",
                  "ty": 492
                }
              ],
              "output": 495,
              "docs": [
                " Initialize a block with the given header and return the runtime executive mode."
              ]
            }
          ],
          "docs": [
            " The `Core` runtime api that every Substrate runtime needs to implement."
          ]
        },
        {
          "name": "Metadata",
          "methods": [
            {
              "name": "metadata",
              "inputs": [],
              "output": 496,
              "docs": [
                " Returns the metadata of a runtime."
              ]
            },
            {
              "name": "metadata_at_version",
              "inputs": [
                {
                  "name": "version",
                  "ty": 4
                }
              ],
              "output": 497,
              "docs": [
                " Returns the metadata at a given version.",
                "",
                " If the given `version` isn't supported, this will return `None`.",
                " Use [`Self::metadata_versions`] to find out about supported metadata version of the runtime."
              ]
            },
            {
              "name": "metadata_versions",
              "inputs": [],
              "output": 132,
              "docs": [
                " Returns the supported metadata versions.",
                "",
                " This can be used to call `metadata_at_version`."
              ]
            }
          ],
          "docs": [
            " The `Metadata` api trait that returns metadata for the runtime."
          ]
        },
        {
          "name": "BlockBuilder",
          "methods": [
            {
              "name": "apply_extrinsic",
              "inputs": [
                {
                  "name": "extrinsic",
                  "ty": 493
                }
              ],
              "output": 498,
              "docs": [
                " Apply the given extrinsic.",
                "",
                " Returns an inclusion outcome which specifies if this extrinsic is included in",
                " this block or not."
              ]
            },
            {
              "name": "finalize_block",
              "inputs": [],
              "output": 492,
              "docs": [
                " Finish the current block."
              ]
            },
            {
              "name": "inherent_extrinsics",
              "inputs": [
                {
                  "name": "inherent",
                  "ty": 502
                }
              ],
              "output": 494,
              "docs": [
                " Generate inherent extrinsics. The inherent data will vary from chain to chain."
              ]
            },
            {
              "name": "check_inherents",
              "inputs": [
                {
                  "name": "block",
                  "ty": 491
                },
                {
                  "name": "data",
                  "ty": 502
                }
              ],
              "output": 506,
              "docs": [
                " Check that the inherents are valid. The inherent data will vary from chain to chain."
              ]
            }
          ],
          "docs": [
            " The `BlockBuilder` api trait that provides the required functionality for building a block."
          ]
        },
        {
          "name": "TaggedTransactionQueue",
          "methods": [
            {
              "name": "validate_transaction",
              "inputs": [
                {
                  "name": "source",
                  "ty": 507
                },
                {
                  "name": "tx",
                  "ty": 493
                },
                {
                  "name": "block_hash",
                  "ty": 13
                }
              ],
              "output": 508,
              "docs": [
                " Validate the transaction.",
                "",
                " This method is invoked by the transaction pool to learn details about given transaction.",
                " The implementation should make sure to verify the correctness of the transaction",
                " against current state. The given `block_hash` corresponds to the hash of the block",
                " that is used as current state.",
                "",
                " Note that this call may be performed by the pool multiple times and transactions",
                " might be verified in any possible order."
              ]
            }
          ],
          "docs": [
            " The `TaggedTransactionQueue` api trait for interfering with the transaction queue."
          ]
        },
        {
          "name": "OffchainWorkerApi",
          "methods": [
            {
              "name": "offchain_worker",
              "inputs": [
                {
                  "name": "header",
                  "ty": 492
                }
              ],
              "output": 123,
              "docs": [
                " Starts the off-chain task for given block header."
              ]
            }
          ],
          "docs": [
            " The offchain worker api."
          ]
        },
        {
          "name": "SessionKeys",
          "methods": [
            {
              "name": "generate_session_keys",
              "inputs": [
                {
                  "name": "seed",
                  "ty": 297
                }
              ],
              "output": 14,
              "docs": [
                " Generate a set of session keys with optionally using the given seed.",
                " The keys should be stored within the keystore exposed via runtime",
                " externalities.",
                "",
                " The seed needs to be a valid `utf8` string.",
                "",
                " Returns the concatenated SCALE encoded public keys."
              ]
            },
            {
              "name": "decode_session_keys",
              "inputs": [
                {
                  "name": "encoded",
                  "ty": 14
                }
              ],
              "output": 510,
              "docs": [
                " Decode the given public session keys.",
                "",
                " Returns the list of public raw public keys + key type."
              ]
            }
          ],
          "docs": [
            " Session keys runtime api."
          ]
        },
        {
          "name": "AccountNonceApi",
          "methods": [
            {
              "name": "account_nonce",
              "inputs": [
                {
                  "name": "account",
                  "ty": 0
                }
              ],
              "output": 4,
              "docs": [
                " Get current account nonce of given `AccountId`."
              ]
            }
          ],
          "docs": [
            " The API to query account nonce."
          ]
        },
        {
          "name": "NftsApi",
          "methods": [
            {
              "name": "owner",
              "inputs": [
                {
                  "name": "collection",
                  "ty": 4
                },
                {
                  "name": "item",
                  "ty": 4
                }
              ],
              "output": 136,
              "docs": []
            },
            {
              "name": "collection_owner",
              "inputs": [
                {
                  "name": "collection",
                  "ty": 4
                }
              ],
              "output": 136,
              "docs": []
            },
            {
              "name": "attribute",
              "inputs": [
                {
                  "name": "collection",
                  "ty": 4
                },
                {
                  "name": "item",
                  "ty": 4
                },
                {
                  "name": "key",
                  "ty": 14
                }
              ],
              "output": 297,
              "docs": []
            },
            {
              "name": "custom_attribute",
              "inputs": [
                {
                  "name": "account",
                  "ty": 0
                },
                {
                  "name": "collection",
                  "ty": 4
                },
                {
                  "name": "item",
                  "ty": 4
                },
                {
                  "name": "key",
                  "ty": 14
                }
              ],
              "output": 297,
              "docs": []
            },
            {
              "name": "system_attribute",
              "inputs": [
                {
                  "name": "collection",
                  "ty": 4
                },
                {
                  "name": "item",
                  "ty": 133
                },
                {
                  "name": "key",
                  "ty": 14
                }
              ],
              "output": 297,
              "docs": []
            },
            {
              "name": "collection_attribute",
              "inputs": [
                {
                  "name": "collection",
                  "ty": 4
                },
                {
                  "name": "key",
                  "ty": 14
                }
              ],
              "output": 297,
              "docs": []
            }
          ],
          "docs": []
        },
        {
          "name": "AssetConversionApi",
          "methods": [
            {
              "name": "quote_price_tokens_for_exact_tokens",
              "inputs": [
                {
                  "name": "asset1",
                  "ty": 37
                },
                {
                  "name": "asset2",
                  "ty": 37
                },
                {
                  "name": "amount",
                  "ty": 6
                },
                {
                  "name": "include_fee",
                  "ty": 8
                }
              ],
              "output": 360,
              "docs": [
                " Provides a quote for [`Pallet::swap_tokens_for_exact_tokens`].",
                "",
                " Note that the price may have changed by the time the transaction is executed.",
                " (Use `amount_in_max` to control slippage.)"
              ]
            },
            {
              "name": "quote_price_exact_tokens_for_tokens",
              "inputs": [
                {
                  "name": "asset1",
                  "ty": 37
                },
                {
                  "name": "asset2",
                  "ty": 37
                },
                {
                  "name": "amount",
                  "ty": 6
                },
                {
                  "name": "include_fee",
                  "ty": 8
                }
              ],
              "output": 360,
              "docs": [
                " Provides a quote for [`Pallet::swap_exact_tokens_for_tokens`].",
                "",
                " Note that the price may have changed by the time the transaction is executed.",
                " (Use `amount_out_min` to control slippage.)"
              ]
            },
            {
              "name": "get_reserves",
              "inputs": [
                {
                  "name": "asset1",
                  "ty": 37
                },
                {
                  "name": "asset2",
                  "ty": 37
                }
              ],
              "output": 513,
              "docs": [
                " Returns the size of the liquidity pool for the given asset pair."
              ]
            }
          ],
          "docs": [
            " This runtime api allows people to query the size of the liquidity pools",
            " and quote prices for swaps."
          ]
        },
        {
          "name": "TransactionPaymentApi",
          "methods": [
            {
              "name": "query_info",
              "inputs": [
                {
                  "name": "uxt",
                  "ty": 493
                },
                {
                  "name": "len",
                  "ty": 4
                }
              ],
              "output": 515,
              "docs": []
            },
            {
              "name": "query_fee_details",
              "inputs": [
                {
                  "name": "uxt",
                  "ty": 493
                },
                {
                  "name": "len",
                  "ty": 4
                }
              ],
              "output": 516,
              "docs": []
            },
            {
              "name": "query_weight_to_fee",
              "inputs": [
                {
                  "name": "weight",
                  "ty": 10
                }
              ],
              "output": 6,
              "docs": []
            },
            {
              "name": "query_length_to_fee",
              "inputs": [
                {
                  "name": "length",
                  "ty": 4
                }
              ],
              "output": 6,
              "docs": []
            }
          ],
          "docs": []
        },
        {
          "name": "XcmPaymentApi",
          "methods": [
            {
              "name": "query_acceptable_payment_assets",
              "inputs": [
                {
                  "name": "xcm_version",
                  "ty": 4
                }
              ],
              "output": 519,
              "docs": [
                " Returns a list of acceptable payment assets.",
                "",
                " # Arguments",
                "",
                " * `xcm_version`: Version."
              ]
            },
            {
              "name": "query_xcm_weight",
              "inputs": [
                {
                  "name": "message",
                  "ty": 308
                }
              ],
              "output": 522,
              "docs": [
                " Returns a weight needed to execute a XCM.",
                "",
                " # Arguments",
                "",
                " * `message`: `VersionedXcm`."
              ]
            },
            {
              "name": "query_weight_to_asset_fee",
              "inputs": [
                {
                  "name": "weight",
                  "ty": 10
                },
                {
                  "name": "asset",
                  "ty": 299
                }
              ],
              "output": 523,
              "docs": [
                " Converts a weight into a fee for the specified `AssetId`.",
                "",
                " # Arguments",
                "",
                " * `weight`: convertible `Weight`.",
                " * `asset`: `VersionedAssetId`."
              ]
            },
            {
              "name": "query_delivery_fees",
              "inputs": [
                {
                  "name": "destination",
                  "ty": 115
                },
                {
                  "name": "message",
                  "ty": 308
                }
              ],
              "output": 524,
              "docs": [
                " Get delivery fees for sending a specific `message` to a `destination`.",
                " These always come in a specific asset, defined by the chain.",
                "",
                " # Arguments",
                " * `message`: The message that'll be sent, necessary because most delivery fees are based on the",
                "   size of the message.",
                " * `destination`: The destination to send the message to. Different destinations may use",
                "   different senders that charge different fees."
              ]
            }
          ],
          "docs": [
            " A trait of XCM payment API.",
            "",
            " API provides functionality for obtaining:",
            "",
            " * the weight required to execute an XCM message,",
            " * a list of acceptable `AssetId`s for message execution payment,",
            " * the cost of the weight in the specified acceptable `AssetId`.",
            " * the fees for an XCM message delivery.",
            "",
            " To determine the execution weight of the calls required for",
            " [`xcm::latest::Instruction::Transact`] instruction, `TransactionPaymentCallApi` can be used."
          ]
        },
        {
          "name": "DryRunApi",
          "methods": [
            {
              "name": "dry_run_call",
              "inputs": [
                {
                  "name": "origin",
                  "ty": 394
                },
                {
                  "name": "call",
                  "ty": 351
                }
              ],
              "output": 525,
              "docs": [
                " Dry run call."
              ]
            },
            {
              "name": "dry_run_xcm",
              "inputs": [
                {
                  "name": "origin_location",
                  "ty": 115
                },
                {
                  "name": "xcm",
                  "ty": 325
                }
              ],
              "output": 536,
              "docs": [
                " Dry run XCM program"
              ]
            }
          ],
          "docs": [
            " API for dry-running extrinsics and XCM programs to get the programs that need to be passed to the fees API.",
            "",
            " All calls return a vector of tuples (location, xcm) where each \"xcm\" is executed in \"location\".",
            " If there's local execution, the location will be \"Here\".",
            " This vector can be used to calculate both execution and delivery fees.",
            "",
            " Calls or XCMs might fail when executed, this doesn't mean the result of these calls will be an `Err`.",
            " In those cases, there might still be a valid result, with the execution error inside it.",
            " The only reasons why these calls might return an error are listed in the [`Error`] enum."
          ]
        },
        {
          "name": "LocationToAccountApi",
          "methods": [
            {
              "name": "convert_location",
              "inputs": [
                {
                  "name": "location",
                  "ty": 115
                }
              ],
              "output": 538,
              "docs": [
                " Converts `Location` to `AccountId`."
              ]
            }
          ],
          "docs": [
            " API for useful conversions between XCM `Location` and `AccountId`."
          ]
        },
        {
          "name": "TransactionPaymentCallApi",
          "methods": [
            {
              "name": "query_call_info",
              "inputs": [
                {
                  "name": "call",
                  "ty": 351
                },
                {
                  "name": "len",
                  "ty": 4
                }
              ],
              "output": 515,
              "docs": [
                " Query information of a dispatch class, weight, and fee of a given encoded `Call`."
              ]
            },
            {
              "name": "query_call_fee_details",
              "inputs": [
                {
                  "name": "call",
                  "ty": 351
                },
                {
                  "name": "len",
                  "ty": 4
                }
              ],
              "output": 516,
              "docs": [
                " Query fee details of a given encoded `Call`."
              ]
            },
            {
              "name": "query_weight_to_fee",
              "inputs": [
                {
                  "name": "weight",
                  "ty": 10
                }
              ],
              "output": 6,
              "docs": [
                " Query the output of the current `WeightToFee` given some input."
              ]
            },
            {
              "name": "query_length_to_fee",
              "inputs": [
                {
                  "name": "length",
                  "ty": 4
                }
              ],
              "output": 6,
              "docs": [
                " Query the output of the current `LengthToFee` given some input."
              ]
            }
          ],
          "docs": []
        },
        {
          "name": "FungiblesApi",
          "methods": [
            {
              "name": "query_account_balances",
              "inputs": [
                {
                  "name": "account",
                  "ty": 0
                }
              ],
              "output": 540,
              "docs": [
                " Returns the list of all [`Asset`] that an `AccountId` has."
              ]
            }
          ],
          "docs": [
            " The API for querying account's balances from runtime."
          ]
        },
        {
          "name": "CollectCollationInfo",
          "methods": [
            {
              "name": "collect_collation_info",
              "inputs": [
                {
                  "name": "header",
                  "ty": 492
                }
              ],
              "output": 542,
              "docs": [
                " Collect information about a collation.",
                "",
                " The given `header` is the header of the built block for that",
                " we are collecting the collation info for."
              ]
            }
          ],
          "docs": [
            " Runtime api to collect information about a collation."
          ]
        },
        {
          "name": "GenesisBuilder",
          "methods": [
            {
              "name": "build_state",
              "inputs": [
                {
                  "name": "json",
                  "ty": 14
                }
              ],
              "output": 545,
              "docs": [
                " Build `RuntimeGenesisConfig` from a JSON blob not using any defaults and store it in the",
                " storage.",
                "",
                " In the case of a FRAME-based runtime, this function deserializes the full `RuntimeGenesisConfig` from the given JSON blob and",
                " puts it into the storage. If the provided JSON blob is incorrect or incomplete or the",
                " deserialization fails, an error is returned.",
                "",
                " Please note that provided JSON blob must contain all `RuntimeGenesisConfig` fields, no",
                " defaults will be used."
              ]
            },
            {
              "name": "get_preset",
              "inputs": [
                {
                  "name": "id",
                  "ty": 546
                }
              ],
              "output": 297,
              "docs": [
                " Returns a JSON blob representation of the built-in `RuntimeGenesisConfig` identified by",
                " `id`.",
                "",
                " If `id` is `None` the function returns JSON blob representation of the default",
                " `RuntimeGenesisConfig` struct of the runtime. Implementation must provide default",
                " `RuntimeGenesisConfig`.",
                "",
                " Otherwise function returns a JSON representation of the built-in, named",
                " `RuntimeGenesisConfig` preset identified by `id`, or `None` if such preset does not",
                " exists. Returned `Vec<u8>` contains bytes of JSON blob (patch) which comprises a list of",
                " (potentially nested) key-value pairs that are intended for customizing the default",
                " runtime genesis config. The patch shall be merged (rfc7386) with the JSON representation",
                " of the default `RuntimeGenesisConfig` to create a comprehensive genesis config that can",
                " be used in `build_state` method."
              ]
            },
            {
              "name": "preset_names",
              "inputs": [],
              "output": 547,
              "docs": [
                " Returns a list of identifiers for available builtin `RuntimeGenesisConfig` presets.",
                "",
                " The presets from the list can be queried with [`GenesisBuilder::get_preset`] method. If",
                " no named presets are provided by the runtime the list is empty."
              ]
            }
          ],
          "docs": [
            " API to interact with RuntimeGenesisConfig for the runtime"
          ]
        }
      ],
      "outer_enums": {
        "call_enum_ty": 351,
        "event_enum_ty": 21,
        "error_enum_ty": 548
      },
      "custom": {
        "map": {}
      }
    }
  }
]